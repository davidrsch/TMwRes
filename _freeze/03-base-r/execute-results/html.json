{
  "hash": "9bbea9e4f262ed6c85aa160425bb96ad",
  "result": {
    "markdown": "# Una Revisión De Los Fundamentos Del Modelado Con R {#sec-base-r}\n\n\n\n\n\nAntes de describir cómo usar tidymodels para aplicar principios de datos ordenados para construir modelos con R, revisemos cómo se crean, entrenan y usan los modelos en el lenguaje R central (a menudo llamado \"R base\"). Este capítulo es una breve ilustración de las convenciones básicas del lenguaje que es importante tener en cuenta incluso si nunca utiliza base R para modelos. Este capítulo no es exhaustivo, pero proporciona a los lectores (especialmente aquellos nuevos en R) los motivos básicos más utilizados.\n\nEl lenguaje S, en el que se basa R, ha tenido un rico entorno de análisis de datos desde la publicación de @WhiteBook (comúnmente conocido como El Libro Blanco). Esta versión de S introdujo componentes de infraestructura estándar familiares para los usuarios de R hoy en día, como fórmulas de modelos simbólicos, matrices de modelos y marcos de datos, así como métodos de programación estándar orientados a objetos para el análisis de datos. Estas interfaces de usuario no han cambiado sustancialmente desde entonces.\n\n## Un Ejemplo\n\nPara demostrar algunos fundamentos del modelado en base R, usemos datos experimentales de @mcdonald2009, a través de @mangiafico2015, sobre la relación entre la temperatura ambiente y la tasa de chirridos de los grillos por minuto. Se recolectaron datos para dos especies: *O. exclamationis* y *O. niveus*. Los datos están contenidos en un marco de datos llamado \"crickets\" (grillos en español) con un total de puntos de datos \"r nrow(crickets)\". Estos datos se muestran en @fig-cricket-plot usando el siguiente código <span class=\"pkg\">ggplot2</span>.\n\n\n::: {.cell layout-align=\"center\" hash='03-base-r_cache/html/base-r-cricket-plot_b2181e874c329b5522e2c7deaf811c08'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ndata(crickets, package = \"modeldata\")\nnames(crickets)\n\n# Grápica de la temperatura en el eje x, la tasa de chirrido en el eje y. Los elementos\n# de la gráfica se colorean de forma diferente para cada especie:\nggplot(crickets, \n       aes(x = temp, y = rate, color = species, pch = species, lty = species)) + \n  # Traza puntos para cada punto de datos y color por especie.\n  geom_point(size = 2) + \n  # Muestra un ajuste de modelo lineal simple creado por separado para cada especie:\n  geom_smooth(method = lm, se = FALSE, alpha = 0.5) + \n  scale_color_brewer(palette = \"Paired\") +\n  labs(x = \"Temperatura (C)\", y = \"Tasa de chirrido (por minuto)\")\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='03-base-r_cache/html/fig-cricket-plot_99e0d3441d481db27454484d68918d72'}\n\n```\n## [1] \"species\" \"temp\"    \"rate\"\n```\n\n::: {.cell-output-display}\n![Relación entre la tasa de chirrido y la temperatura de dos especies diferentes de grillos](03-base-r_files/figure-html/fig-cricket-plot-1.png){#fig-cricket-plot fig-align='center' fig-alt='Un diagrama de dispersión de la tasa de chirrido y la temperatura de dos especies diferentes de grillos con líneas de tendencia lineales por especie. Las tendencias aumentan linealmente con una separación entre las dos especies.' width=70%}\n:::\n:::\n\n\nLos datos muestran tendencias bastante lineales para cada especie. Para una temperatura dada, *O. exclamationis* parece chirriar más por minuto que las otras especies. Para un modelo inferencial, los investigadores podrían haber especificado las siguientes hipótesis nulas antes de ver los datos:\n\n-   La temperatura no tiene ningún efecto sobre la tasa de chirrido.\n\n-   No hay diferencias entre la tasa de chirrido de las especies.\n\nPuede haber algún valor científico o práctico en predecir la tasa de chirrido, pero en este ejemplo nos centraremos en la inferencia.\n\nPara ajustar un modelo lineal ordinario en R, se usa comúnmente la función `lm()`. Los argumentos importantes de esta función son una fórmula modelo y un marco de datos que contiene los datos. La fórmula es *simbólica*. Por ejemplo, la fórmula simple:\n\n``` r\nrate ~ temp\n```\n\nespecifica que la tasa de chirrido es el resultado (ya que está en el lado izquierdo de la tilde `~`) y que el valor de la temperatura es el predictor.[^03-base-r-1] Supongamos que los datos contienen la hora del día en el que se obtuvieron las medidas en una columna llamada `hora`. La formula:\n\n[^03-base-r-1]: La mayoría de las funciones del modelo agregan implícitamente una columna de intersección.\n\n``` r\nrate ~ temp + time\n```\n\nno sumaría los valores de tiempo y temperatura. Esta fórmula representaría simbólicamente que la temperatura y el tiempo deben agregarse como *efectos principales* separados al modelo. Un efecto principal es un término del modelo que contiene una única variable predictiva.\n\nNo hay mediciones de tiempo en estos datos pero las especies se pueden agregar al modelo de la misma manera:\n\n``` r\nrate ~ temp + species\n```\n\nLa especie no es una variable cuantitativa; en el marco de datos, se representa como una columna de factor con niveles `\"O. exclamationis\"` y `\"O. niveus\"`. La gran mayoría de las funciones del modelo no pueden operar con datos no numéricos. Para las especies, el modelo necesita codificar los datos de las especies en un formato numérico. El enfoque más común es utilizar variables indicadoras (también conocidas como variables ficticias) en lugar de los valores cualitativos originales. En este caso, dado que la especie tiene dos valores posibles, la fórmula del modelo codificará automáticamente esta columna como numérica agregando una nueva columna que tiene un valor de cero cuando la especie es `\"O. exclamationis\"` y un valor de uno cuando la especie es `\"O. niveus\"`. La maquinaria de fórmulas subyacente convierte automáticamente estos valores para el conjunto de datos utilizado para crear el modelo, así como para cualquier punto de datos nuevo (por ejemplo, cuando el modelo se utiliza para predicción).\n\n::: rmdnote\nSupongamos que hubiera cinco especies en lugar de dos. La fórmula del modelo, en este caso, crearía cuatro columnas binarias que son indicadores binarios para cuatro de las especies. El *nivel de referencia* del factor (es decir, el primer nivel) siempre se deja fuera del conjunto de predictores. La idea es que, si se conocen los valores de las cuatro variables indicadoras, se pueda determinar el valor de la especie. Analizamos las variables de los indicadores binarios con más detalle en la [Sección -@sec-dummies].\n:::\n\nLa fórmula del modelo `rate ~ temp + species` crea un modelo con diferentes intersecciones en el eje y para cada especie; las pendientes de las líneas de regresión también podrían ser diferentes para cada especie. Para adaptarse a esta estructura, se puede agregar un término de interacción al modelo. Esto se puede especificar de varias maneras diferentes, y la más básica utiliza los dos puntos:\n\n``` r\nrate ~ temp + species + temp:species\n\n# Se puede utilizar un atajo para expandir todas las interacciones que contienen\n# dos variables:\nrate ~ (temp + species) ^ 2\n\n# Otro atajo para ampliar los factores para incluir todos las posibles\n# interacciones (equivalentes para este ejemplo):\nrate ~ temp * species\n```\n\nAdemás de la conveniencia de crear variables indicadoras automáticamente, la fórmula ofrece algunas otras sutilezas:\n\n-   Las funciones *en línea* se pueden utilizar en la fórmula. Por ejemplo, para utilizar el registro natural de la temperatura, podemos crear la fórmula `rate ~ log(temp)`. Dado que la fórmula es simbólica por defecto, la matemática literal también se puede aplicar a los predictores usando la función de identidad `I()`. Para usar unidades Fahrenheit, la fórmula podría ser `rate ~ I( (temp * 9/5) + 32 )` para convertir de Celsius.\n\n-   R tiene muchas funciones que son útiles dentro de las fórmulas. Por ejemplo, \"poly(x, 3)\" agrega términos lineales, cuadráticos y cúbicos para \"x\" al modelo como efectos principales. El paquete <span class=\"pkg\">splines</span> también tiene varias funciones para crear términos spline no lineales en la fórmula.\n\n-   Para conjuntos de datos donde hay muchos predictores, el acceso directo al período está disponible. El punto representa los efectos principales para todas las columnas que no están en el lado izquierdo de la tilde. El uso de `~ (.)^3` agregaría efectos principales, así como todas las interacciones de dos y tres variables, al modelo.\n\nVolviendo a nuestros grillos cantando, usemos un modelo de interacción bidireccional. En este libro, utilizamos el sufijo `_fit` para objetos R que son modelos ajustados.\n\n\n::: {.cell layout-align=\"center\" hash='03-base-r_cache/html/base-r-cricket-fit_94f2b30456df5f1fd5d33a125e09cd2f'}\n\n```{.r .cell-code}\ninteraction_fit <-  lm(rate ~ (temp + species)^2, data = crickets) \n\n# Para imprimir un breve resumen del modelo:\ninteraction_fit\n## \n## Call:\n## lm(formula = rate ~ (temp + species)^2, data = crickets)\n## \n## Coefficients:\n##           (Intercept)                   temp       speciesO. niveus  \n##               -11.041                  3.751                 -4.348  \n## temp:speciesO. niveus  \n##                -0.234\n```\n:::\n\n\nEste resultado es un poco difícil de leer. Para las variables indicadoras de especies, R combina el nombre de la variable (`species`) con el nivel del factor (`O. niveus`) sin delimitador.\n\nAntes de entrar en resultados inferenciales para este modelo, se debe evaluar el ajuste mediante gráficos de diagnóstico. Podemos usar el método `plot()` para objetos `lm`. Este método produce un conjunto de cuatro gráficos para el objeto, cada uno de los cuales muestra diferentes aspectos del ajuste, como se muestra en @fig-interaction-plots.\n\n\n::: {.cell layout-align=\"center\" hash='03-base-r_cache/html/base-r-interaction-plots_b0db9e7ce26c05d2414b056ad8026eb4'}\n\n```{.r .cell-code}\n# Coloca dos gráficas una juunto a la otra:\npar(mfrow = c(1, 2))\n\n# Muestra residuos frente a valores previstos:\nplot(interaction_fit, which = 1)\n\n# Una gráfica de cuantiles normales sobre los residuos:\nplot(interaction_fit, which = 2)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='03-base-r_cache/html/fig-interaction-plots_12c2e5f88e179b39e9d628d3f4eeb06a'}\n::: {.cell-output-display}\n![Gráficos de diagnóstico residuales para el modelo lineal con interacciones, que parecen lo suficientemente razonables para realizar análisis inferenciales.](03-base-r_files/figure-html/fig-interaction-plots-1.png){#fig-interaction-plots fig-align='center' fig-alt='A la izquierda hay un diagrama de dispersión de los residuos del modelo versus los valores predichos. No hay tendencias fuertes en los datos. El panel de la derecha muestra un gráfico cuantil-cuantil normal donde los puntos indican que la normalidad probablemente sea una buena suposición.' width=100%}\n:::\n:::\n\n\n::: rmdnote\nCuando se trata de los detalles técnicos de la evaluación de expresiones, R es *perezoso* (en lugar de entusiasta). Esto significa que las funciones de ajuste del modelo normalmente calculan las cantidades mínimas posibles en el último momento posible. Por ejemplo, si está interesado en la tabla de coeficientes para cada término del modelo, esto no se calcula automáticamente con el modelo, sino que se calcula mediante el método `summary()`.\n:::\n\nNuestra siguiente tarea con los grillos es evaluar si es necesaria la inclusión del término de interacción. El enfoque más apropiado para este modelo es recalcular el modelo sin el término de interacción y utilizar el método `anova()`.\n\n\n::: {.cell layout-align=\"center\" hash='03-base-r_cache/html/base-r-cricket-anova_92264bdf27b9dcfae4ee21dab3db1c9d'}\n\n```{.r .cell-code}\n# Montar un modelo reducido:\nmain_effect_fit <-  lm(rate ~ temp + species, data = crickets) \n\n# Comparar los modelos\nanova(main_effect_fit, interaction_fit)\n## Analysis of Variance Table\n## \n## Model 1: rate ~ temp + species\n## Model 2: rate ~ (temp + species)^2\n##   Res.Df  RSS Df Sum of Sq    F Pr(>F)\n## 1     28 89.3                         \n## 2     27 85.1  1      4.28 1.36   0.25\n```\n:::\n\n\nEsta prueba estadística genera un valor p de 0.25. Esto implica que falta evidencia contra la hipótesis nula de que el modelo no necesita el término de interacción. Por esta razón, realizaremos más análisis del modelo sin la interacción.\n\nLos gráficos residuales deben reevaluarse para asegurarnos de que nuestros supuestos teóricos sean lo suficientemente válidos como para confiar en los valores p producidos por el modelo (los gráficos no se muestran aquí, pero alerta de spoiler: lo son).\n\nPodemos usar el método `summary()` para inspeccionar los coeficientes, errores estándar y valores p de cada término del modelo:\n\n\n::: {.cell layout-align=\"center\" hash='03-base-r_cache/html/base-r-main-coef_eb55a91d11bb1bdf0c07c6c6df10e246'}\n\n```{.r .cell-code}\nsummary(main_effect_fit)\n## \n## Call:\n## lm(formula = rate ~ temp + species, data = crickets)\n## \n## Residuals:\n##    Min     1Q Median     3Q    Max \n## -3.013 -1.130 -0.391  0.965  3.780 \n## \n## Coefficients:\n##                  Estimate Std. Error t value Pr(>|t|)    \n## (Intercept)       -7.2109     2.5509   -2.83   0.0086 ** \n## temp               3.6028     0.0973   37.03  < 2e-16 ***\n## speciesO. niveus -10.0653     0.7353  -13.69  6.3e-14 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 1.79 on 28 degrees of freedom\n## Multiple R-squared:  0.99,\tAdjusted R-squared:  0.989 \n## F-statistic: 1.33e+03 on 2 and 28 DF,  p-value: <2e-16\n```\n:::\n\n\nLa tasa de chirrido para cada especie aumenta en 3.6 chirridos a medida que la temperatura aumenta en un solo grado. Este término muestra una fuerte significación estadística como lo demuestra el valor p. El término de especie tiene un valor de -10.07. Esto indica que, en todos los valores de temperatura, *O. niveus* tiene una frecuencia de chirrido que es aproximadamente 10 menos chirridos por minuto que *O. exclamationis*. De manera similar al término de temperatura, el efecto de especie se asocia con un valor p muy pequeño.\n\nEl único problema en este análisis es el valor de la intersección. Indica que a 0° C, hay chirridos negativos por minuto para ambas especies. Si bien esto no tiene sentido, los datos solo llegan a 17.2° C e interpretar el modelo a 0° C sería una extrapolación. Esta sería una mala idea. Dicho esto, el ajuste del modelo es bueno dentro del *rango aplicable* de los valores de temperatura; las conclusiones deben limitarse al rango de temperatura observado.\n\nSi necesitáramos estimar la tasa de chirrido a una temperatura que no se observó en el experimento, podríamos usar el método `predecit()`. Toma el objeto modelo y un marco de datos de nuevos valores para la predicción. Por ejemplo, el modelo estima la tasa de chirrido para *O. exclamationis* para temperaturas entre 15° C y 20° C se puede calcular mediante:\n\n\n::: {.cell layout-align=\"center\" hash='03-base-r_cache/html/base-r-cricket-pred_a1c62ebcaa30e2f46cae10c58579984a'}\n\n```{.r .cell-code}\nnew_values <- data.frame(species = \"O. exclamationis\", temp = 15:20)\npredict(main_effect_fit, new_values)\n##     1     2     3     4     5     6 \n## 46.83 50.43 54.04 57.64 61.24 64.84\n```\n:::\n\n\n::: rmdwarning\nTenga en cuenta que el valor no numérico de `species` se pasa al método de predicción, a diferencia de la variable indicadora binaria numérica.\n:::\n\nSi bien este análisis obviamente no ha sido una demostración exhaustiva de las capacidades de modelado de R, sí resalta algunas características importantes para el resto de este libro:\n\n-   El lenguaje tiene una sintaxis expresiva para especificar términos de modelo tanto para modelos simples como para modelos bastante complejos.\n\n-   El método de la fórmula R tiene muchas ventajas para el modelado que también se aplican a datos nuevos cuando se generan predicciones.\n\n-   Existen numerosas funciones auxiliares (por ejemplo, `anova()`, `summary()` y `predict()`) que puede utilizar para realizar cálculos específicos después de crear el modelo ajustado.\n\nFinalmente, como se mencionó anteriormente, este marco se publicó por primera vez en 1992. La mayoría de estas ideas y métodos se desarrollaron en ese período, pero siguen siendo notablemente relevantes hasta el día de hoy. Destaca que el lenguaje S y, por extensión, R, ha sido diseñado para el análisis de datos desde sus inicios.\n\n## ¿Qué Hace La Fórmula R? {#sec-formula}\n\nMuchos paquetes de modelado utilizan la fórmula del modelo R. Suele tener múltiples propósitos:\n\n-   La fórmula define las columnas que utiliza el modelo.\n\n-   La maquinaria R estándar utiliza la fórmula para codificar las columnas en un formato apropiado.\n\n-   Los roles de las columnas están definidos por la fórmula.\n\nEn su mayor parte, la comprensión de los profesionales sobre lo que hace la fórmula está dominada por el último propósito. Nuestro enfoque al escribir una fórmula suele ser declarar cómo se deben usar las columnas. Por ejemplo, la especificación anterior que analizamos configura predictores que se utilizarán de una manera específica:\n\n``` r\n(temp + species)^2\n```\n\nNuestro enfoque, al ver esto, es que hay dos predictores y el modelo debe contener sus efectos principales y las interacciones bidireccionales. Sin embargo, esta fórmula también implica que, dado que `species` es un factor, también se deben crear columnas de variables indicadoras para este predictor (ver [Sección -@sec-dummies]) y multiplicar esas columnas por la columna `temp` para crear el interacciones. Esta transformación representa nuestro segundo punto sobre codificación; la fórmula también define cómo se codifica cada columna y puede crear columnas adicionales que no están en los datos originales.\n\n::: rmdwarning\nEste es un punto importante que surgirá varias veces en este texto, especialmente cuando analicemos la ingeniería de funciones más compleja en el [Capítulo @sec-recipes] y más allá. La fórmula en R tiene algunas limitaciones y nuestros enfoques para superarlas se enfrentan a los tres aspectos.\n:::\n\n## ¿Por Qué El Orden Es Importante Para Modelar? {#sec-tidiness-modeling}\n\nUno de los puntos fuertes de R es que anima a los desarrolladores a crear una interfaz de usuario que se ajuste a sus necesidades. A modo de ejemplo, aquí se muestran tres métodos comunes para crear un diagrama de dispersión de dos variables numéricas en un marco de datos llamado `plot_data`:\n\n\n::: {.cell layout-align=\"center\" hash='03-base-r_cache/html/base-r-three-plots_d1bdc94eb0d3ad751c675bfc62def17f'}\n\n```{.r .cell-code}\nplot(plot_data$x, plot_data$y)\n\nlibrary(lattice)\nxyplot(y ~ x, data = plot_data)\n\nlibrary(ggplot2)\nggplot(plot_data, aes(x = x, y = y)) + geom_point()\n```\n:::\n\n\nEn estos tres casos, grupos separados de desarrolladores idearon tres interfaces distintas para la misma tarea. Cada uno tiene ventajas y desventajas.\n\nEn comparación, la *Guía del desarrollador de Python* defiende la noción de que, al abordar un problema:\n\n> \"Debería haber una, y preferiblemente sólo una, manera obvia de hacerlo.\"\n\nR es bastante diferente de Python a este respecto. Una ventaja de la diversidad de interfaces de R es que puede evolucionar con el tiempo y adaptarse a diferentes necesidades de diferentes usuarios.\n\nDesafortunadamente, parte de la diversidad sintáctica se debe a un enfoque en las necesidades de la persona que *desarrolla* el código en lugar de las necesidades de la persona que *usa* el código. Las inconsistencias entre paquetes pueden ser un obstáculo para los usuarios de R.\n\nSuponga que su proyecto de modelado tiene un resultado con dos clases. Existe una variedad de modelos estadísticos y de aprendizaje automático entre los que puede elegir. Para producir una estimación de probabilidad de clase para cada muestra, es común que una función de modelo tenga un método `predict()` correspondiente. Sin embargo, existe una heterogeneidad significativa en los valores de los argumentos utilizados por esos métodos para hacer predicciones de probabilidad de clase; esta heterogeneidad puede resultar difícil de navegar incluso para los usuarios experimentados. En @tbl-probability-args se muestra una muestra de estos valores de argumentos para diferentes modelos.\n\n\n::: {#tbl-probability-args .cell layout-align=\"center\" tbl-cap='Nombres de argumentos heterogéneos para diferentes funciones de modelado.' hash='03-base-r_cache/html/tbl-probability-args_d65365d9c3410c34087e20f123fb0e23'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Función </th>\n   <th style=\"text-align:left;\"> Paquete </th>\n   <th style=\"text-align:left;\"> Código </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;font-family: monospace;\"> lda() </td>\n   <td style=\"text-align:left;\"> MASS </td>\n   <td style=\"text-align:left;font-family: monospace;\"> predict(object) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-family: monospace;\"> glm() </td>\n   <td style=\"text-align:left;\"> stats </td>\n   <td style=\"text-align:left;font-family: monospace;\"> predict(object, type = \"response\") </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-family: monospace;\"> gbm() </td>\n   <td style=\"text-align:left;\"> gbm </td>\n   <td style=\"text-align:left;font-family: monospace;\"> predict(object, type = \"response\", n.trees) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-family: monospace;\"> mda() </td>\n   <td style=\"text-align:left;\"> mda </td>\n   <td style=\"text-align:left;font-family: monospace;\"> predict(object, type = \"posterior\") </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-family: monospace;\"> rpart() </td>\n   <td style=\"text-align:left;\"> rpart </td>\n   <td style=\"text-align:left;font-family: monospace;\"> predict(object, type = \"prob\") </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> various </td>\n   <td style=\"text-align:left;\"> RWeka </td>\n   <td style=\"text-align:left;font-family: monospace;\"> predict(object, type = \"probability\") </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-family: monospace;\"> logitboost() </td>\n   <td style=\"text-align:left;\"> LogitBoost </td>\n   <td style=\"text-align:left;font-family: monospace;\"> predict(object, type = \"raw\", nIter) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-family: monospace;\"> pamr.train() </td>\n   <td style=\"text-align:left;\"> pamr </td>\n   <td style=\"text-align:left;font-family: monospace;\"> pamr.predict(object, type = \"posterior\") </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nTenga en cuenta que el último ejemplo tiene una función personalizada para hacer predicciones en lugar de utilizar la interfaz `predict()` más común (el método genérico `predict()`). Esta falta de coherencia es una barrera para el uso diario de R para modelado.\n\nComo otro ejemplo de imprevisibilidad, el lenguaje R tiene convenciones para datos faltantes que se manejan de manera inconsistente. La regla general es que los datos faltantes propagan más datos faltantes; el promedio de un conjunto de valores al que le falta un punto de datos también falta, y así sucesivamente. Cuando los modelos hacen predicciones, la gran mayoría requiere que todos los predictores tengan valores completos. Hay varias opciones integradas en R en este punto con la función genérica `na.action()`. Esto establece la política sobre cómo debe comportarse una función si faltan valores. Las dos políticas más comunes son `na.fail()` y `na.omit()`. El primero produce un error si hay datos faltantes, mientras que el segundo elimina los datos faltantes antes de los cálculos mediante eliminación entre mayúsculas y minúsculas. De nuestro ejemplo anterior:\n\n\n::: {.cell layout-align=\"center\" hash='03-base-r_cache/html/base-r-lm-missing_0008d91bda1d14798a1338fab494716b'}\n\n```{.r .cell-code}\n# Añade un valor faltante al conjunto de predicción\nnew_values$temp[1] <- NA\n\n# El método de predicción para `lm` por defecto es `na.pass`:\npredict(main_effect_fit, new_values)\n##     1     2     3     4     5     6 \n##    NA 50.43 54.04 57.64 61.24 64.84\n\n# Alternativamente \npredict(main_effect_fit, new_values, na.action = na.fail)\n## Error in na.fail.default(structure(list(temp = c(NA, 16L, 17L, 18L, 19L, : missing values in object\n\npredict(main_effect_fit, new_values, na.action = na.omit)\n##     2     3     4     5     6 \n## 50.43 54.04 57.64 61.24 64.84\n```\n:::\n\n\nDesde el punto de vista del usuario, `na.omit()` puede ser problemático. En nuestro ejemplo, `new_values` tiene filas 6 pero solo 5 se devolvería con `na.omit()`. Para ajustar esto, el usuario tendría que determinar qué fila tenía el valor faltante e intercalar un valor faltante en el lugar apropiado si las predicciones se fusionaran en `new_values`.[^03-base-r-2] Si bien es poco común que una función de predicción utiliza `na.omit()` como política de datos faltantes, esto ocurre. Los usuarios que han determinado esto como la causa de un error en su código lo encuentran bastante memorable.\n\n[^03-base-r-2]: Una política base R llamada `na.exclude()` hace exactamente esto.\n\nPara resolver los problemas de uso descritos aquí, los paquetes tidymodels tienen un conjunto de objetivos de diseño. La mayoría de los objetivos de diseño de tidymodels se incluyen en la rúbrica existente de \"Diseño para humanos\" de tidyverse [@tidyverse], pero con aplicaciones específicas para código de modelado. Hay algunos objetivos de diseño de tidymodels adicionales que complementan los del tidyverse. Algunos ejemplos:\n\n-   R tiene excelentes capacidades para la programación orientada a objetos, y las usamos en lugar de crear nuevos nombres de funciones (como una nueva función hipotética `predict_samples()`).\n\n-   *Los valores predeterminados sensatos* son muy importantes. Además, las funciones no deberían tener argumentos predeterminados cuando es más apropiado obligar al usuario a tomar una decisión (por ejemplo, el argumento del nombre del archivo para `read_csv()`).\n\n-   De manera similar, los valores de los argumentos cuyo valor predeterminado pueda derivarse de los datos deberían serlo. Por ejemplo, para `glm()`, el argumento `family` podría verificar el tipo de datos en el resultado y, si no se proporcionó ninguna `family`, se podría determinar internamente un valor predeterminado.\n\n-   Las funciones deben tomar las *estructuras de datos que tienen los usuarios* en lugar de la estructura de datos que desean los desarrolladores. Por ejemplo, la única interfaz de una función modelo no debe limitarse a matrices. Con frecuencia, los usuarios tendrán predictores no numéricos, como factores.\n\nMuchas de estas ideas se describen en las pautas de tidymodels para la implementación de modelos.[^03-base-r-3] En los capítulos siguientes, ilustraremos ejemplos de problemas existentes, junto con sus soluciones.\n\n[^03-base-r-3]: <https://tidymodels.github.io/model-implementation-principles>\n\n::: rmdnote\nAlgunos paquetes R existentes proporcionan una interfaz unificada para armonizar estas API de modelado heterogéneas, como <span class=\"pkg\">caret</span> y <span class=\"pkg\">mlr</span>. El marco tidymodels es similar a estos en cuanto a que adopta una unificación de la interfaz de funciones, así como también exige coherencia en los nombres de las funciones y los valores de retorno. Se diferencia en sus obstinados objetivos de diseño y en su implementación de modelado, que se analizan en detalle a lo largo de este libro.\n:::\n\nLa función `broom::tidy()`, que utilizamos a lo largo de este libro, es otra herramienta para estandarizar la estructura de los objetos R. Puede devolver muchos tipos de objetos R en un formato más utilizable. Por ejemplo, supongamos que los predictores se seleccionan en función de su correlación con la columna de resultados. Usando `purrr::map()`, los resultados de `cor.test()` se pueden devolver en una lista para cada predictor:\n\n\n::: {.cell layout-align=\"center\" hash='03-base-r_cache/html/base-r-corr-list_7d086b50ef4f722be7390e9e8e45958a'}\n\n```{.r .cell-code}\ncorr_res <- map(mtcars %>% select(-mpg), cor.test, y = mtcars$mpg)\n\n# El primero de diez resultados en el vector:\ncorr_res[[1]]\n## \n## \tPearson's product-moment correlation\n## \n## data:  .x[[i]] and mtcars$mpg\n## t = -8.9, df = 30, p-value = 6e-10\n## alternative hypothesis: true correlation is not equal to 0\n## 95 percent confidence interval:\n##  -0.9258 -0.7163\n## sample estimates:\n##     cor \n## -0.8522\n```\n:::\n\n\nSi queremos utilizar estos resultados en una gráfica, el formato estándar de los resultados de las pruebas de hipótesis no es muy útil. El método `tidy()` puede devolver esto como un tibble con nombres estandarizados:\n\n\n::: {.cell layout-align=\"center\" hash='03-base-r_cache/html/base-r-corr-tidy_a5c1ad1bf3b1bfdfe978865c4f555dab'}\n\n```{.r .cell-code}\nlibrary(broom)\n\ntidy(corr_res[[1]])\n## # A tibble: 1 × 8\n##   estimate statistic  p.value parameter conf.low conf.high method        alternative\n##      <dbl>     <dbl>    <dbl>     <int>    <dbl>     <dbl> <chr>         <chr>      \n## 1   -0.852     -8.92 6.11e-10        30   -0.926    -0.716 Pearson's pr… two.sided\n```\n:::\n\n\nEstos resultados se pueden \"apilar\" y agregar a un `ggplot()`, como se muestra en @fig-corr-plot.\n\n\n::: {.cell layout-align=\"center\" hash='03-base-r_cache/html/base-r-corr-plot_3f30161c4ee09f3f9495d1f45a9d7770'}\n\n```{.r .cell-code}\ncorr_res %>% \n  # Convierte cada uno a un formato ordenado; `map_dfr()` apila los marcos de datos \n  map_dfr(tidy, .id = \"predictor\") %>% \n  ggplot(aes(x = fct_reorder(predictor, estimate))) + \n  geom_point(aes(y = estimate)) + \n  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = .1) +\n  labs(x = NULL, y = \"Correlación con mpg\")\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='03-base-r_cache/html/fig-corr-plot_1737fe3f6d7f48f62e79ae721cd7fdf1'}\n::: {.cell-output-display}\n![Correlaciones (e intervalos de confianza del 95%) entre los predictores y el resultado en el conjunto de datos `mtcars`](03-base-r_files/figure-html/fig-corr-plot-1.png){#fig-corr-plot fig-align='center' fig-alt='Un gráfico de las correlaciones (e intervalos de confianza del 95%) entre los predictores y el resultado en el conjunto de datos `mtcars`. Ninguno de los intervalos se superpone con cero. El peso del automóvil tuvo la mayor correlación negativa y la relación del eje trasero tiene la mayor correlación positiva.' width=672}\n:::\n:::\n\n\nEs posible crear un gráfico de este tipo utilizando las funciones básicas del lenguaje R, pero reformatear automáticamente los resultados genera un código más conciso con menos posibilidades de errores.\n\n## Combinando Modelos Base R Y Tidyverse\n\nLas funciones de modelado de R del lenguaje central u otros paquetes de R se pueden usar junto con tidyverse, especialmente con los paquetes <span class=\"pkg\">dplyr</span>, <span class=\"pkg\">purrr</span> y <span class=\"pkg\">tidyr</span>. Por ejemplo, si quisiéramos ajustar modelos separados para cada especie de grillo, primero podemos desglosar los datos del grillo en esta columna usando `dplyr::group_nest()`:\n\n\n::: {.cell layout-align=\"center\" hash='03-base-r_cache/html/base-r-by-species-split_a2fef0e2c188443e75a445e95b21351f'}\n\n```{.r .cell-code}\nsplit_by_species <- \n  crickets %>% \n  group_nest(species) \nsplit_by_species\n## # A tibble: 2 × 2\n##   species                        data\n##   <fct>            <list<tibble[,2]>>\n## 1 O. exclamationis           [14 × 2]\n## 2 O. niveus                  [17 × 2]\n```\n:::\n\n\nLa columna `data` contiene las columnas `rate` y `temp` de `crickets` en una *columna de lista*. A partir de esto, la función `purrr::map()` puede crear modelos individuales para cada especie:\n\n\n::: {.cell layout-align=\"center\" hash='03-base-r_cache/html/base-r-species-models_67a9f2ecf5208c1f94433a2fa0ee407d'}\n\n```{.r .cell-code}\nmodel_by_species <- \n  split_by_species %>% \n  mutate(model = map(data, ~ lm(rate ~ temp, data = .x)))\nmodel_by_species\n## # A tibble: 2 × 3\n##   species                        data model \n##   <fct>            <list<tibble[,2]>> <list>\n## 1 O. exclamationis           [14 × 2] <lm>  \n## 2 O. niveus                  [17 × 2] <lm>\n```\n:::\n\n\nPara recopilar los coeficientes de cada uno de estos modelos, use `broom::tidy()` para convertirlos a un formato de marco de datos consistente para que se puedan desanidar:\n\n\n::: {.cell layout-align=\"center\" hash='03-base-r_cache/html/base-r-species-coefs_fc9b5831b6c03b4ea5d465e6bb2f61ab'}\n\n```{.r .cell-code}\nmodel_by_species %>% \n  mutate(coef = map(model, tidy)) %>% \n  select(species, coef) %>% \n  unnest(cols = c(coef))\n## # A tibble: 4 × 6\n##   species          term        estimate std.error statistic  p.value\n##   <fct>            <chr>          <dbl>     <dbl>     <dbl>    <dbl>\n## 1 O. exclamationis (Intercept)   -11.0      4.77      -2.32 3.90e- 2\n## 2 O. exclamationis temp            3.75     0.184     20.4  1.10e-10\n## 3 O. niveus        (Intercept)   -15.4      2.35      -6.56 9.07e- 6\n## 4 O. niveus        temp            3.52     0.105     33.6  1.57e-15\n```\n:::\n\n\n::: rmdnote\nLas columnas de lista pueden ser muy poderosas en proyectos de modelado. Las columnas de lista proporcionan contenedores para cualquier tipo de objetos R, desde un modelo ajustado hasta la importante estructura del marco de datos.\n:::\n\n## El Metapaquete Tidymodels\n\nEl tidyverse ([Capítulo @sec-tidyverse]) está diseñado como un conjunto de paquetes R modulares, cada uno con un alcance bastante limitado. El marco tidymodels sigue un diseño similar. Por ejemplo, el paquete <span class=\"pkg\">rsample</span> se centra en la división y el remuestreo de datos. Aunque los métodos de remuestreo son críticos para otras actividades de modelado (por ejemplo, medir el desempeño), residen en un solo paquete y las métricas de desempeño están contenidas en un paquete diferente e independiente, <span class=\"pkg\">yardstick</span>. Hay muchos beneficios al adoptar esta filosofía de paquetes modulares, desde una implementación de modelos menos inflada hasta un mantenimiento de paquetes más fluido.\n\n\n::: {.cell layout-align=\"center\" hash='03-base-r_cache/html/base-r-detach_c12a0b486989bbc3fe7d06cc6816a5fd'}\n\n:::\n\n\nLa desventaja de esta filosofía es que hay muchos paquetes en el marco de tidymodels. Para compensar esto, el *paquete* tidymodels (que puedes considerar como un metapaquete como el paquete tidyverse) carga un conjunto central de paquetes tidymodels y tidyverse. Al cargar el paquete se muestran qué paquetes están adjuntos:\n\n\n::: {.cell layout-align=\"center\" hash='03-base-r_cache/html/base-r-tidymodels-package_9de5e0719a3c0c78dee0fffa5a329662'}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n## ── Attaching packages ─────────────────────────────────────────── tidymodels 1.1.1 ──\n## ✔ dials        1.2.0     ✔ rsample      1.2.0\n## ✔ infer        1.0.5     ✔ tune         1.1.2\n## ✔ modeldata    1.2.0     ✔ workflows    1.1.3\n## ✔ parsnip      1.1.1     ✔ workflowsets 1.0.1\n## ✔ recipes      1.0.8     ✔ yardstick    1.2.0\n## ── Conflicts ────────────────────────────────────────────── tidymodels_conflicts() ──\n## ✖ scales::discard()        masks purrr::discard()\n## ✖ dplyr::filter()          masks stats::filter()\n## ✖ recipes::fixed()         masks stringr::fixed()\n## ✖ kableExtra::group_rows() masks dplyr::group_rows()\n## ✖ dplyr::lag()             masks stats::lag()\n## ✖ yardstick::spec()        masks readr::spec()\n## ✖ recipes::step()          masks stats::step()\n## • Dig deeper into tidy modeling with R at https://www.tmwr.org\n```\n:::\n\n\nSi ha utilizado tidyverse, notará algunos nombres familiares ya que algunos paquetes de tidyverse, como <span class=\"pkg\">dplyr</span> y <span class=\"pkg\">ggplot2</span>, se cargan junto con los paquetes tidymodels. Ya hemos dicho que el marco tidymodels aplica los principios de tidyverse al modelado, pero el marco tidymodels también se basa literalmente en algunos de los paquetes tidyverse más fundamentales, como estos.\n\nLa carga del metapaquete también muestra si hay conflictos de nombres de funciones con paquetes cargados previamente. Como ejemplo de un conflicto de nombres, antes de cargar <span class=\"pkg\">tidymodels</span>, al invocar la función `filter()` se ejecutará la función en el paquete <span class=\"pkg\">stats</span>. Después de cargar tidymodels, ejecutará la función <span class=\"pkg\">dplyr</span> del mismo nombre.\n\nHay algunas formas de manejar los conflictos de nombres. La función se puede llamar con su espacio de nombres (por ejemplo, `stats::filter()`). Esta no es una mala práctica, pero hace que el código sea menos legible.\n\nOtra opción es utilizar el paquete <span class=\"pkg\">conflicted</span>. Podemos establecer una regla que permanezca vigente hasta el final de la sesión de R para garantizar que siempre se ejecute una función específica si no se proporciona ningún espacio de nombres en el código. Como ejemplo, si preferimos la versión <span class=\"pkg\">dplyr</span> de la función anterior:\n\n\n::: {.cell layout-align=\"center\" hash='03-base-r_cache/html/base-r-conflicted_3e42984fdce7073eb899032776278991'}\n\n```{.r .cell-code}\nlibrary(conflicted)\nconflict_prefer(\"filter\", winner = \"dplyr\")\n```\n:::\n\n\nPor conveniencia, <span class=\"pkg\">tidymodels</span> contiene una función que captura la mayoría de los conflictos de nombres comunes que podemos encontrar:\n\n\n::: {.cell layout-align=\"center\" hash='03-base-r_cache/html/base-r-clonflicts_629c69895d76b7d6262a5ce31eb0f367'}\n\n```{.r .cell-code}\ntidymodels_prefer(quiet = FALSE)\n## [conflicted] Will prefer agua::refit over any other package.\n## [conflicted] Will prefer dials::Laplace over any other package.\n## [conflicted] Will prefer dials::max_rules over any other package.\n## [conflicted] Will prefer dials::neighbors over any other package.\n## [conflicted] Will prefer dials::prune over any other package.\n## [conflicted] Will prefer dials::smoothness over any other package.\n## [conflicted] Will prefer dplyr::collapse over any other package.\n## [conflicted] Will prefer dplyr::combine over any other package.\n## [conflicted] Will prefer dplyr::filter over any other package.\n## [conflicted] Will prefer dplyr::rename over any other package.\n## [conflicted] Will prefer dplyr::select over any other package.\n## [conflicted] Will prefer dplyr::slice over any other package.\n## [conflicted] Will prefer ggplot2::`%+%` over any other package.\n## [conflicted] Will prefer ggplot2::margin over any other package.\n## [conflicted] Will prefer parsnip::bart over any other package.\n## [conflicted] Will prefer parsnip::fit over any other package.\n## [conflicted] Will prefer parsnip::mars over any other package.\n## [conflicted] Will prefer parsnip::pls over any other package.\n## [conflicted] Will prefer purrr::cross over any other package.\n## [conflicted] Will prefer purrr::invoke over any other package.\n## [conflicted] Will prefer purrr::map over any other package.\n## [conflicted] Will prefer recipes::discretize over any other package.\n## [conflicted] Will prefer recipes::step over any other package.\n## [conflicted] Will prefer rsample::populate over any other package.\n## [conflicted] Will prefer scales::rescale over any other package.\n## [conflicted] Will prefer themis::step_downsample over any other package.\n## [conflicted] Will prefer themis::step_upsample over any other package.\n## [conflicted] Will prefer tidyr::expand over any other package.\n## [conflicted] Will prefer tidyr::extract over any other package.\n## [conflicted] Will prefer tidyr::pack over any other package.\n## [conflicted] Will prefer tidyr::unpack over any other package.\n## [conflicted] Will prefer tune::parameters over any other package.\n## [conflicted] Will prefer tune::tune over any other package.\n## [conflicted] Will prefer yardstick::get_weights over any other package.\n## [conflicted] Will prefer yardstick::precision over any other package.\n## [conflicted] Will prefer yardstick::recall over any other package.\n## [conflicted] Will prefer yardstick::spec over any other package.\n## [conflicted] Will prefer recipes::update over Matrix::update.\n## ── Conflicts ───────────────────────────────────────────────── tidymodels_prefer() ──\n```\n:::\n\n\n::: rmdwarning\nTenga en cuenta que el uso de esta función le permite optar por utilizar `conflicted::conflict_prefer()` para todos los conflictos de espacios de nombres, lo que convierte cada conflicto en un error y le obliga a elegir qué función utilizar. La función `tidymodels::tidymodels_prefer()` maneja los conflictos más comunes de las funciones de tidymodels, pero necesitarás manejar otros conflictos en tu sesión de R tú mismo.\n:::\n\n## Resumen Del Capítulo\n\nEste capítulo revisó las convenciones básicas del lenguaje R para crear y usar modelos que son una base importante para el resto de este libro. El operador de fórmula es un aspecto expresivo e importante del ajuste de modelos en R y, a menudo, sirve para múltiples propósitos en funciones que no son de tidymodels. Los enfoques tradicionales de R para modelar tienen algunas limitaciones, especialmente cuando se trata de manejar y visualizar con fluidez los resultados del modelo. El metapaquete <span class=\"pkg\">tidymodels</span> aplica la filosofía de diseño tidyverse a los paquetes de modelado.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}