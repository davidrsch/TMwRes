{
  "hash": "819616c42692236eef3283459c8a630a",
  "result": {
    "markdown": "\n\n\n# Explaining Models and Predictions {#sec-explain}\n\nIn Section \\@ref(model-types), we outlined a taxonomy of models and suggested that models typically are built as one or more of descriptive, inferential, or predictive. We suggested that model performance, as measured by appropriate metrics (like RMSE for regression or area under the ROC curve for classification), can be important for all modeling applications. Similarly, model explanations, answering *why* a model makes the predictions it does, can be important whether the purpose of your model is largely descriptive, to test a hypothesis, or to make a prediction. Answering the question \"why?\" allows modeling practitioners to understand which features were important in predictions and even how model predictions would change under different values for the features. This chapter covers how to ask a model why it makes the predictions it does.\n\nFor some models, like linear regression, it is usually clear how to explain why the model makes its predictions. The structure of a linear model contains coefficients for each predictor that are typically straightforward to interpret. For other models, like random forests that can capture nonlinear behavior by design, it is less transparent how to explain the model's predictions from only the structure of the model itself. Instead, we can apply model explainer algorithms to generate understanding of predictions.\n\n::: rmdnote\nThere are two types of model explanations, *global* and *local*. Global model explanations provide an overall understanding aggregated over a whole set of observations; local model explanations provide information about a prediction for a single observation.\n:::\n\n## Software for Model Explanations\n\nThe tidymodels framework does not itself contain software for model explanations. Instead, models trained and evaluated with tidymodels can be explained with other, supplementary software in R packages such as [<span class=\"pkg\">lime</span>](https://lime.data-imaginist.com/), [<span class=\"pkg\">vip</span>](https://koalaverse.github.io/vip/), and [<span class=\"pkg\">DALEX</span>](https://dalex.drwhy.ai/). We often choose:\n\n-   <span class=\"pkg\">vip</span> functions when we want to use *model-based* methods that take advantage of model structure (and are often faster)\n-   <span class=\"pkg\">DALEX</span> functions when we want to use *model-agnostic* methods that can be applied to any model\n\nIn Chapters \\@ref(resampling) and \\@ref(compare), we trained and compared several models to predict the price of homes in Ames, IA, including a linear model with interactions and a random forest model, with results shown in Figure \\@ref(fig:explain-obs-pred).\n\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/explain-obs-pred_c8950fe6d8e6c6f03120c42cb2c3302e'}\n::: {.cell-output-display}\n![Comparing predicted prices for a linear model with interactions and a random forest model](figures/explain-obs-pred-1.png){fig-align='center' fig-alt='Comparing predicted prices for a linear model with interactions and a random forest model. The random forest results in more accurate predictions.' width=672}\n:::\n:::\n\n\nLet's build model-agnostic explainers for both of these models to find out why they make these predictions. We can use the <span class=\"pkg\">DALEXtra</span> add-on package for <span class=\"pkg\">DALEX</span>, which provides support for tidymodels. @Biecek2021 provide a thorough exploration of how to use <span class=\"pkg\">DALEX</span> for model explanations; this chapter only summarizes some important approaches, specific to tidymodels. To compute any kind of model explanation, global or local, using <span class=\"pkg\">DALEX</span>, we first prepare the appropriate data and then create an *explainer* for each model:\n\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/explain-explainers_285a37223f79e721e5ca6f629b8f88a6'}\n\n```{.r .cell-code}\nlibrary(DALEXtra)\nvip_features <- c(\"Neighborhood\", \"Gr_Liv_Area\", \"Year_Built\", \n                  \"Bldg_Type\", \"Latitude\", \"Longitude\")\n\nvip_train <- \n  ames_train %>% \n  select(all_of(vip_features))\n\nexplainer_lm <- \n  explain_tidymodels(\n    lm_fit, \n    data = vip_train, \n    y = ames_train$Sale_Price,\n    label = \"lm + interactions\",\n    verbose = FALSE\n  )\n\nexplainer_rf <- \n  explain_tidymodels(\n    rf_fit, \n    data = vip_train, \n    y = ames_train$Sale_Price,\n    label = \"random forest\",\n    verbose = FALSE\n  )\n```\n:::\n\n\n::: rmdwarning\nA linear model is typically straightforward to interpret and explain; you may not often find yourself using separate model explanation algorithms for a linear model. However, it can sometimes be difficult to understand or explain the predictions of even a linear model once it has splines and interaction terms!\n:::\n\nDealing with significant feature engineering transformations during model explainability highlights some options we have (or sometimes, ambiguity in such analyses). We can quantify global or local model explanations either in terms of:\n\n-   *original, basic predictors* as they existed without significant feature engineering transformations, or\n-   *derived features*, such as those created via dimensionality reduction (Chapter \\@ref(dimensionality)) or interactions and spline terms, as in this example.\n\n## Local Explanations\n\nLocal model explanations provide information about a prediction for a single observation. For example, let's consider an older duplex in the North Ames neighborhood (Section \\@ref(exploring-features-of-homes-in-ames)):\n\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/explain-duplex_03a72cd9b13ea9f1bf171bf9c9febf67'}\n\n```{.r .cell-code}\nduplex <- vip_train[120,]\nduplex\n## # A tibble: 1 Ã— 6\n##   Neighborhood Gr_Liv_Area Year_Built Bldg_Type Latitude Longitude\n##   <fct>              <dbl>      <dbl> <fct>        <dbl>     <dbl>\n## 1 North_Ames          1040       1949 Duplex        42.0     -93.6\n```\n:::\n\n\nThere are multiple possible approaches to understanding why a model predicts a given price for this duplex. One is a break-down explanation, implemented with the <span class=\"pkg\">DALEX</span> function `predict_parts()`; it computes how contributions attributed to individual features change the mean model's prediction for a particular observation, like our duplex. For the linear model, the duplex status (`Bldg_Type = 3`),[^18-explaining-models-and-predictions-1] size, longitude, and age all contribute the most to the price being driven down from the intercept:\n\n[^18-explaining-models-and-predictions-1]: Notice that this package for model explanations focuses on the *level* of categorical predictors in this type of output, like `Bldg_Type = 3` for duplex and `Neighborhood = 1` for North Ames.\n\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/explain-duplex-lm-breakdown_126c32f829fdc71f517b6cf33c31af7e'}\n\n```{.r .cell-code}\nlm_breakdown <- predict_parts(explainer = explainer_lm, new_observation = duplex)\nlm_breakdown\n##                                           contribution\n## lm + interactions: intercept                     5.221\n## lm + interactions: Gr_Liv_Area = 1040           -0.082\n## lm + interactions: Bldg_Type = 3                -0.049\n## lm + interactions: Longitude = -93.608903       -0.043\n## lm + interactions: Year_Built = 1949            -0.039\n## lm + interactions: Latitude = 42.035841         -0.007\n## lm + interactions: Neighborhood = 1              0.001\n## lm + interactions: prediction                    5.002\n```\n:::\n\n\nSince this linear model was trained using spline terms for latitude and longitude, the contribution to price for `Longitude` shown here combines the effects of all of its individual spline terms. The contribution is in terms of the original `Longitude` feature, not the derived spline features.\n\nThe most important features are slightly different for the random forest model, with the size, age, and duplex status being most important:\n\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/explain-duplex-rf-breakdown_66f5da84d716f905e174052ffc8fe915'}\n\n```{.r .cell-code}\nrf_breakdown <- predict_parts(explainer = explainer_rf, new_observation = duplex)\nrf_breakdown\n##                                       contribution\n## random forest: intercept                     5.221\n## random forest: Year_Built = 1949            -0.076\n## random forest: Gr_Liv_Area = 1040           -0.075\n## random forest: Bldg_Type = 3                -0.027\n## random forest: Longitude = -93.608903       -0.043\n## random forest: Latitude = 42.035841         -0.028\n## random forest: Neighborhood = 1             -0.003\n## random forest: prediction                    4.969\n```\n:::\n\n\n::: rmdwarning\nModel break-down explanations like these depend on the *order* of the features.\n:::\n\nIf we choose the `order` for the random forest model explanation to be the same as the default for the linear model (chosen via a heuristic), we can change the relative importance of the features:\n\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/explain-duplex-rf-breakdown-reorder_a9a5cecf8f68ba0080cca590ac32f670'}\n\n```{.r .cell-code}\npredict_parts(\n  explainer = explainer_rf, \n  new_observation = duplex,\n  order = lm_breakdown$variable_name\n)\n##                                       contribution\n## random forest: intercept                     5.221\n## random forest: Gr_Liv_Area = 1040           -0.075\n## random forest: Bldg_Type = 3                -0.019\n## random forest: Longitude = -93.608903       -0.023\n## random forest: Year_Built = 1949            -0.104\n## random forest: Latitude = 42.035841         -0.028\n## random forest: Neighborhood = 1             -0.003\n## random forest: prediction                    4.969\n```\n:::\n\n\nWe can use the fact that these break-down explanations change based on order to compute the most important features over all (or many) possible orderings. This is the idea behind Shapley Additive Explanations [@Lundberg2017], where the average contributions of features are computed under different combinations or \"coalitions\" of feature orderings. Let's compute SHAP attributions for our duplex, using `B = 20` random orderings:\n\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/explain-duplex-rf-shap-calc_6fc6f6e7dab8b484e46af77cb37addd2'}\n\n```{.r .cell-code}\nset.seed(1801)\nshap_duplex <- \n  predict_parts(\n    explainer = explainer_rf, \n    new_observation = duplex, \n    type = \"shap\",\n    B = 20\n  )\n```\n:::\n\n\nWe could use the default plot method from <span class=\"pkg\">DALEX</span> by calling `plot(shap_duplex)`, or we can access the underlying data and create a custom plot. The box plots in Figure \\@ref(fig:duplex-rf-shap) display the distribution of contributions across all the orderings we tried, and the bars display the average attribution for each feature:\n\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/explain-duplex-rf-shap_8c8f7c853b17a18b3ebf882905f999aa'}\n\n```{.r .cell-code}\nlibrary(forcats)\nshap_duplex %>%\n  group_by(variable) %>%\n  mutate(mean_val = mean(contribution)) %>%\n  ungroup() %>%\n  mutate(variable = fct_reorder(variable, abs(mean_val))) %>%\n  ggplot(aes(contribution, variable, fill = mean_val > 0)) +\n  geom_col(data = ~distinct(., variable, mean_val), \n           aes(mean_val, variable), \n           alpha = 0.5) +\n  geom_boxplot(width = 0.5) +\n  theme(legend.position = \"none\") +\n  scale_fill_viridis_d() +\n  labs(y = NULL)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/duplex-rf-shap_db9e2c5dd4d9379f888da6f9a18742a0'}\n::: {.cell-output-display}\n![Shapley additive explanations from the random forest model for a duplex property](figures/duplex-rf-shap-1.png){fig-align='center' fig-alt='Shapley additive explanations from the random forest model for a duplex property. Year built and gross living area have the largest contributions.' width=672}\n:::\n:::\n\n\nWhat about a different observation in our data set? Let's look at a larger, newer one-family home in the Gilbert neighborhood:\n\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/explain-gilbert_736b273872825039d92007d6514adb32'}\n\n```{.r .cell-code}\nbig_house <- vip_train[1269,]\nbig_house\n## # A tibble: 1 Ã— 6\n##   Neighborhood Gr_Liv_Area Year_Built Bldg_Type Latitude Longitude\n##   <fct>              <dbl>      <dbl> <fct>        <dbl>     <dbl>\n## 1 Gilbert             2267       2002 OneFam        42.1     -93.6\n```\n:::\n\n\nWe can compute SHAP average attributions for this house in the same way:\n\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/explain-gilbert-shap-calc_d9d731b591438fafe120320966d4888a'}\n\n```{.r .cell-code}\nset.seed(1802)\nshap_house <- \n  predict_parts(\n    explainer = explainer_rf, \n    new_observation = big_house, \n    type = \"shap\",\n    B = 20\n  )\n```\n:::\n\n\nThe results are shown in Figure \\@ref(fig:gilbert-shap); unlike the duplex, the size and age of this house contribute to its price being higher.\n\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/gilbert-shap_05ae0995c3daa69c8391c25e791a2d50'}\n::: {.cell-output-display}\n![Shapley additive explanations from the random forest model for a one-family home in Gilbert](figures/gilbert-shap-1.png){fig-align='center' fig-alt='Shapley additive explanations from the random forest model for a one-family home in Gilbert. Gross living area and year built have the largest contributions but in the opposite direction as the previous explainer.' width=672}\n:::\n:::\n\n\n## Global Explanations\n\nGlobal model explanations, also called global feature importance or variable importance, help us understand which features are most important in driving the predictions of the linear and random forest models overall, aggregated over the whole training set. While the previous section addressed which variables or features are most important in predicting sale price for an individual home, global feature importance addresses the most important variables for a model in aggregate.\n\n::: rmdnote\nOne way to compute variable importance is to *permute* the features [@breiman2001random]. We can permute or shuffle the values of a feature, predict from the model, and then measure how much worse the model fits the data compared to before shuffling.\n:::\n\nIf shuffling a column causes a large degradation in model performance, it is important; if shuffling a column's values doesn't make much difference to how the model performs, it must not be an important variable. This approach can be applied to any kind of model (it is *model agnostic*), and the results are straightforward to understand.\n\nUsing <span class=\"pkg\">DALEX</span>, we compute this kind of variable importance via the `model_parts()` function.\n\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/explain-global-calcs_6aadeee8a2afa96d0db11835c4948202'}\n\n```{.r .cell-code}\nset.seed(1803)\nvip_lm <- model_parts(explainer_lm, loss_function = loss_root_mean_square)\nset.seed(1804)\nvip_rf <- model_parts(explainer_rf, loss_function = loss_root_mean_square)\n```\n:::\n\n\nAgain, we could use the default plot method from <span class=\"pkg\">DALEX</span> by calling `plot(vip_lm, vip_rf)` but the underlying data is available for exploration, analysis, and plotting. Let's create a function for plotting:\n\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/explain-global-func_fd329f181366032de6d05b94b37b1430'}\n\n```{.r .cell-code}\nggplot_imp <- function(...) {\n  obj <- list(...)\n  metric_name <- attr(obj[[1]], \"loss_name\")\n  metric_lab <- paste(metric_name, \n                      \"after permutations\\n(higher indicates more important)\")\n  \n  full_vip <- bind_rows(obj) %>%\n    filter(variable != \"_baseline_\")\n  \n  perm_vals <- full_vip %>% \n    filter(variable == \"_full_model_\") %>% \n    group_by(label) %>% \n    summarise(dropout_loss = mean(dropout_loss))\n  \n  p <- full_vip %>%\n    filter(variable != \"_full_model_\") %>% \n    mutate(variable = fct_reorder(variable, dropout_loss)) %>%\n    ggplot(aes(dropout_loss, variable)) \n  if(length(obj) > 1) {\n    p <- p + \n      facet_wrap(vars(label)) +\n      geom_vline(data = perm_vals, aes(xintercept = dropout_loss, color = label),\n                 linewidth = 1.4, lty = 2, alpha = 0.7) +\n      geom_boxplot(aes(color = label, fill = label), alpha = 0.2)\n  } else {\n    p <- p + \n      geom_vline(data = perm_vals, aes(xintercept = dropout_loss),\n                 linewidth = 1.4, lty = 2, alpha = 0.7) +\n      geom_boxplot(fill = \"#91CBD765\", alpha = 0.4)\n    \n  }\n  p +\n    theme(legend.position = \"none\") +\n    labs(x = metric_lab, \n         y = NULL,  fill = NULL,  color = NULL)\n}\n```\n:::\n\n\nUsing `ggplot_imp(vip_lm, vip_rf)` produces Figure \\@ref(fig:global-rf).\n\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/global-rf_1455816e2046ab024dbd0c5c8abbe6cb'}\n::: {.cell-output-display}\n![Global explainer for the random forest and linear regression models](figures/global-rf-1.png){fig-align='center' fig-alt='Global explainer for the random forest and linear regression models. For both models, gross living area and year built have the largest contributions, but the linear model uses the neighborhood predictor to a large degree.' width=768}\n:::\n:::\n\n\nThe dashed line in each panel of Figure \\@ref(fig:global-rf) shows the RMSE for the full model, either the linear model or the random forest model. Features farther to the right are more important, because permuting them results in higher RMSE. There is quite a lot of interesting information to learn from this plot; for example, neighborhood is quite important in the linear model with interactions/splines but the second least important feature for the random forest model.\n\n## Building Global Explanations from Local Explanations\n\nSo far in this chapter, we have focused on local model explanations for a single observation (via Shapley additive explanations) and global model explanations for a data set as a whole (via permuting features). It is also possible to build global model explanations by aggregating local model explanations, as with *partial dependence profiles*.\n\n::: rmdnote\nPartial dependence profiles show how the expected value of a model prediction, like the predicted price of a home in Ames, changes as a function of a feature, like the age or gross living area.\n:::\n\nOne way to build such a profile is by aggregating or averaging profiles for individual observations. A profile showing how an individual observation's prediction changes as a function of a given feature is called an ICE (individual conditional expectation) profile or a CP (*ceteris paribus*) profile. We can compute such individual profiles (for 500 of the observations in our training set) and then aggregate them using the <span class=\"pkg\">DALEX</span> function `model_profile()`:\n\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/explain-year-built-pdp-calc_eb9846b366f601c587ad47872d1ba89d'}\n\n```{.r .cell-code}\nset.seed(1805)\npdp_age <- model_profile(explainer_rf, N = 500, variables = \"Year_Built\")\n```\n:::\n\n\nLet's create another function for plotting the underlying data in this object:\n\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/explain-pdp-func_45022b776a5ad98195c227b0f61648a9'}\n\n```{.r .cell-code}\nggplot_pdp <- function(obj, x) {\n  \n  p <- \n    as_tibble(obj$agr_profiles) %>%\n    mutate(`_label_` = stringr::str_remove(`_label_`, \"^[^_]*_\")) %>%\n    ggplot(aes(`_x_`, `_yhat_`)) +\n    geom_line(data = as_tibble(obj$cp_profiles),\n              aes(x = {{ x }}, group = `_ids_`),\n              linewidth = 0.5, alpha = 0.05, color = \"gray50\")\n  \n  num_colors <- n_distinct(obj$agr_profiles$`_label_`)\n  \n  if (num_colors > 1) {\n    p <- p + geom_line(aes(color = `_label_`), linewidth = 1.2, alpha = 0.8)\n  } else {\n    p <- p + geom_line(color = \"midnightblue\", linewidth = 1.2, alpha = 0.8)\n  }\n  \n  p\n}\n```\n:::\n\n\nUsing this function generates Figure \\@ref(fig:year-built), where we can see the nonlinear behavior of the random forest model.\n\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/explain-year-built_a5f1d2edc15ce21a0f280e89589b3b29'}\n\n```{.r .cell-code}\nggplot_pdp(pdp_age, Year_Built)  +\n  labs(x = \"Year built\", \n       y = \"Sale Price (log)\", \n       color = NULL)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/year-built_701318fe5ef6e483eb04fd8f017d8b3a'}\n::: {.cell-output-display}\n![Partial dependence profiles for the random forest model focusing on the year built predictor](figures/year-built-1.png){fig-align='center' fig-alt='Partial dependence profiles for the random forest model focusing on the year built predictor. The profiles are mostly relatively constant but then increase linearly around 1950.' width=672}\n:::\n:::\n\n\nSale price for houses built in different years is mostly flat, with a modest rise after about 1960. Partial dependence profiles can be computed for any other feature in the model, and also for groups in the data, such as `Bldg_Type`. Let's use 1,000 observations for these profiles.\n\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/explain-build-type-pdp_01d2837c7023e79820c55a14960571f5'}\n\n```{.r .cell-code}\nset.seed(1806)\npdp_liv <- model_profile(explainer_rf, N = 1000, \n                         variables = \"Gr_Liv_Area\", \n                         groups = \"Bldg_Type\")\n\nggplot_pdp(pdp_liv, Gr_Liv_Area) +\n  scale_x_log10() +\n  scale_color_brewer(palette = \"Dark2\") +\n  labs(x = \"Gross living area\", \n       y = \"Sale Price (log)\", \n       color = NULL)\n```\n:::\n\n\nThis code produces Figure \\@ref(fig:building-type-profiles), where we see that sale price increases the most between about 1,000 and 3,000 square feet of living area, and that different home types (like single family homes or different types of townhouses) mostly exhibit similar increasing trends in price with more living space.\n\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/building-type-profiles_dc804ea20d480b23bcdbf1aa3fde3294'}\n::: {.cell-output-display}\n![Partial dependence profiles for the random forest model focusing on building types and gross living area](figures/building-type-profiles-1.png){fig-align='center' fig-alt='Partial dependence profiles for the random forest model focusing on building types and gross living area. The building type profiles are, for the most part, parallel over gross living area.' width=672}\n:::\n:::\n\n\nWe have the option of using `plot(pdp_liv)` for default <span class=\"pkg\">DALEX</span> plots, but since we are making plots with the underlying data here, we can even facet by one of the features to visualize if the predictions change differently and highlighting the imbalance in these subgroups (as shown in Figure \\@ref(fig:building-type-facets)).\n\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/explain-build-type-facet_003c156518f18e9e34e00eada9e6eff6'}\n\n```{.r .cell-code}\nas_tibble(pdp_liv$agr_profiles) %>%\n  mutate(Bldg_Type = stringr::str_remove(`_label_`, \"random forest_\")) %>%\n  ggplot(aes(`_x_`, `_yhat_`, color = Bldg_Type)) +\n  geom_line(data = as_tibble(pdp_liv$cp_profiles),\n            aes(x = Gr_Liv_Area, group = `_ids_`),\n            linewidth = 0.5, alpha = 0.1, color = \"gray50\") +\n  geom_line(linewidth = 1.2, alpha = 0.8, show.legend = FALSE) +\n  scale_x_log10() +\n  facet_wrap(~Bldg_Type) +\n  scale_color_brewer(palette = \"Dark2\") +\n  labs(x = \"Gross living area\", \n       y = \"Sale Price (log)\", \n       color = NULL)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/building-type-facets_88184eabf961c72bbbe5f35d6f63f869'}\n::: {.cell-output-display}\n![Partial dependence profiles for the random forest model focusing on building types and gross living area using facets](figures/building-type-facets-1.png){fig-align='center' fig-alt='Partial dependence profiles for the random forest model focusing on building types and gross living area using facets. The building type profiles are, for the most part, parallel over gross living area.' width=672}\n:::\n:::\n\n\nThere is no one correct approach for building model explanations, and the options outlined in this chapter are not exhaustive. We have highlighted good options for explanations at both the individual and global level, as well as how to bridge from one to the other, and we point you to @Biecek2021 and @Molnar2021 for further reading.\n\n## Back to Beans!\n\nIn Chapter \\@ref(dimensionality), we discussed how to use dimensionality reduction as a feature engineering or preprocessing step when modeling high-dimensional data. For our example data set of dry bean morphology measures predicting bean type, we saw great results from partial least squares (PLS) dimensionality reduction combined with a regularized discriminant analysis model. Which of those morphological characteristics were *most* important in the bean type predictions? We can use the same approach outlined throughout this chapter to create a model-agnostic explainer and compute, say, global model explanations via `model_parts()`:\n\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/explain-bean-data_269524f191340f546d6d0a930f5e9a65'}\n\n:::\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/explain-bea-vip_30d67ac96cc2c239fcc1ca5131e87ca2'}\n\n```{.r .cell-code}\nset.seed(1807)\nvip_beans <- \n  explain_tidymodels(\n    rda_wflow_fit, \n    data = bean_train %>% select(-class), \n    y = bean_train$class,\n    label = \"RDA\",\n    verbose = FALSE\n  ) %>% \n  model_parts() \n```\n:::\n\n\nUsing our previously defined importance plotting function, `ggplot_imp(vip_beans)` produces Figure \\@ref(fig:bean-explainer).\n\n\n::: {.cell layout-align=\"center\" hash='18-explaining-models-and-predictions_cache/html/bean-explainer_c4cfafc2fbbe8e5231784b697490a0b6'}\n::: {.cell-output-display}\n![Global explainer for the regularized discriminant analysis model on the beans data](figures/bean-explainer-1.png){fig-align='center' fig-alt='Global explainer for the regularized discriminant analysis model on the beans data. Almost all predictors have a significant contribution with shape factors one and four contributing the most. ' width=768}\n:::\n:::\n\n\n::: rmdwarning\nThe measures of global feature importance that we see in Figure \\@ref(fig:bean-explainer) incorporate the effects of all of the PLS components, but in terms of the original variables.\n:::\n\nFigure \\@ref(fig:bean-explainer) shows us that shape factors are among the most important features for predicting bean type, especially shape factor 4, a measure of solidity that takes into account the area $A$, major axis $L$, and minor axis $l$:\n\n$$\\text{SF4} = \\frac{A}{\\pi(L/2)(l/2)}$$\n\nWe can see from Figure \\@ref(fig:bean-explainer) that shape factor 1 (the ratio of the major axis to the area), the minor axis length, and roundness are the next most important bean characteristics for predicting bean variety.\n\n## Chapter Summary {#sec-explain-summary}\n\nFor some types of models, the answer to why a model made a certain prediction is straightforward, but for other types of models, we must use separate explainer algorithms to understand what features are relatively most important for predictions. You can generate two main kinds of model explanations from a trained model. Global explanations provide information aggregated over an entire data set, while local explanations provide understanding about a model's predictions for a single observation.\n\nPackages such as <span class=\"pkg\">DALEX</span> and its supporting package <span class=\"pkg\">DALEXtra</span>, <span class=\"pkg\">vip</span>, and <span class=\"pkg\">lime</span> can be integrated into a tidymodels analysis to provide these model explainers. Model explanations are just one piece of understanding whether your model is appropriate and effective, along with estimates of model performance; Chapter \\@ref(trust) further explores the quality and trustworthiness of predictions.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}