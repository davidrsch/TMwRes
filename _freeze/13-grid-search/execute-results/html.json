{
  "hash": "c0ebb7deaa6d257e883bbc3111475219",
  "result": {
    "markdown": "\n\n\n# Grid Search {#grid-search}\n\nIn Chapter \\@ref(tuning) we demonstrated how users can mark or tag arguments in preprocessing recipes and/or model specifications for optimization using the `tune()` function. Once we know what to optimize, it's time to address the question of how to optimize the parameters. This chapter describes *grid search* methods that specify the possible values of the parameters *a priori*. (Chapter \\@ref(iterative-search) will continue the discussion by describing iterative search methods.)\n\nLet's start by looking at two main approaches for assembling a grid.\n\n## Regular and Nonregular Grids {#grids}\n\nThere are two main types of grids. A regular grid combines each parameter (with its corresponding set of possible values) factorially, i.e., by using all combinations of the sets. Alternatively, a nonregular grid is one where the parameter combinations are not formed from a small set of points.\n\nBefore we look at each type in more detail, let's consider an example model: the multilayer perceptron model (a.k.a. single layer artificial neural network). The parameters marked for tuning are:\n\n-   the number of hidden units\n\n-   the number of fitting epochs/iterations in model training\n\n-   the amount of weight decay penalization\n\n::: rmdnote\nHistorically, the number of epochs was determined by early stopping; a separate validation set determined the length of training based on the error rate, since re-predicting the training set led to overfitting. In our case, the use of a weight decay penalty should prohibit overfitting, and there is little harm in tuning the penalty and the number of epochs.\n:::\n\nUsing <span class=\"pkg\">parsnip</span>, the specification for a classification model fit using the <span class=\"pkg\">nnet</span> package is:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidymodels)\ntidymodels_prefer()\n\nmlp_spec <- \n  mlp(hidden_units = tune(), penalty = tune(), epochs = tune()) %>% \n  set_engine(\"nnet\", trace = 0) %>% \n  set_mode(\"classification\")\n```\n:::\n\n\nThe argument `trace = 0` prevents extra logging of the training process. As shown in Section \\@ref(tuning-params-tidymodels), the `extract_parameter_set_dials()` function can extract the set of arguments with unknown values and sets their <span class=\"pkg\">dials</span> objects:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmlp_param <- extract_parameter_set_dials(mlp_spec)\nmlp_param %>% extract_parameter_dials(\"hidden_units\")\n## # Hidden Units (quantitative)\n## Range: [1, 10]\nmlp_param %>% extract_parameter_dials(\"penalty\")\n## Amount of Regularization (quantitative)\n## Transformer: log-10 [1e-100, Inf]\n## Range (transformed scale): [-10, 0]\nmlp_param %>% extract_parameter_dials(\"epochs\")\n## # Epochs (quantitative)\n## Range: [10, 1000]\n```\n:::\n\n\nThis output indicates that the parameter objects are complete and prints their default ranges. These values will be used to demonstrate how to create different types of parameter grids.\n\n### Regular grids {.unnumbered}\n\nRegular grids are combinations of separate sets of parameter values. First, the user creates a distinct set of values for each parameter. The number of possible values need not be the same for each parameter. The <span class=\"pkg\">tidyr</span> function `crossing()` is one way to create a regular grid:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncrossing(\n  hidden_units = 1:3,\n  penalty = c(0.0, 0.1),\n  epochs = c(100, 200)\n)\n## # A tibble: 12 × 3\n##   hidden_units penalty epochs\n##          <int>   <dbl>  <dbl>\n## 1            1     0      100\n## 2            1     0      200\n## 3            1     0.1    100\n## 4            1     0.1    200\n## 5            2     0      100\n## 6            2     0      200\n## # ℹ 6 more rows\n```\n:::\n\n\nThe parameter object knows the ranges of the parameters. The <span class=\"pkg\">dials</span> package contains a set of `grid_*()` functions that take the parameter object as input to produce different types of grids. For example:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngrid_regular(mlp_param, levels = 2)\n## # A tibble: 8 × 3\n##   hidden_units      penalty epochs\n##          <int>        <dbl>  <int>\n## 1            1 0.0000000001     10\n## 2           10 0.0000000001     10\n## 3            1 1                10\n## 4           10 1                10\n## 5            1 0.0000000001   1000\n## 6           10 0.0000000001   1000\n## # ℹ 2 more rows\n```\n:::\n\n\nThe `levels` argument is the number of levels per parameter to create. It can also take a named vector of values:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmlp_param %>% \n  grid_regular(levels = c(hidden_units = 3, penalty = 2, epochs = 2))\n## # A tibble: 12 × 3\n##   hidden_units      penalty epochs\n##          <int>        <dbl>  <int>\n## 1            1 0.0000000001     10\n## 2            5 0.0000000001     10\n## 3           10 0.0000000001     10\n## 4            1 1                10\n## 5            5 1                10\n## 6           10 1                10\n## # ℹ 6 more rows\n```\n:::\n\n\nThere are techniques for creating regular grids that do not use all possible values of each parameter set. These *fractional factorial designs* [@BHH] could also be used. To learn more, consult the CRAN Task View for experimental design.[^13-grid-search-1]\n\n[^13-grid-search-1]: <https://CRAN.R-project.org/view=ExperimentalDesign>\n\n::: rmdwarning\nRegular grids can be computationally expensive to use, especially when there are a medium-to-large number of tuning parameters. This is true for many models but not all. As discussed in Section \\@ref(efficient-grids) below, there are many models whose tuning time *decreases* with a regular grid!\n:::\n\nOne advantage to using a regular grid is that the relationships and patterns between the tuning parameters and the model metrics are easily understood. The factorial nature of these designs allows for examination of each parameter separately with little confounding between parameters.\n\n### Irregular grids {.unnumbered}\n\nThere are several options for creating non-regular grids. The first is to use random sampling across the range of parameters. The `grid_random()` function generates independent uniform random numbers across the parameter ranges. If the parameter object has an associated transformation (such as we have for `penalty`), the random numbers are generated on the transformed scale. Let's create a random grid for the parameters from our example neural network:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(1301)\nmlp_param %>% \n  grid_random(size = 1000) %>% # 'size' is the number of combinations\n  summary()\n##   hidden_units      penalty           epochs   \n##  Min.   : 1.00   Min.   :0.0000   Min.   : 10  \n##  1st Qu.: 3.00   1st Qu.:0.0000   1st Qu.:266  \n##  Median : 5.00   Median :0.0000   Median :497  \n##  Mean   : 5.38   Mean   :0.0437   Mean   :510  \n##  3rd Qu.: 8.00   3rd Qu.:0.0027   3rd Qu.:761  \n##  Max.   :10.00   Max.   :0.9814   Max.   :999\n```\n:::\n\n\nFor `penalty`, the random numbers are uniform on the log (base-10) scale but the values in the grid are in the natural units.\n\nThe issue with random grids is that, with small-to-medium grids, random values can result in overlapping parameter combinations. Also, the random grid needs to cover the whole parameter space, but the likelihood of good coverage increases with the number of grid values. Even for a sample of 15 candidate points, Figure \\@ref(fig:random-grid) shows some overlap between points for our example multilayer perceptron.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggforce)\nset.seed(1302)\nmlp_param %>% \n  # The 'original = FALSE' option keeps penalty in log10 units\n  grid_random(size = 20, original = FALSE) %>% \n  ggplot(aes(x = .panel_x, y = .panel_y)) + \n  geom_point() +\n  geom_blank() +\n  facet_matrix(vars(hidden_units, penalty, epochs), layer.diag = 2) + \n  labs(title = \"Random design with 20 candidates\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Three tuning parameters with 15 points generated at random](figures/random-grid-1.png){fig-align='center' fig-alt='A scatter plot matrix for three tuning parameters with 20 points generated at random. There are significant gaps in the parameter space.' width=576}\n:::\n:::\n\n\nA much better approach is to use a set of experimental designs called *space-filling designs*. While different design methods have slightly different goals, they generally find a configuration of points that cover the parameter space with the smallest chance of overlapping or redundant values. Examples of such designs are Latin hypercubes [@lhd], maximum entropy designs [@maxent], maximum projection designs [@maxproj], and others. See @santner2003design for an overview.\n\nThe <span class=\"pkg\">dials</span> package contains functions for Latin hypercube and maximum entropy designs. As with `grid_random()`, the primary inputs are the number of parameter combinations and a parameter object. Let's compare a random design with a Latin hypercube design for 20 candidate parameter values in Figure \\@ref(fig:space-filling-design).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(1303)\nmlp_param %>% \n  grid_latin_hypercube(size = 20, original = FALSE) %>% \n  ggplot(aes(x = .panel_x, y = .panel_y)) + \n  geom_point() +\n  geom_blank() +\n  facet_matrix(vars(hidden_units, penalty, epochs), layer.diag = 2) + \n  labs(title = \"Latin Hypercube design with 20 candidates\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Three tuning parameters with 20 points generated using a space-filling design](figures/space-filling-design-1.png){fig-align='center' fig-alt='A scatter plot matrix for three tuning parameters with 15 points generated using a space-filling design. There are fewer gaps in the parameter space when compared to the random grid.' width=576}\n:::\n:::\n\n\nWhile not perfect, this Latin hypercube design spaces the points farther away from one another and allows a better exploration of the hyperparameter space.\n\nSpace-filling designs can be very effective at representing the parameter space. The default design used by the <span class=\"pkg\">tune</span> package is the maximum entropy design. These tend to produce grids that cover the candidate space well and drastically increase the chances of finding good results.\n\n## Evaluating the Grid {#evaluating-grid}\n\nTo choose the best tuning parameter combination, each candidate set is assessed using data that were not used to train that model. Resampling methods or a single validation set work well for this purpose. The process (and syntax) closely resembles the approach in Section \\@ref(resampling-performance) that used the `fit_resamples()` function from the <span class=\"pkg\">tune</span> package.\n\nAfter resampling, the user selects the most appropriate candidate parameter set. It might make sense to choose the empirically best parameter combination or bias the choice towards other aspects of the model fit, such as simplicity.\n\nWe use a classification data set to demonstrate model tuning in this and the next chapter. The data come from @Hill, who developed an automated microscopy laboratory tool for cancer research. The data consists of 56 imaging measurements on 2019 human breast cancer cells. These predictors represent shape and intensity characteristics of different parts of the cells (e.g., the nucleus, the cell boundary, etc.). There is a high degree of correlation between the predictors. For example, there are several different predictors that measure the size and shape of the nucleus and cell boundary. Also, individually, many predictors have skewed distributions.\n\nEach cell belongs to one of two classes. Since this is part of an automated lab test, the focus was on prediction capability rather than inference.\n\nThe data are included in the <span class=\"pkg\">modeldata</span> package. Let's remove one column not needed for analysis (`case`):\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidymodels)\ndata(cells)\ncells <- cells %>% select(-case)\n```\n:::\n\n\nGiven the dimensions of the data, we can compute performance metrics using 10-fold cross-validation:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(1304)\ncell_folds <- vfold_cv(cells)\n```\n:::\n\n\nBecause of the high degree of correlation between predictors, it makes sense to use PCA feature extraction to decorrelate the predictors. The following recipe contains steps to transform the predictors to increase symmetry, normalize them to be on the same scale, then conduct feature extraction. The number of PCA components to retain is also tuned, along with the model parameters.\n\n::: rmdwarning\nWhile the resulting PCA components are technically on the same scale, the lower-rank components tend to have a wider range than the higher-rank components. For this reason, we normalize again to coerce the predictors to have the same mean and variance.\n:::\n\nMany of the predictors have skewed distributions. Since PCA is variance based, extreme values can have a detrimental effect on these calculations. To counter this, let's add a recipe step estimating a Yeo-Johnson transformation for each predictor [@yeo2000new]. While originally intended as a transformation of the outcome, it can also be used to estimate transformations that encourage more symmetric distributions. This step `step_YeoJohnson()` occurs in the recipe just prior to the initial normalization via `step_normalize()`. Then, let's combine this feature engineering recipe with our neural network model specification `mlp_spec`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmlp_rec <-\n  recipe(class ~ ., data = cells) %>%\n  step_YeoJohnson(all_numeric_predictors()) %>% \n  step_normalize(all_numeric_predictors()) %>% \n  step_pca(all_numeric_predictors(), num_comp = tune()) %>% \n  step_normalize(all_numeric_predictors())\n\nmlp_wflow <- \n  workflow() %>% \n  add_model(mlp_spec) %>% \n  add_recipe(mlp_rec)\n```\n:::\n\n\nLet's create a parameter object `mlp_param` to adjust a few of the default ranges. We can change the number of epochs to have a smaller range (50 to 200 epochs). Also, the default range for `num_comp()` defaults to a very narrow range (one to four components); we can increase the range to 40 components and set the minimum value to zero:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmlp_param <- \n  mlp_wflow %>% \n  extract_parameter_set_dials() %>% \n  Matrix::update(\n    epochs = epochs(c(50, 200)),\n    num_comp = num_comp(c(0, 40))\n  )\n```\n:::\n\n\n::: rmdnote\nIn `step_pca()`, using zero PCA components is a shortcut to skip the feature extraction. In this way, the original predictors can be directly compared to the results that include PCA components.\n:::\n\nThe `tune_grid()` function is the primary function for conducting grid search. Its functionality is very similar to `fit_resamples()` from Section \\@ref(resampling-performance), although it has additional arguments related to the grid:\n\n-   `grid`: An integer or data frame. When an integer is used, the function creates a space-filling design with `grid` number of candidate parameter combinations. If specific parameter combinations exist, the `grid` parameter is used to pass them to the function.\n\n-   `param_info`: An optional argument for defining the parameter ranges. The argument is most useful when `grid` is an integer.\n\nOtherwise, the interface to `tune_grid()` is the same as `fit_resamples()`. The first argument is either a model specification or workflow. When a model is given, the second argument can be either a recipe or formula. The other required argument is an <span class=\"pkg\">rsample</span> resampling object (such as `cell_folds`). The following call also passes a metric set so that the area under the ROC curve is measured during resampling.\n\nTo start, let's evaluate a regular grid with three levels across the resamples:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nroc_res <- metric_set(roc_auc)\nset.seed(1305)\nmlp_reg_tune <-\n  mlp_wflow %>%\n  tune_grid(\n    cell_folds,\n    grid = mlp_param %>% grid_regular(levels = 3),\n    metrics = roc_res\n  )\nmlp_reg_tune\n## # Tuning results\n## # 10-fold cross-validation \n## # A tibble: 10 × 4\n##   splits             id     .metrics          .notes          \n##   <list>             <chr>  <list>            <list>          \n## 1 <split [1817/202]> Fold01 <tibble [81 × 8]> <tibble [0 × 3]>\n## 2 <split [1817/202]> Fold02 <tibble [81 × 8]> <tibble [0 × 3]>\n## 3 <split [1817/202]> Fold03 <tibble [81 × 8]> <tibble [0 × 3]>\n## 4 <split [1817/202]> Fold04 <tibble [81 × 8]> <tibble [0 × 3]>\n## 5 <split [1817/202]> Fold05 <tibble [81 × 8]> <tibble [0 × 3]>\n## 6 <split [1817/202]> Fold06 <tibble [81 × 8]> <tibble [0 × 3]>\n## # ℹ 4 more rows\n```\n:::\n\n\nThere are high-level convenience functions we can use to understand the results. First, the `autoplot()` method for regular grids shows the performance profiles across tuning parameters in Figure \\@ref(fig:regular-grid-plot).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nautoplot(mlp_reg_tune) + \n  scale_color_viridis_d(direction = -1) + \n  theme(legend.position = \"top\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![The regular grid results](figures/regular-grid-plot-1.png){fig-align='center' fig-alt='A line plot of the regular grid results. The x axis shows the number of hidden units and the y axis is the resampled ROC AUC. There are separate lines for the amount of regularization. There are nine panels for three values for the number of PCA components and the number of epochs. On average, the amount of regularization is important where more is better. Also, on average, the increasing the number of hidden units decreases model effectiveness.' width=672}\n:::\n:::\n\n\nFor these data, the amount of penalization has the largest impact on the area under the ROC curve. The number of epochs doesn't appear to have a pronounced effect on performance. The change in the number of hidden units appears to matter most when the amount of regularization is low (and harms performance). There are several parameter configurations that have roughly equivalent performance, as seen using the function `show_best()`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nshow_best(mlp_reg_tune) %>% select(-.estimator)\n## # A tibble: 5 × 9\n##   hidden_units penalty epochs num_comp .metric  mean     n std_err .config          \n##          <int>   <dbl>  <int>    <int> <chr>   <dbl> <int>   <dbl> <chr>            \n## 1            5       1     50        0 roc_auc 0.897    10 0.00857 Preprocessor1_Mo…\n## 2           10       1    125        0 roc_auc 0.895    10 0.00898 Preprocessor1_Mo…\n## 3           10       1     50        0 roc_auc 0.894    10 0.00960 Preprocessor1_Mo…\n## 4            5       1    200        0 roc_auc 0.894    10 0.00784 Preprocessor1_Mo…\n## 5            5       1    125        0 roc_auc 0.892    10 0.00822 Preprocessor1_Mo…\n```\n:::\n\n\nBased on these results, it would make sense to conduct another run of grid search with larger values of the weight decay penalty.\n\nTo use a space-filling design, either the `grid` argument can be given an integer or one of the `grid_*()` functions can produce a data frame. To evaluate the same range using a maximum entropy design with 20 candidate values:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(1306)\nmlp_sfd_tune <-\n  mlp_wflow %>%\n  tune_grid(\n    cell_folds,\n    grid = 20,\n    # Pass in the parameter object to use the appropriate range: \n    param_info = mlp_param,\n    metrics = roc_res\n  )\nmlp_sfd_tune\n## # Tuning results\n## # 10-fold cross-validation \n## # A tibble: 10 × 4\n##   splits             id     .metrics          .notes          \n##   <list>             <chr>  <list>            <list>          \n## 1 <split [1817/202]> Fold01 <tibble [20 × 8]> <tibble [0 × 3]>\n## 2 <split [1817/202]> Fold02 <tibble [20 × 8]> <tibble [0 × 3]>\n## 3 <split [1817/202]> Fold03 <tibble [20 × 8]> <tibble [0 × 3]>\n## 4 <split [1817/202]> Fold04 <tibble [20 × 8]> <tibble [0 × 3]>\n## 5 <split [1817/202]> Fold05 <tibble [20 × 8]> <tibble [0 × 3]>\n## 6 <split [1817/202]> Fold06 <tibble [20 × 8]> <tibble [0 × 3]>\n## # ℹ 4 more rows\n```\n:::\n\n\nThe `autoplot()` method will also work with these designs, although the format of the results will be different. Figure \\@ref(fig:sfd-plot) was produced using `autoplot(mlp_sfd_tune)`.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![The `autoplot()` method results when used with a space-filling design](figures/sfd-plot-1.png){fig-align='center' fig-alt='The `autoplot()` method results when used with a space-filling design. The trends show decreasing performance with the number of PCA components as well as the number of hidden units.' width=672}\n:::\n:::\n\n\nThis marginal effects plot (Figure \\@ref(fig:sfd-plot)) shows the relationship of each parameter with the performance metric.\n\n::: rmdwarning\nTake care when examining this plot; since a regular grid is not used, the values of the other tuning parameters can affect each panel.\n:::\n\nThe penalty parameter appears to result in better performance with smaller amounts of weight decay. This is the opposite of the results from the regular grid. Since each point in each panel is shared with the other three tuning parameters, the trends in one panel can be affected by the others. Using a regular grid, each point in each panel is equally averaged over the other parameters. For this reason, the effect of each parameter is better isolated with regular grids.\n\nAs with the regular grid, `show_best()` can report on the numerically best results:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nshow_best(mlp_sfd_tune) %>% select(-.estimator)\n## # A tibble: 5 × 9\n##   hidden_units       penalty epochs num_comp .metric  mean     n std_err .config    \n##          <int>         <dbl>  <int>    <int> <chr>   <dbl> <int>   <dbl> <chr>      \n## 1            8 0.594             97       22 roc_auc 0.880    10 0.00998 Preprocess…\n## 2            3 0.00000000649    135        8 roc_auc 0.878    10 0.00953 Preprocess…\n## 3            9 0.141            177       11 roc_auc 0.873    10 0.0104  Preprocess…\n## 4            8 0.0000000103      74        9 roc_auc 0.869    10 0.00761 Preprocess…\n## 5            6 0.00581          129       15 roc_auc 0.865    10 0.00658 Preprocess…\n```\n:::\n\n\nGenerally, it is a good idea to evaluate the models over multiple metrics so that different aspects of the model fit are taken into account. Also, it often makes sense to choose a slightly suboptimal parameter combination that is associated with a simpler model. For this model, simplicity corresponds to larger penalty values and/or fewer hidden units.\n\nAs with the results from `fit_resamples()`, there is usually no value in retaining the intermediary model fits across the resamples and tuning parameters. However, as before, the `extract` option to `control_grid()` allows the retention of the fitted models and/or recipes. Also, setting the `save_pred` option to `TRUE` retains the assessment set predictions and these can be accessed using `collect_predictions()`.\n\n## Finalizing the Model\n\nIf one of the sets of possible model parameters found via `show_best()` were an attractive final option for these data, we might wish to evaluate how well it does on the test set. However, the results of `tune_grid()` only provide the substrate to choose appropriate tuning parameters. The function *does not fit* a final model.\n\nTo fit a final model, a final set of parameter values must be determined. There are two methods to do so:\n\n-   manually pick values that appear appropriate or\n-   use a `select_*()` function.\n\nFor example, `select_best()` will choose the parameters with the numerically best results. Let's go back to our regular grid results and see which one is best:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nselect_best(mlp_reg_tune, metric = \"roc_auc\")\n## # A tibble: 1 × 5\n##   hidden_units penalty epochs num_comp .config              \n##          <int>   <dbl>  <int>    <int> <chr>                \n## 1            5       1     50        0 Preprocessor1_Model08\n```\n:::\n\n\nLooking back at Figure \\@ref(fig:regular-grid-plot), we can see that a model with a single hidden unit trained for 125 epochs on the original predictors with a large amount of penalization has performance competitive with this option, and is simpler. This is basically penalized logistic regression! To manually specify these parameters, we can create a tibble with these values and then use a *finalization* function to splice the values back into the workflow:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlogistic_param <- \n  tibble(\n    num_comp = 0,\n    epochs = 125,\n    hidden_units = 1,\n    penalty = 1\n  )\n\nfinal_mlp_wflow <- \n  mlp_wflow %>% \n  finalize_workflow(logistic_param)\nfinal_mlp_wflow\n## ══ Workflow ═════════════════════════════════════════════════════════════════════════\n## Preprocessor: Recipe\n## Model: mlp()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## 4 Recipe Steps\n## \n## • step_YeoJohnson()\n## • step_normalize()\n## • step_pca()\n## • step_normalize()\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## Single Layer Neural Network Model Specification (classification)\n## \n## Main Arguments:\n##   hidden_units = 1\n##   penalty = 1\n##   epochs = 125\n## \n## Engine-Specific Arguments:\n##   trace = 0\n## \n## Computational engine: nnet\n```\n:::\n\n\nNo more values of `tune()` are included in this finalized workflow. Now the model can be fit to the entire training set:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfinal_mlp_fit <- \n  final_mlp_wflow %>% \n  fit(cells)\n```\n:::\n\n\nThis object can now be used to make future predictions on new data.\n\nIf you did not use a workflow, finalization of a model and/or recipe is done using `finalize_model()` and `finalize_recipe()`.\n\n## Tools for Creating Tuning Specifications {#tuning-usemodels}\n\nThe <span class=\"pkg\">usemodels</span> package can take a data frame and model formula, then write out R code for tuning the model. The code also creates an appropriate recipe whose steps depend on the requested model as well as the predictor data.\n\nFor example, for the Ames housing data, `xgboost` modeling code could be created with:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(usemodels)\n\nuse_xgboost(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n              Latitude + Longitude, \n            data = ames_train,\n            # Add comments explaining some of the code:\n            verbose = TRUE)\n```\n:::\n\n\nThe resulting code is as follows:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nxgboost_recipe <- \n  recipe(formula = Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n    Latitude + Longitude, data = ames_train) %>% \n  step_novel(all_nominal_predictors()) %>% \n  ## This model requires the predictors to be numeric. The most common \n  ## method to convert qualitative predictors to numeric is to create \n  ## binary indicator variables (aka dummy variables) from these \n  ## predictors. However, for this model, binary indicator variables can be \n  ## made for each of the levels of the factors (known as 'one-hot \n  ## encoding'). \n  step_dummy(all_nominal_predictors(), one_hot = TRUE) %>% \n  step_zv(all_predictors()) \n\nxgboost_spec <- \n  boost_tree(trees = tune(), min_n = tune(), tree_depth = tune(), learn_rate = tune(), \n    loss_reduction = tune(), sample_size = tune()) %>% \n  set_mode(\"regression\") %>% \n  set_engine(\"xgboost\") \n\nxgboost_workflow <- \n  workflow() %>% \n  add_recipe(xgboost_recipe) %>% \n  add_model(xgboost_spec) \n\nset.seed(69305)\nxgboost_tune <-\n  tune_grid(xgboost_workflow, \n            resamples = stop(\"add your rsample object\"), \n            grid = stop(\"add number of candidate points\"))\n```\n:::\n\n\nBased on what <span class=\"pkg\">usemodels</span> understands about the data, this code is the minimal preprocessing required. For other models, operations like `step_normalize()` are added to fulfill the basic needs of the model. Notice that it is our responsibility, as the modeling practitioner, to choose what `resamples` to use for tuning, as well as what kind of `grid`.\n\n::: rmdnote\nThe <span class=\"pkg\">usemodels</span> package can also be used to create model fitting code with no tuning by setting the argument `tune = FALSE`.\n:::\n\n## Tools for Efficient Grid Search {#efficient-grids}\n\nIt is possible to make grid search more computationally efficient by applying a few different tricks and optimizations. This section describes several techniques.\n\n### Submodel optimization {#submodel-trick}\n\nThere are types of models where, from a single model fit, multiple tuning parameters can be evaluated without refitting.\n\nFor example, partial least squares (PLS) is a supervised version of principal component analysis [@Geladi:1986]. It creates components that maximize the variation in the predictors (like PCA) but simultaneously tries to maximize the correlation between these predictors and the outcome. We'll explore PLS more in Chapter \\@ref(dimensionality). One tuning parameter is the number of PLS components to retain. Suppose that a data set with 100 predictors is fit using PLS. The number of possible components to retain can range from one to fifty. However, in many implementations, a single model fit can compute predicted values across many values of `num_comp`. As a result, a PLS model created with 100 components can also make predictions for any `num_comp <= 100`. This saves time since, instead of creating redundant model fits, a single fit can be used to evaluate many submodels.\n\nWhile not all models can exploit this feature, many broadly used ones do.\n\n-   Boosting models can typically make predictions across multiple values for the number of boosting iterations.\n\n-   Regularization methods, such as the <span class=\"pkg\">glmnet</span> model, can make simultaneous predictions across the amount of regularization used to fit the model.\n\n-   Multivariate adaptive regression splines (MARS) adds a set of nonlinear features to linear regression models [@Friedman:1991p109]. The number of terms to retain is a tuning parameter, and it is computationally fast to make predictions across many values of this parameter from a single model fit.\n\nThe <span class=\"pkg\">tune</span> package automatically applies this type of optimization whenever an applicable model is tuned.\n\nFor example, if a boosted C5.0 classification model [@apm] was fit to the cell data, we can tune the number of boosting iterations (`trees`). With all other parameters set at their default values, we can evaluate iterations from 1 to 100 on the same resamples as used previously:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nc5_spec <- \n  boost_tree(trees = tune()) %>% \n  set_engine(\"C5.0\") %>% \n  set_mode(\"classification\")\n\nset.seed(1307)\nc5_spec %>%\n  tune_grid(\n    class ~ .,\n    resamples = cell_folds,\n    grid = data.frame(trees = 1:100),\n    metrics = roc_res\n  )\n```\n:::\n\n\nWithout the submodel optimization, the call to `tune_grid()` used 62.2 minutes to resample 100 submodels. With the optimization, the same call took 100 *seconds* (a 37-fold speed-up). The reduced time is the difference in `tune_grid()` fitting 1000 models versus 10 models.\n\n::: rmdnote\nEven though we fit the model with and without the submodel prediction trick, this optimization is automatically applied by <span class=\"pkg\">parsnip</span>.\n:::\n\n### Parallel processing\n\nAs previously mentioned in Section \\@ref(parallel), parallel processing is an effective method for decreasing execution time when resampling models. This advantage conveys to model tuning via grid search, although there are additional considerations.\n\nLet's consider two different parallel processing schemes.\n\nWhen tuning models via grid search, there are two distinct loops: one over resamples and another over the unique tuning parameter combinations. In pseudocode, this process would look like:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfor (rs in resamples) {\n  # Create analysis and assessment sets\n  # Preprocess data (e.g. formula or recipe)\n  for (mod in configurations) {\n    # Fit model {mod} to the {rs} analysis set\n    # Predict the {rs} assessment set\n  }\n}\n```\n:::\n\n\nBy default, the <span class=\"pkg\">tune</span> package parallelizes only over resamples (the outer loop), as opposed to both the outer and inner loops.\n\nThis is the optimal scenario when the preprocessing method is expensive. However, there are two potential downsides to this approach:\n\n-   It limits the achievable speed-ups when the preprocessing is not expensive.\n\n-   The number of parallel workers is limited by the number of resamples. For example, with 10-fold cross-validation you can use only 10 parallel workers even when the computer has more than 10 cores.\n\nTo illustrate how the parallel processing works, we'll use a case where there are 7 model tuning parameter values, with 5-fold cross-validation. Figure \\@ref(fig:one-resample-per-worker) shows how the tasks are allocated to the worker processes.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Worker processes when parallel processing matches resamples to a specific worker process](figures/one-resample-per-worker-1.png){fig-align='center' fig-alt='A diagram of the worker processes when parallel processing matches resamples to a specific worker process. After the preprocess operations are finished, each model fit is executed on the same worker process.' width=50%}\n:::\n:::\n\n\nNote that each fold is assigned to its own worker process and, since only model parameters are being tuned, the preprocessing is conducted once per fold/worker. If fewer than five worker processes were used, some workers would receive multiple folds.\n\nIn the control functions for the `tune_*()` functions, the argument `parallel_over` controls how the process is executed. To use the previous parallelization strategy, the argument is `parallel_over = \"resamples\"`.\n\nInstead of parallel processing the resamples, an alternate scheme combines the loops over resamples and models into a single loop. In pseudocode, this process would look like:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nall_tasks <- crossing(resamples, configurations)\n\nfor (iter in all_tasks) {                           \n  # Create analysis and assessment sets for {iter}\n  # Preprocess data (e.g. formula or recipe)\n  # Fit model {iter} to the {iter} analysis set\n  # Predict the {iter} assessment set\n}\n```\n:::\n\n\nIn this case, parallelization now occurs over the single loop. For example, if we use 5-fold cross-validation with $M$ tuning parameter values, the loop is executed over $5\\times M$ iterations. This increases the number of potential workers that can be used. However, the work related to data preprocessing is repeated multiple times. If those steps are expensive, this approach will be inefficient.\n\nIn tidymodels, validation sets are treated as a single resample. In these cases, this parallelization scheme would be best.\n\nFigure \\@ref(fig:distributed-tasks) illustrates the delegation of tasks to the workers in this scheme; the same example is used but with 10 workers.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Worker processes when preprocessing and modeling tasks are distributed to many workers](figures/distributed-tasks-1.png){fig-align='center' fig-alt='A diagram of the worker processes when preprocessing and modeling tasks are distributed to many workers. In this instance, more comprehensive parallelization is used but some preprocessing tasks are repeated across worker processes.' width=70%}\n:::\n:::\n\n\nHere, each worker process handles multiple folds, and the preprocessing is needlessly repeated. For example, for the first fold, the preprocessing was computed seven times instead of once.\n\nFor this scheme, the control function argument is `parallel_over = \"everything\"`.\n\n### Benchmarking boosted trees\n\nTo compare different possible parallelization schemes, we tuned a boosted tree with the <span class=\"pkg\">xgboost</span> engine using a data set of 4,000 samples, with 5-fold cross-validation and 10 candidate models. These data required some baseline preprocessing that did not require any estimation. The preprocessing was handled three different ways:\n\n1.  Preprocess the data prior to modeling using a <span class=\"pkg\">dplyr</span> pipeline (labeled as \"none\" in the later plots).\n2.  Conduct the same preprocessing via a recipe (shown as \"light\" preprocessing).\n3.  With a recipe, add an additional step that has a high computational cost (labeled as \"expensive\").\n\nThe first and second preprocessing options are designed for comparison, to measure the computational cost of the recipe in the second option. The third option measures the cost of performing redundant computations with `parallel_over = \"everything\"`.\n\nWe evaluated this process using variable numbers of worker processes and using the two `parallel_over` options, on a computer with 10 physical cores and 20 virtual cores (via hyper-threading).\n\nFirst, let's consider the raw execution times in Figure \\@ref(fig:parallel-times).\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Execution times for model tuning versus the number of workers using different delegation schemes](figures/parallel-times-1.png){fig-align='center' fig-alt='Execution times for model tuning versus the number of workers using different delegation schemes.' width=70%}\n:::\n:::\n\n\nSince there were only five resamples, the number of cores used when `parallel_over = \"resamples\"` is limited to five.\n\nComparing the curves in the first two panels for \"none\" and \"light\":\n\n-   There is little difference in the execution times between the panels. This indicates, for these data, there is no real computational penalty for doing the preprocessing steps in a recipe.\n\n-   There is some benefit for using `parallel_over = \"everything\"` with many cores. However, as shown in the figure, the majority of the benefit of parallel processing occurs in the first five workers.\n\nWith the expensive preprocessing step, there is a considerable difference in execution times. Using `parallel_over = \"everything\"` is problematic since, even using all cores, it never achieves the execution time that `parallel_over = \"resamples\"` attains with just five cores. This is because the costly preprocessing step is unnecessarily repeated in the computational scheme.\n\nWe can also view these data in terms of speed-ups in Figure \\@ref(fig:parallel-speedups).\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Speed-ups for model tuning versus the number of workers using different delegation schemes. The diagonal black line indicates a linear speedup where the addition of a new worker process has maximal effect.](figures/parallel-speedups-1.png){fig-align='center' fig-alt='Speed-ups for model tuning versus the number of workers using different delegation schemes. The diagonal black line indicates a linear speedup where the addition of a new worker process has maximal effect. The \\'everything\\' scheme shows that the benefits decrease after three or four workers, especially when there is expensive preprocessing. The \\'resamples\\' scheme has almost linear speedups across all tasks.' width=70%}\n:::\n:::\n\n\nThe best speed-ups, for these data, occur when `parallel_over = \"resamples\"` and when the computations are expensive. However, in the latter case, remember that the previous analysis indicates that the overall model fits are slower.\n\nWhat is the benefit of using the submodel optimization method in conjunction with parallel processing? The C5.0 classification model shown in Section \\@ref(submodel-trick) was also run in parallel with ten workers. The parallel computations took 13.3 seconds for a 7.5-fold speed-up (both runs used the submodel optimization trick). Between the submodel optimization trick and parallel processing, there was a total 282-fold speed-up over the most basic grid search code.\n\n::: rmdwarning\nOverall, note that the increased computational savings will vary from model to model and are also affected by the size of the grid, the number of resamples, etc. A very computationally efficient model may not benefit as much from parallel processing.\n:::\n\n### Access to global variables\n\nWhen using tidymodels, it is possible to use values in your local environment (usually the global environment) in model objects.\n\n::: rmdnote\nWhat do we mean by \"environment\" here? Think of an environment in R as a place to store variables that you can work with. See the \"Environments\" chapter of @wickham2019advanced to learn more.\n:::\n\nIf we define a variable to use as a model parameter and then pass it to a function like `linear_reg()`, the variable is typically defined in the global environment.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncoef_penalty <- 0.1\nspec <- linear_reg(penalty = coef_penalty) %>% set_engine(\"glmnet\")\nspec\n## Linear Regression Model Specification (regression)\n## \n## Main Arguments:\n##   penalty = coef_penalty\n## \n## Computational engine: glmnet\n```\n:::\n\n\nModels created with the parsnip package save arguments like these as *quosures*; these are objects that track both the name of the object as well as the environment where it lives:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nspec$args$penalty\n## <quosure>\n## expr: ^coef_penalty\n## env:  global\n```\n:::\n\n\nNotice that we have `env:  global` because this variable was created in the global environment. The model specification defined by `spec` works correctly when run in a user's regular session because that session is also using the global environment; R can easily find the object `coef_penalty`.\n\n::: rmdwarning\nWhen such a model is evaluated with parallel workers, it may fail. Depending on the particular technology that is used for parallel processing, the workers may not have access to the global environment.\n:::\n\nWhen writing code that will be run in parallel, it is a good idea to insert the actual data into the objects rather than the reference to the object. The <span class=\"pkg\">rlang</span> and <span class=\"pkg\">dplyr</span> packages can be very helpful for this. For example, the `!!` operator can splice a single value into an object:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nspec <- linear_reg(penalty = !!coef_penalty) %>% set_engine(\"glmnet\")\nspec$args$penalty\n## <quosure>\n## expr: ^0.1\n## env:  empty\n```\n:::\n\n\nNow the output is `^0.1`, indicating that the value is there instead of the reference to the object. When you have multiple external values to insert into an object, the `!!!` operator can help:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmcmc_args <- list(chains = 3, iter = 1000, cores = 3)\n\nlinear_reg() %>% set_engine(\"stan\", !!!mcmc_args)\n## Linear Regression Model Specification (regression)\n## \n## Engine-Specific Arguments:\n##   chains = 3\n##   iter = 1000\n##   cores = 3\n## \n## Computational engine: stan\n```\n:::\n\n\nRecipe selectors are another place where you might want access to global variables. Suppose you have a recipe step that should use all of the predictors in the cell data that were measured using the second optical channel. We can create a vector of these column names:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(stringr)\nch_2_vars <- str_subset(names(cells), \"ch_2\")\nch_2_vars\n## [1] \"avg_inten_ch_2\"   \"total_inten_ch_2\"\n```\n:::\n\n\nWe could hard-code these into a recipe step but it would be better to reference them programmatically in case the data change. Two ways to do this are:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Still uses a reference to global data (~_~;)\nrecipe(class ~ ., data = cells) %>% \n  step_spatialsign(all_of(ch_2_vars))\n## \n## ── Recipe ───────────────────────────────────────────────────────────────────────────\n## \n## ── Inputs\n## Number of variables by role\n## outcome:    1\n## predictor: 56\n## \n## ── Operations\n## • Spatial sign on: all_of(ch_2_vars)\n\n# Inserts the values into the step ヽ(•‿•)ノ\nrecipe(class ~ ., data = cells) %>% \n  step_spatialsign(!!!ch_2_vars)\n## \n## ── Recipe ───────────────────────────────────────────────────────────────────────────\n## \n## ── Inputs\n## Number of variables by role\n## outcome:    1\n## predictor: 56\n## \n## ── Operations\n## • Spatial sign on: \"avg_inten_ch_2\", \"total_inten_ch_2\"\n```\n:::\n\n\nThe latter is better for parallel processing because all of the needed information is embedded in the recipe object.\n\n### Racing methods {#racing}\n\nOne issue with grid search is that all models need to be fit across all resamples before any tuning parameters can be evaluated. It would be helpful if instead, at some point during tuning, an interim analysis could be conducted to eliminate any truly awful parameter candidates. This would be akin to *futility analysis* in clinical trials. If a new drug is performing excessively poorly (or well), it is potentially unethical to wait until the trial finishes to make a decision.\n\nIn machine learning, the set of techniques called *racing methods* provide a similar function [@maron1994hoeffding]. Here, the tuning process evaluates all models on an initial subset of resamples. Based on their current performance metrics, some parameter sets are not considered in subsequent resamples.\n\n\n\n\n\nAs an example, in the multilayer perceptron tuning process with a regular grid explored in this chapter, what would the results look like after only the first three folds? Using techniques similar to those shown in Chapter \\@ref(compare), we can fit a model where the outcome is the resampled area under the ROC curve and the predictor is an indicator for the parameter combination. The model takes the resample-to-resample effect into account and produces point and interval estimates for each parameter setting. The results of the model are one-sided 95% confidence intervals that measure the loss of the ROC value relative to the currently best performing parameters, as shown in Figure \\@ref(fig:racing-process).\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![The racing process for 20 tuning parameters and 10 resamples](figures/racing-process-1.png){fig-align='center' fig-alt='An illustration of the racing process for 20 tuning parameters and 10 resamples. The analysis is conducted at the first, third, and last resample. As the number of resamples increases, the confidence intervals show some model configurations that do not have confidence intervals that overlap with zero. These are excluded from subsequent resamples.' width=80%}\n:::\n:::\n\n\nAny parameter set whose confidence interval includes zero would lack evidence that its performance is statistically different from the best results. We retain 6 settings; these are resampled more. The remaining 14 submodels are no longer considered.\n\n\n\n\n\n<video width=\"720\" height=\"720\" controls>\n\n<source src=\"race_results.mp4\" type=\"video/mp4\">\n\n</video>\n\nThe process continues for each resample; after the next set of performance metrics, a new model is fit to these statistics, and more submodels are potentially discarded.[^13-grid-search-2]\n\n[^13-grid-search-2]: See @kuhn2014futility for more details on the computational aspects of this approach.\n\n::: rmdwarning\nRacing methods can be more efficient than basic grid search as long as the interim analysis is fast and some parameter settings have poor performance. It also is most helpful when the model does *not* have the ability to exploit submodel predictions.\n:::\n\nThe <span class=\"pkg\">finetune</span> package contains functions for racing. The `tune_race_anova()` function conducts an ANOVA model to test for statistical significance of the different model configurations. The syntax to reproduce the filtering shown previously is:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(finetune)\n\nset.seed(1308)\nmlp_sfd_race <-\n  mlp_wflow %>%\n  tune_race_anova(\n    cell_folds,\n    grid = 20,\n    param_info = mlp_param,\n    metrics = roc_res,\n    control = control_race(verbose_elim = TRUE)\n  )\n```\n:::\n\n\nThe arguments mirror those of `tune_grid()`. The function `control_race()` has options for the elimination procedure.\n\nAs shown in the animation above, there were one tuning parameter combinations under consideration once the full set of resamples were evaluated. `show_best()` returns the best models (ranked by performance) but returns only the configurations that were never eliminated:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nshow_best(mlp_sfd_race, n = 10)\n## # A tibble: 1 × 10\n##   hidden_units penalty epochs num_comp .metric .estimator  mean     n std_err\n##          <int>   <dbl>  <int>    <int> <chr>   <chr>      <dbl> <int>   <dbl>\n## 1            8   0.814    177       15 roc_auc binary     0.890    10 0.00966\n## # ℹ 1 more variable: .config <chr>\n```\n:::\n\n\nThere are other interim analysis techniques for discarding settings. For example, @krueger15a use traditional sequential analysis methods whereas @kuhn2014futility treats the data as a sports competition and uses the Bradley-Terry model [@bradley1952rank] to measure the winning ability of parameter settings.\n\n## Chapter Summary {#grid-summary}\n\nThis chapter discussed the two main classes of grid search (regular and non-regular) that can be used for model tuning and demonstrated how to construct these grids, either manually or using the family of `grid_*()` functions. The `tune_grid()` function can evaluate these candidate sets of model parameters using resampling. The chapter also showed how to finalize a model, recipe, or workflow to update the parameter values for the final fit. Grid search can be computationally expensive, but thoughtful choices in the experimental design of such searches can make them tractable.\n\nThe data analysis code that will be reused in the next chapter is:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n\ndata(cells)\ncells <- cells %>% select(-case)\n\nset.seed(1304)\ncell_folds <- vfold_cv(cells)\n\nroc_res <- metric_set(roc_auc)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}