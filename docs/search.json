[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Modelado Ordenado con R",
    "section": "",
    "text": "Hola Mundo\n¡Bienvenido a Tidy Modeling con R! Este libro es una guía para utilizar una colección de software en el lenguaje de programación R para la construcción de modelos llamada tidymodels y tiene dos objetivos principales:\nEn el Capítulo 1, describimos una taxonomía para modelos y destacamos cómo es un buen software para modelado. Las ideas y la sintaxis del tidyverse, que presentamos (o revisamos) en el Capítulo 2, son la base del enfoque de tidymodels para estos desafíos de metodología y práctica. El Capítulo 3 proporciona un recorrido rápido por las funciones de modelado convencionales de R base y resume las necesidades no satisfechas en esa área.\nDespués de eso, este libro se divide en partes, comenzando con los conceptos básicos del modelado con principios de datos ordenados. Los capítulos 4 a 9 presentan un conjunto de datos de ejemplo sobre los precios de la vivienda y demuestran cómo utilizar los paquetes fundamentales de tidymodels: recipes, parsnip, workflows, yardstick y otros.\nLa siguiente parte del libro avanza con más detalles sobre el proceso de creación de un modelo eficaz. Los capítulos 10 a 15 se centran en crear buenas estimaciones de rendimiento, así como en ajustar los hiperparámetros del modelo.\nFinalmente, la última sección de este libro, Capítulos 16 a 21, cubre otros temas importantes para la construcción de modelos. Analizamos enfoques de ingeniería de características más avanzados, como la reducción de dimensionalidad y la codificación de predictores de alta cardinalidad, así como también cómo responder preguntas sobre por qué un modelo hace ciertas predicciones y cuándo confiar en las predicciones de su modelo.\nNo asumimos que los lectores tengan una amplia experiencia en la construcción de modelos y estadísticas. Se requieren algunos conocimientos estadísticos, como muestreo aleatorio, varianza, correlación, regresión lineal básica y otros temas que generalmente se encuentran en un curso básico de estadística o análisis de datos de pregrado. Suponemos que el lector está al menos ligeramente familiarizado con dplyr, ggplot2 y el operador “pipe” %&gt;% en R, y que está interesado en aplicar estas herramientas al modelado. Para los usuarios que aún no tienen estos conocimientos básicos de R, recomendamos libros como R for Data Science de Wickham y Grolemund (2016). La investigación y el análisis de datos son una parte importante de cualquier proceso de modelo.\nEste libro no pretende ser una referencia exhaustiva sobre técnicas de modelado; sugerimos otros recursos para aprender más sobre los propios métodos estadísticos. Para obtener información general sobre el tipo de modelo más común, el modelo lineal, sugerimos Fox (2008). Para modelos predictivos, Kuhn y Johnson (2013) y Kuhn y Johnson (2020) son buenos recursos. Para los métodos de aprendizaje automático, Goodfellow, Bengio, y Courville (2016) es una fuente de información excelente (pero formal). En algunos casos, describimos los modelos que utilizamos con cierto detalle, pero de una manera menos matemática y, con suerte, más intuitiva."
  },
  {
    "objectID": "index.html#acknowledgments",
    "href": "index.html#acknowledgments",
    "title": "Modelado Ordenado con R",
    "section": "Acknowledgments",
    "text": "Acknowledgments\nWe are so thankful for the contributions, help, and perspectives of people who have supported us in this project. There are several we would like to thank in particular.\nWe would like to thank our RStudio colleagues on the tidymodels team (Davis Vaughan, Hannah Frick, Emil Hvitfeldt, and Simon Couch) as well as the rest of our coworkers on the RStudio open source team. Thank you to Desirée De Leon for the site design of the online work. We would also like to thank our technical reviewers, Chelsea Parlett-Pelleriti and Dan Simpson, for their detailed, insightful feedback that substantively improved this book, as well as our editors, Nicole Tache and Rita Fernando, for their perspective and guidance during the process of writing and publishing.\n\nThis book was written in the open, and multiple people contributed via pull requests or issues. Special thanks goes to the thirty-eight people who contributed via GitHub pull requests (in alphabetical order by username): @arisp99, Brad Hill (@bradisbrad), Bryce Roney (@bryceroney), Cedric Batailler (@cedricbatailler), Ildikó Czeller (@czeildi), David Kane (@davidkane9), @DavZim, @DCharIAA, Emil Hvitfeldt (@EmilHvitfeldt), Emilio (@emilopezcano), Fgazzelloni (@Fgazzelloni), Hannah Frick (@hfrick), Hlynur (@hlynurhallgrims), Howard Baek (@howardbaek), Jae Yeon Kim (@jaeyk), Jonathan D. Trattner (@jdtrat), Jeffrey Girard (@jmgirard), John W Pickering (@JohnPickering), Jon Harmon (@jonthegeek), Joseph B. Rickert (@joseph-rickert), Maximilian Rohde (@maxdrohde), Michael Grund (@michaelgrund), @MikeJohnPage, Mine Cetinkaya-Rundel (@mine-cetinkaya-rundel), Mohammed Hamdy (@mmhamdy), @nattalides, Y. Yu (@PursuitOfDataScience), Riaz Hedayati (@riazhedayati), Rob Wiederstein (@RobWiederstein), Scott (@scottyd22), Simon Schölzel (@simonschoe), Simon Sayz (@tagasimon), @thrkng, Tanner Stauss (@tmstauss), Tony ElHabr (@tonyelhabr), Dmitry Zotikov (@x1o), Xiaochi (@xiaochi-liu), Zach Bogart (@zachbogart)."
  },
  {
    "objectID": "index.html#using-code-examples",
    "href": "index.html#using-code-examples",
    "title": "Modelado Ordenado con R",
    "section": "Using Code Examples",
    "text": "Using Code Examples\nThis book was written with RStudio using bookdown. The website is hosted via Netlify, and automatically built after every push by GitHub Actions. The complete source is available on GitHub. We generated all plots in this book using ggplot2 and its black and white theme (theme_bw()).\nThis version of the book was built with R version 4.3.1 (2023-06-16 ucrt), pandoc version 3.1.1, and the following packages: applicable (0.1.0, CRAN), av (0.8.5, CRAN), baguette (1.0.1, CRAN), beans (0.1.0, CRAN), bestNormalize (1.9.1, CRAN), bookdown (0.35, CRAN), broom (1.0.5, CRAN), censored (0.2.0, CRAN), corrplot (0.92, CRAN), corrr (0.4.4, CRAN), Cubist (0.4.2.1, CRAN), DALEXtra (2.3.0, CRAN), dials (1.2.0, CRAN), dimRed (0.2.6, CRAN), discrim (1.0.1, CRAN), doMC (1.3.5, R-Forge), dplyr (1.1.3, CRAN), earth (5.3.2, CRAN), embed (1.1.2, CRAN), fastICA (1.2-3, CRAN), finetune (1.1.0, CRAN), forcats (1.0.0, CRAN), ggforce (0.4.1, CRAN), ggplot2 (3.4.3, CRAN), glmnet (4.1-8, CRAN), gridExtra (2.3, CRAN), infer (1.0.5, CRAN), kableExtra (1.3.4, CRAN), kernlab (0.9-32, CRAN), kknn (1.3.1, CRAN), klaR (1.7-2, CRAN), knitr (1.44, CRAN), learntidymodels (0.0.0.9001, Github), lime (0.5.3, CRAN), lme4 (1.1-34, CRAN), lubridate (1.9.3, CRAN), mda (0.5-4, CRAN), mixOmics (6.24.0, Bioconductor), modeldata (1.2.0, CRAN), multilevelmod (1.0.0, CRAN), nlme (3.1-162, CRAN), nnet (7.3-19, CRAN), parsnip (1.1.1, CRAN), patchwork (1.1.3, CRAN), pillar (1.9.0, CRAN), poissonreg (1.0.1, CRAN), prettyunits (1.2.0, CRAN), probably (1.0.2, CRAN), pscl (1.5.5.1, CRAN), purrr (1.0.2, CRAN), ranger (0.15.1, CRAN), recipes (1.0.8, CRAN), rlang (1.1.1, CRAN), rmarkdown (2.25, CRAN), rpart (4.1.19, CRAN), rsample (1.2.0, CRAN), rstanarm (2.26.1, CRAN), rules (1.0.2, CRAN), sessioninfo (1.2.2, CRAN), stacks (1.0.2, CRAN), stringr (1.5.0, CRAN), svglite (2.1.1, CRAN), text2vec (0.6.3, CRAN), textrecipes (1.0.4, CRAN), themis (1.0.2, CRAN), tibble (3.2.1, CRAN), tidymodels (1.1.1, CRAN), tidyposterior (1.0.0, CRAN), tidyverse (2.0.0, CRAN), tune (1.1.2, CRAN), uwot (0.1.16, CRAN), workflows (1.1.3, CRAN), workflowsets (1.0.1, CRAN), xgboost (1.7.5.1, CRAN), and yardstick (1.2.0, CRAN).\n\n\n\n\nFox, J. 2008. Applied Regression Analysis and Generalized Linear Models. Second. Thousand Oaks, CA: Sage.\n\n\nGoodfellow, I, Y Bengio, and A Courville. 2016. Deep Learning. MIT Press.\n\n\nKuhn, M, and K Johnson. 2013. Applied Predictive Modeling. Springer.\n\n\n———. 2020. Feature Engineering and Selection: A Practical Approach for Predictive Models. CRC Press."
  },
  {
    "objectID": "14-iterative-search.html#svm",
    "href": "14-iterative-search.html#svm",
    "title": "14  Iterative Search",
    "section": "\n14.1 A Support Vector Machine Model",
    "text": "14.1 A Support Vector Machine Model\nWe once again use the cell segmentation data, described in Section @ref(evaluating-grid), for modeling, with a support vector machine (SVM) model to demonstrate sequential tuning methods. See Kuhn and Johnson (2013) for more information on this model. The two tuning parameters to optimize are the SVM cost value and the radial basis function kernel parameter \\(\\sigma\\). Both parameters can have a profound effect on the model complexity and performance.\nThe SVM model uses a dot product and, for this reason, it is necessary to center and scale the predictors. Like the multilayer perceptron model, this model would benefit from the use of PCA feature extraction. However, we will not use this third tuning parameter in this chapter so that we can visualize the search process in two dimensions.\nAlong with the previously used objects (shown in Section @ref(grid-summary)), the tidymodels objects svm_rec, svm_spec, and svm_wflow define the model process:\n\nlibrary(tidymodels)\ntidymodels_prefer()\n\nsvm_rec &lt;- \n  recipe(class ~ ., data = cells) %&gt;%\n  step_YeoJohnson(all_numeric_predictors()) %&gt;%\n  step_normalize(all_numeric_predictors())\n\nsvm_spec &lt;- \n  svm_rbf(cost = tune(), rbf_sigma = tune()) %&gt;% \n  set_engine(\"kernlab\") %&gt;% \n  set_mode(\"classification\")\n\nsvm_wflow &lt;- \n  workflow() %&gt;% \n  add_model(svm_spec) %&gt;% \n  add_recipe(svm_rec)\n\nThe default parameter ranges for the two tuning parameters cost and rbf_sigma are:\n\ncost()\n## Cost (quantitative)\n## Transformer: log-2 [1e-100, Inf]\n## Range (transformed scale): [-10, 5]\nrbf_sigma()\n## Radial Basis Function sigma (quantitative)\n## Transformer: log-10 [1e-100, Inf]\n## Range (transformed scale): [-10, 0]\n\nFor illustration, let’s slightly change the kernel parameter range, to improve the visualizations of the search:\n\nsvm_param &lt;- \n  svm_wflow %&gt;% \n  extract_parameter_set_dials() %&gt;% \n  Matrix::update(rbf_sigma = rbf_sigma(c(-7, -1)))\n\nBefore discussing specific details about iterative search and how it works, let’s explore the relationship between the two SVM tuning parameters and the area under the ROC curve for this specific data set. We constructed a very large regular grid, composed of 2,500 candidate values, and evaluated the grid using resampling. This is obviously impractical in regular data analysis and tremendously inefficient. However, it elucidates the path that the search process should take and where the numerically optimal value(s) occur.\nFigure @ref(fig:roc-surface) shows the results of evaluating this grid, with lighter color corresponding to higher (better) model performance. There is a large swath in the lower diagonal of the parameter space that is relatively flat with poor performance. A ridge of best performance occurs in the upper-right portion of the space. The black dot indicates the best settings. The transition from the plateau of poor results to the ridge of best performance is very sharp. There is also a sharp drop in the area under the ROC curve just to the right of the ridge.\n\n\n\n\nHeatmap of the mean area under the ROC curve for a high density grid of tuning parameter values. The best point is a solid dot in the upper-right corner.\n\n\n\nThe following search procedures require at least some resampled performance statistics before proceeding. For this purpose, the following code creates a small regular grid that resides in the flat portion of the parameter space. The tune_grid() function resamples this grid:\n\nset.seed(1401)\nstart_grid &lt;- \n  svm_param %&gt;% \n  Matrix::update(\n    cost = cost(c(-6, 1)),\n    rbf_sigma = rbf_sigma(c(-6, -4))\n  ) %&gt;% \n  grid_regular(levels = 2)\n\nset.seed(1402)\nsvm_initial &lt;- \n  svm_wflow %&gt;% \n  tune_grid(resamples = cell_folds, grid = start_grid, metrics = roc_res)\n\ncollect_metrics(svm_initial)\n## # A tibble: 4 × 8\n##     cost rbf_sigma .metric .estimator  mean     n std_err .config             \n##    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n## 1 0.0156  0.000001 roc_auc binary     0.864    10 0.00864 Preprocessor1_Model1\n## 2 2       0.000001 roc_auc binary     0.863    10 0.00867 Preprocessor1_Model2\n## 3 0.0156  0.0001   roc_auc binary     0.863    10 0.00862 Preprocessor1_Model3\n## 4 2       0.0001   roc_auc binary     0.866    10 0.00855 Preprocessor1_Model4\n\nThis initial grid shows fairly equivalent results, with no individual point much better than any of the others. These results can be ingested by the iterative tuning functions discussed in the following sections to be used as initial values."
  },
  {
    "objectID": "14-iterative-search.html#bayesian-optimization",
    "href": "14-iterative-search.html#bayesian-optimization",
    "title": "14  Iterative Search",
    "section": "\n14.2 Bayesian Optimization",
    "text": "14.2 Bayesian Optimization\nBayesian optimization techniques analyze the current resampling results and create a predictive model to suggest tuning parameter values that have yet to be evaluated. The suggested parameter combination is then resampled. These results are then used in another predictive model that recommends more candidate values for testing, and so on. The process proceeds for a set number of iterations or until no further improvements occur. Shahriari et al. (2016) and Frazier (2018) are good introductions to Bayesian optimization.\nWhen using Bayesian optimization, the primary concerns are how to create the model and how to select parameters recommended by that model. First, let’s consider the technique most commonly used for Bayesian optimization, the Gaussian process model.\n\n14.2.1 A Gaussian process model\nGaussian process (GP) (Schulz, Speekenbrink, and Krause 2018) models are well-known statistical techniques that have a history in spatial statistics (under the name of kriging methods). They can be derived in multiple ways, including as a Bayesian model; see Rasmussen and Williams (2006) for an excellent reference.\nMathematically, a GP is a collection of random variables whose joint probability distribution is multivariate Gaussian. In the context of our application, this is the collection of performance metrics for the tuning parameter candidate values. For the previous initial grid of four samples, the realization of these four random variables were 0.8639, 0.8625, 0.8627, and 0.8659. These are assumed to be distributed as multivariate Gaussian. The inputs that define the independent variables/predictors for the GP model are the corresponding tuning parameter values (shown in Table 14.1).\n\n\n\n\nTable 14.1: Resampling statistics used as the initial substrate to the Gaussian process model.\n\n\n\n\n\n\n\n\noutcome\n\n\npredictors\n\n\n\nROC\ncost\nrbf_sigma\n\n\n\n\n0.8639\n0.01562\n0.000001\n\n\n0.8625\n2.00000\n0.000001\n\n\n0.8627\n0.01562\n0.000100\n\n\n0.8659\n2.00000\n0.000100\n\n\n\n\n\n\n\n\nGaussian process models are specified by their mean and covariance functions, although the latter has the most effect on the nature of the GP model. The covariance function is often parameterized in terms of the input values (denoted as \\(x\\)). As an example, a commonly used covariance function is the squared exponential1 function:\n\\[\\operatorname{cov}(\\boldsymbol{x}_i, \\boldsymbol{x}_j) = \\exp\\left(-\\frac{1}{2}|\\boldsymbol{x}_i - \\boldsymbol{x}_j|^2\\right) + \\sigma^2_{ij}\\] where \\(\\sigma^2_{ij}\\) is a constant error variance term that is zero when \\(i=j\\). This equation translates to:\n\nAs the distance between two tuning parameter combinations increases, the covariance between the performance metrics increase exponentially.\n\nThe nature of the equation also implies that the variation of the outcome metric is minimized at the points that have already been observed (i.e., when \\(|\\boldsymbol{x}_i - \\boldsymbol{x}_j|^2\\) is zero).\nThe nature of this covariance function allows the Gaussian process to represent highly nonlinear relationships between model performance and the tuning parameters even when only a small amount of data exists.\n\nHowever, fitting these models can be difficult in some cases, and the model becomes more computationally expensive as the number of tuning parameter combinations increases.\n\nAn important virtue of this model is that, since a full probability model is specified, the predictions for new inputs can reflect the entire distribution of the outcome. In other words, new performance statistics can be predicted in terms of both mean and variance.\nSuppose that two new tuning parameters were under consideration. In Table 14.2, candidate A has a slightly better mean ROC value than candidate B (the current best is 0.8659). However, its variance is four-fold larger than B. Is this good or bad? Choosing option A is riskier but has potentially higher return. The increase in variance also reflects that this new value is farther from the existing data than B. The next section considers these aspects of GP predictions for Bayesian optimization in more detail.\n\n\n\n\nTable 14.2: Two example tuning parameters considered for further sampling.\n\n\n\n\n\n\n\n\n\nGP Prediction of ROC AUC\n\n\n\ncandidate\nmean\nvariance\n\n\n\n\nA\n0.90\n0.000400\n\n\nB\n0.89\n0.000025\n\n\n\n\n\n\n\n\n\nBayesian optimization is an iterative process.\n\nBased on the initial grid of four results, the GP model is fit, candidates are predicted, and a fifth tuning parameter combination is selected. We compute performance estimates for the new configuration, the GP is refit with the five existing results (and so on).\n\n14.2.2 Acquisition functions\nOnce the Gaussian process is fit to the current data, how is it used? Our goal is to choose the next tuning parameter combination that is most likely to have “better results” than the current best. One approach to do this is to create a large candidate set (perhaps using a space-filling design) and then make mean and variance predictions on each. Using this information, we choose the most advantageous tuning parameter value.\nA class of objective functions, called acquisition functions, facilitate the trade-off between mean and variance. Recall that the predicted variance of the GP models are mostly driven by how far away they are from the existing data. The trade-off between the predicted mean and variance for new candidates is frequently viewed through the lens of exploration and exploitation:\n\nExploration biases the selection towards regions where there are fewer (if any) observed candidate models. This tends to give more weight to candidates with higher variance and focuses on finding new results.\nExploitation principally relies on the mean prediction to find the best (mean) value. It focuses on existing results.\n\nTo demonstrate, let’s look at a toy example with a single parameter that has values between [0, 1] and the performance metric is \\(R^2\\). The true function is shown in Figure 14.2, along with five candidate values that have existing results as points.\n\n\n\n\nFigure 14.2: Hypothetical true performance profile over an arbitrary tuning parameter, with five estimated points\n\n\n\nFor these data, the GP model fit is shown in Figure 14.3. The shaded region indicates the mean \\(\\pm\\) 1 standard error. The two vertical lines indicate two candidate points that are examined in more detail later.\nThe shaded confidence region demonstrates the squared exponential variance function; it becomes very large between points and converges to zero at the existing data points.\n\n\n\n\nFigure 14.3: Estimated performance profile generated by the Gaussian process model. The shaded region shows one-standard-error bounds.\n\n\n\nThis nonlinear trend passes through each observed point, but the model is not perfect. There are no observed points near the true optimum setting and, in this region, the fit could be much better. Despite this, the GP model can effectively point us in the right direction.\nFrom a pure exploitation standpoint, the best choice would select the parameter value that has the best mean prediction. Here, this would be a value of 0.106, just to the right of the existing best observed point at 0.09.\nAs a way to encourage exploration, a simple (but not often used) approach is to find the tuning parameter associated with the largest confidence interval. For example, by using a single standard deviation for the \\(R^2\\) confidence bound, the next point to sample would be 0.236. This is slightly more into the region with no observed results. Increasing the number of standard deviations used in the upper bound would push the selection farther into empty regions.\nOne of the most commonly used acquisition functions is expected improvement. The notion of improvement requires a value for the current best results (unlike the confidence bound approach). Since the GP can describe a new candidate point using a distribution, we can weight the parts of the distribution that show improvement using the probability of the improvement occurring.\nFor example, consider two candidate parameter values of 0.10 and 0.25 (indicated by the vertical lines in Figure 14.3). Using the fitted GP model, their predicted \\(R^2\\) distributions are shown in Figure 14.4 along with a reference line for the current best results.\n\n\n\n\nFigure 14.4: Predicted performance distributions for two sampled tuning parameter values\n\n\n\nWhen only considering the mean \\(R^2\\) prediction, a parameter value of 0.10 is the better choice (see Table 14.3). The tuning parameter recommendation for 0.25 is, on average, predicted to be worse than the current best. However, since it has higher variance, it has more overall probability area above the current best. As a result, it has a larger expected improvement:\n\n\n\n\nTable 14.3: Expected improvement for the two candidate tuning parameters.\n\n\n\n\n\n\n\n\n\n\nPredictions\n\n\n\nParameter Value\nMean\nStd Dev\nExpected Improvment\n\n\n\n\n0.10\n0.8679\n0.0004317\n0.000190\n\n\n0.25\n0.8671\n0.0039301\n0.001216\n\n\n\n\n\n\n\n\nWhen expected improvement is computed across the range of the tuning parameter, the recommended point to sample is much closer to 0.25 than 0.10, as shown in Figure 14.5.\n\n\n\n\nFigure 14.5: The estimated performance profile generated by the Gaussian process model (top panel) and the expected improvement (bottom panel). The vertical line indicates the point of maximum improvement.\n\n\n\nNumerous acquisition functions have been proposed and discussed; in tidymodels, expected improvement is the default.\n\n14.2.3 The tune_bayes() function\nTo implement iterative search via Bayesian optimization, use the tune_bayes() function. Its syntax is very similar to tune_grid() but with several additional arguments:\n\niter is the maximum number of search iterations.\ninitial can be either an integer, an object produced using tune_grid(), or one of the racing functions. Using an integer specifies the size of a space-filling design that is sampled prior to the first GP model.\nobjective is an argument for which acquisition function should be used. The tune package contains functions to pass here, such as exp_improve() or conf_bound().\nThe param_info argument, in this case, specifies the range of the parameters as well as any transformations that are used. These are used to define the search space. In situations where the default parameter objects are insufficient, param_info is used to override the defaults.\n\nThe control argument now uses the results of control_bayes(). Some helpful arguments there are:\n\nno_improve is an integer that will stop the search if improved parameters are not discovered within no_improve iterations.\nuncertain is also an integer (or Inf) that will take an uncertainty sample if there is no improvement within uncertain iterations. This will select the next candidate that has large variation. It has the effect of pure exploration since it does not consider the mean prediction.\nverbose is a logical that will print logging information as the search proceeds.\n\nLet’s use the first SVM results from Section 14.1 as the initial substrate for the Gaussian process model. Recall that, for this application, we want to maximize the area under the ROC curve. Our code is:\n\nctrl &lt;- control_bayes(verbose = TRUE)\n\nset.seed(1403)\nsvm_bo &lt;-\n  svm_wflow %&gt;%\n  tune_bayes(\n    resamples = cell_folds,\n    metrics = roc_res,\n    initial = svm_initial,\n    param_info = svm_param,\n    iter = 25,\n    control = ctrl\n  )\n\nThe search process starts with an initial best value of 0.8659 for the area under the ROC curve. A Gaussian process model uses these four statistics to create a model. The large candidate set is automatically generated and scored using the expected improvement acquisition function. The first iteration failed to improve the outcome with an ROC value of 0.86315. After fitting another Gaussian process model with the new outcome value, the second iteration also failed to yield an improvement.\nThe log of the first two iterations, produced by the verbose option, was:\nThe search continues. There were a total of 9 improvements in the outcome along the way at iterations 3, 4, 5, 6, 8, 13, 22, 23, and 24. The best result occurred at iteration 24 with an area under the ROC curve of 0.8986.\nThe last step was:\nThe functions that are used to interrogate the results are the same as those used for grid search (e.g., collect_metrics(), etc.). For example:\n\nshow_best(svm_bo)\n## # A tibble: 5 × 9\n##    cost rbf_sigma .metric .estimator  mean     n std_err .config .iter\n##   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;int&gt;\n## 1  31.8   0.00160 roc_auc binary     0.899    10 0.00785 Iter24     24\n## 2  30.8   0.00191 roc_auc binary     0.899    10 0.00791 Iter23     23\n## 3  31.4   0.00166 roc_auc binary     0.899    10 0.00784 Iter22     22\n## 4  31.8   0.00153 roc_auc binary     0.899    10 0.00783 Iter13     13\n## 5  30.8   0.00163 roc_auc binary     0.899    10 0.00782 Iter15     15\n\nThe autoplot() function has several options for iterative search methods. Figure 14.6 shows how the outcome changed over the search by using autoplot(svm_bo, type = \"performance\").\n\n\n\n\nFigure 14.6: The progress of the Bayesian optimization produced when the autoplot() method is used with type = \"performance\"\n\n\n\nAn additional type of plot uses type = \"parameters\" that shows the parameter values over iterations.\nThe animation below visualizes the results of the search. The black \\(\\times\\) values show the starting values contained in svm_initial. The top-left blue panel shows the predicted mean value of the area under the ROC curve. The red panel on the top-right displays the predicted variation in the ROC values while the bottom plot visualizes the expected improvement. In each panel, darker colors indicate less attractive values (e.g., small mean values, large variation, and small improvements).\nThe surface of the predicted mean surface is very inaccurate in the first few iterations of the search. Despite this, it does help guide the process to the region of good performance. In other words, the Gaussian process model is wrong but shows itself to be very useful. Within the first ten iterations, the search is sampling near the optimum location.\nWhile the best tuning parameter combination is on the boundary of the parameter space, Bayesian optimization will often choose new points on other sides of the boundary. While we can adjust the ratio of exploration and exploitation, the search tends to sample boundary points early on.\n\nIf the search is seeded with an initial grid, a space-filling design would probably be a better choice than a regular design. It samples more unique values of the parameter space and would improve the predictions of the standard deviation in the early iterations.\n\nFinally, if the user interrupts the tune_bayes() computations, the function returns the current results (instead of resulting in an error)."
  },
  {
    "objectID": "14-iterative-search.html#simulated-annealing",
    "href": "14-iterative-search.html#simulated-annealing",
    "title": "14  Iterative Search",
    "section": "\n14.3 Simulated Annealing",
    "text": "14.3 Simulated Annealing\nSimulated annealing (SA) (Kirkpatrick, Gelatt, and Vecchi 1983; Van Laarhoven and Aarts 1987) is a general nonlinear search routine inspired by the process in which metal cools. It is a global search method that can effectively navigate many different types of search landscapes, including discontinuous functions. Unlike most gradient-based optimization routines, simulated annealing can reassess previous solutions.\n\n14.3.1 Simulated annealing search process\nThe process of using simulated annealing starts with an initial value and embarks on a controlled random walk through the parameter space. Each new candidate parameter value is a small perturbation of the previous value that keeps the new point within a local neighborhood.\nThe candidate point is resampled to obtain its corresponding performance value. If this achieves better results than the previous parameters, it is accepted as the new best and the process continues. If the results are worse than the previous value the search procedure may still use this parameter to define further steps. This depends on two factors. First, the likelihood of accepting a bad result decreases as performance becomes worse. In other words, a slightly worse result has a better chance of acceptance than one with a large drop in performance. The other factor is the number of search iterations. Simulated annealing wants to accept fewer suboptimal values as the search proceeds. From these two factors, the acceptance probability for a bad result can be formalized as:\n\\[\\operatorname{Pr}[\\text{accept suboptimal parameters at iteration } i] = \\exp(c\\times D_i \\times i)\\]\nwhere \\(i\\) is the iteration number, \\(c\\) is a user-specified constant, and \\(D_i\\) is the percent difference between the old and new values (where negative values imply worse results). For a bad result, we determine the acceptance probability and compare it to a random uniform number. If the random number is greater than the probability value, the search discards the current parameters and the next iteration creates its candidate value in the neighborhood of the previous value. Otherwise, the next iteration forms the next set of parameters based on the current (suboptimal) values.\n\nThe acceptance probabilities of simulated annealing allow the search to proceed in the wrong direction, at least for the short term, with the potential to find a much better region of the parameter space in the long run.\n\nHow are the acceptance probabilities influenced? The heatmap in Figure 14.7 shows how the acceptance probability can change over iterations, performance, and the user-specified coefficient.\n\n\n\n\nFigure 14.7: Heatmap of the simulated annealing acceptance probabilities for different coefficient values\n\n\n\nThe user can adjust the coefficients to find a probability profile that suits their needs. In finetune::control_sim_anneal(), the default for this cooling_coef argument is 0.02. Decreasing this coefficient will encourage the search to be more forgiving of poor results.\nThis process continues for a set amount of iterations but can halt if no globally best results occur within a pre-determined number of iterations. However, it can be very helpful to set a restart threshold. If there are a string of failures, this feature revisits the last globally best parameter settings and starts anew.\nThe main important detail is to define how to perturb the tuning parameters from iteration to iteration. There are a variety of methods in the literature for this. We follow the method given in Bohachevsky, Johnson, and Stein (1986) called generalized simulated annealing. For continuous tuning parameters, we define a small radius to specify the local “neighborhood.” For example, suppose there are two tuning parameters and each is bounded by zero and one. The simulated annealing process generates random values on the surrounding radius and randomly chooses one to be the current candidate value.\nIn our implementation, the neighborhood is determined by scaling the current candidate to be between zero and one based on the range of the parameter object, so radius values between 0.05 and 0.15 seem reasonable. For these values, the fastest that the search could go from one side of the parameter space to the other is about 10 iterations. The size of the radius controls how quickly the search explores the parameter space. In our implementation, a range of radii is specified so different magnitudes of “local” define the new candidate values.\nTo illustrate, we’ll use the two main glmnet tuning parameters:\n\nThe amount of total regularization (penalty). The default range for this parameter is \\(10^{-10}\\) to \\(10^{0}\\). It is typical to use a log (base-10) transformation for this parameter.\nThe proportion of the lasso penalty (mixture). This is bounded at zero and one with no transformation.\n\nThe process starts with initial values of penalty = 0.025 and mixture = 0.050. Using a radius that randomly fluctuates between 0.050 and 0.015, the data are appropriately scaled, random values are generated on radii around the initial point, then one is randomly chosen as the candidate. For illustration, we will assume that all candidate values are improvements. Using the new value, a set of new random neighbors are generated, one is chosen, and so on. Figure 14.8 shows six iterations as the search proceeds toward the upper left corner.\n\n\n\n\nFigure 14.8: An illustration of how simulated annealing determines what is the local neighborhood for two numeric tuning parameters. The clouds of points show possible next values where one would be selected at random.\n\n\n\nNote that, during some iterations, the candidate sets along the radius exclude points outside of the parameter boundaries. Also, our implementation biases the choice of the next tuning parameter configurations away from new values that are very similar to previous configurations.\nFor non-numeric parameters, we assign a probability for how often the parameter value changes.\n\n14.3.2 The tune_sim_anneal() function\nTo implement iterative search via simulated annealing, use the tune_sim_anneal() function. The syntax for this function is nearly identical to tune_bayes(). There are no options for acquisition functions or uncertainty sampling. The control_sim_anneal() function has some details that define the local neighborhood and the cooling schedule:\n\nno_improve, for simulated annealing, is an integer that will stop the search if no global best or improved results are discovered within no_improve iterations. Accepted suboptimal or discarded parameters count as “no improvement.”\nrestart is the number of iterations with no new best results before starting from the previous best results.\nradius is a numeric vector on (0, 1) that defines the minimum and maximum radius of the local neighborhood around the initial point.\nflip is a probability value that defines the chances of altering the value of categorical or integer parameters.\ncooling_coef is the \\(c\\) coefficient in \\(\\exp(c\\times D_i \\times i)\\) that modulates how quickly the acceptance probability decreases over iterations. Larger values of cooling_coef decrease the probability of accepting a suboptimal parameter setting.\n\nFor the cell segmentation data, the syntax is very consistent with the previously used functions:\n\nctrl_sa &lt;- control_sim_anneal(verbose = TRUE, no_improve = 10L)\n\nset.seed(1404)\nsvm_sa &lt;-\n  svm_wflow %&gt;%\n  tune_sim_anneal(\n    resamples = cell_folds,\n    metrics = roc_res,\n    initial = svm_initial,\n    param_info = svm_param,\n    iter = 50,\n    control = ctrl_sa\n  )\n\nThe simulated annealing process discovered new global optimums at 6 different iterations. The earliest improvement was at iteration 2 and the final optimum occured at iteration 37. The best overall results occured at iteration 37 with a mean area under the ROC curve of 0.898 (compared to an initial best of 0.8659). There were 4 restarts at iterations 13, 26, 34, and 45 as well as 7 discarded candidates during the process.\nThe verbose option prints details of the search process. The output for the first five iterations was:\nThe output for last ten iterations was:\n\n## 40 + better suboptimal  roc_auc=0.89285 (+/-0.008806)\n## \n## i Fold01: preprocessor 1/1\n## \n## ✓ Fold01: preprocessor 1/1\n## \n## i Fold01: preprocessor 1/1, model 1/1\n## \n## ✓ Fold01: preprocessor 1/1, model 1/1\n## \n## i Fold01: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold01: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold02: preprocessor 1/1\n## \n## ✓ Fold02: preprocessor 1/1\n## \n## i Fold02: preprocessor 1/1, model 1/1\n## \n## ✓ Fold02: preprocessor 1/1, model 1/1\n## \n## i Fold02: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold02: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold03: preprocessor 1/1\n## \n## ✓ Fold03: preprocessor 1/1\n## \n## i Fold03: preprocessor 1/1, model 1/1\n## \n## ✓ Fold03: preprocessor 1/1, model 1/1\n## \n## i Fold03: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold03: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold04: preprocessor 1/1\n## \n## ✓ Fold04: preprocessor 1/1\n## \n## i Fold04: preprocessor 1/1, model 1/1\n## \n## ✓ Fold04: preprocessor 1/1, model 1/1\n## \n## i Fold04: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold04: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold05: preprocessor 1/1\n## \n## ✓ Fold05: preprocessor 1/1\n## \n## i Fold05: preprocessor 1/1, model 1/1\n## \n## ✓ Fold05: preprocessor 1/1, model 1/1\n## \n## i Fold05: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold05: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold06: preprocessor 1/1\n## \n## ✓ Fold06: preprocessor 1/1\n## \n## i Fold06: preprocessor 1/1, model 1/1\n## \n## ✓ Fold06: preprocessor 1/1, model 1/1\n## \n## i Fold06: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold06: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold07: preprocessor 1/1\n## \n## ✓ Fold07: preprocessor 1/1\n## \n## i Fold07: preprocessor 1/1, model 1/1\n## \n## ✓ Fold07: preprocessor 1/1, model 1/1\n## \n## i Fold07: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold07: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold08: preprocessor 1/1\n## \n## ✓ Fold08: preprocessor 1/1\n## \n## i Fold08: preprocessor 1/1, model 1/1\n## \n## ✓ Fold08: preprocessor 1/1, model 1/1\n## \n## i Fold08: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold08: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold09: preprocessor 1/1\n## \n## ✓ Fold09: preprocessor 1/1\n## \n## i Fold09: preprocessor 1/1, model 1/1\n## \n## ✓ Fold09: preprocessor 1/1, model 1/1\n## \n## i Fold09: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold09: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold10: preprocessor 1/1\n## \n## ✓ Fold10: preprocessor 1/1\n## \n## i Fold10: preprocessor 1/1, model 1/1\n## \n## ✓ Fold10: preprocessor 1/1, model 1/1\n## \n## i Fold10: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold10: preprocessor 1/1, model 1/1 (predictions)\n## \n## 41 + better suboptimal  roc_auc=0.89419 (+/-0.008628)\n## \n## i Fold01: preprocessor 1/1\n## \n## ✓ Fold01: preprocessor 1/1\n## \n## i Fold01: preprocessor 1/1, model 1/1\n## \n## ✓ Fold01: preprocessor 1/1, model 1/1\n## \n## i Fold01: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold01: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold02: preprocessor 1/1\n## \n## ✓ Fold02: preprocessor 1/1\n## \n## i Fold02: preprocessor 1/1, model 1/1\n## \n## ✓ Fold02: preprocessor 1/1, model 1/1\n## \n## i Fold02: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold02: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold03: preprocessor 1/1\n## \n## ✓ Fold03: preprocessor 1/1\n## \n## i Fold03: preprocessor 1/1, model 1/1\n## \n## ✓ Fold03: preprocessor 1/1, model 1/1\n## \n## i Fold03: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold03: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold04: preprocessor 1/1\n## \n## ✓ Fold04: preprocessor 1/1\n## \n## i Fold04: preprocessor 1/1, model 1/1\n## \n## ✓ Fold04: preprocessor 1/1, model 1/1\n## \n## i Fold04: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold04: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold05: preprocessor 1/1\n## \n## ✓ Fold05: preprocessor 1/1\n## \n## i Fold05: preprocessor 1/1, model 1/1\n## \n## ✓ Fold05: preprocessor 1/1, model 1/1\n## \n## i Fold05: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold05: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold06: preprocessor 1/1\n## \n## ✓ Fold06: preprocessor 1/1\n## \n## i Fold06: preprocessor 1/1, model 1/1\n## \n## ✓ Fold06: preprocessor 1/1, model 1/1\n## \n## i Fold06: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold06: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold07: preprocessor 1/1\n## \n## ✓ Fold07: preprocessor 1/1\n## \n## i Fold07: preprocessor 1/1, model 1/1\n## \n## ✓ Fold07: preprocessor 1/1, model 1/1\n## \n## i Fold07: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold07: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold08: preprocessor 1/1\n## \n## ✓ Fold08: preprocessor 1/1\n## \n## i Fold08: preprocessor 1/1, model 1/1\n## \n## ✓ Fold08: preprocessor 1/1, model 1/1\n## \n## i Fold08: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold08: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold09: preprocessor 1/1\n## \n## ✓ Fold09: preprocessor 1/1\n## \n## i Fold09: preprocessor 1/1, model 1/1\n## \n## ✓ Fold09: preprocessor 1/1, model 1/1\n## \n## i Fold09: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold09: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold10: preprocessor 1/1\n## \n## ✓ Fold10: preprocessor 1/1\n## \n## i Fold10: preprocessor 1/1, model 1/1\n## \n## ✓ Fold10: preprocessor 1/1, model 1/1\n## \n## i Fold10: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold10: preprocessor 1/1, model 1/1 (predictions)\n## \n## 42 + better suboptimal  roc_auc=0.8979 (+/-0.007741)\n## \n## i Fold01: preprocessor 1/1\n## \n## ✓ Fold01: preprocessor 1/1\n## \n## i Fold01: preprocessor 1/1, model 1/1\n## \n## ✓ Fold01: preprocessor 1/1, model 1/1\n## \n## i Fold01: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold01: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold02: preprocessor 1/1\n## \n## ✓ Fold02: preprocessor 1/1\n## \n## i Fold02: preprocessor 1/1, model 1/1\n## \n## ✓ Fold02: preprocessor 1/1, model 1/1\n## \n## i Fold02: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold02: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold03: preprocessor 1/1\n## \n## ✓ Fold03: preprocessor 1/1\n## \n## i Fold03: preprocessor 1/1, model 1/1\n## \n## ✓ Fold03: preprocessor 1/1, model 1/1\n## \n## i Fold03: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold03: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold04: preprocessor 1/1\n## \n## ✓ Fold04: preprocessor 1/1\n## \n## i Fold04: preprocessor 1/1, model 1/1\n## \n## ✓ Fold04: preprocessor 1/1, model 1/1\n## \n## i Fold04: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold04: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold05: preprocessor 1/1\n## \n## ✓ Fold05: preprocessor 1/1\n## \n## i Fold05: preprocessor 1/1, model 1/1\n## \n## ✓ Fold05: preprocessor 1/1, model 1/1\n## \n## i Fold05: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold05: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold06: preprocessor 1/1\n## \n## ✓ Fold06: preprocessor 1/1\n## \n## i Fold06: preprocessor 1/1, model 1/1\n## \n## ✓ Fold06: preprocessor 1/1, model 1/1\n## \n## i Fold06: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold06: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold07: preprocessor 1/1\n## \n## ✓ Fold07: preprocessor 1/1\n## \n## i Fold07: preprocessor 1/1, model 1/1\n## \n## ✓ Fold07: preprocessor 1/1, model 1/1\n## \n## i Fold07: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold07: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold08: preprocessor 1/1\n## \n## ✓ Fold08: preprocessor 1/1\n## \n## i Fold08: preprocessor 1/1, model 1/1\n## \n## ✓ Fold08: preprocessor 1/1, model 1/1\n## \n## i Fold08: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold08: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold09: preprocessor 1/1\n## \n## ✓ Fold09: preprocessor 1/1\n## \n## i Fold09: preprocessor 1/1, model 1/1\n## \n## ✓ Fold09: preprocessor 1/1, model 1/1\n## \n## i Fold09: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold09: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold10: preprocessor 1/1\n## \n## ✓ Fold10: preprocessor 1/1\n## \n## i Fold10: preprocessor 1/1, model 1/1\n## \n## ✓ Fold10: preprocessor 1/1, model 1/1\n## \n## i Fold10: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold10: preprocessor 1/1, model 1/1 (predictions)\n## \n## 43 ─ discard suboptimal roc_auc=0.86412 (+/-0.009579)\n## \n## i Fold01: preprocessor 1/1\n## \n## ✓ Fold01: preprocessor 1/1\n## \n## i Fold01: preprocessor 1/1, model 1/1\n## \n## ✓ Fold01: preprocessor 1/1, model 1/1\n## \n## i Fold01: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold01: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold02: preprocessor 1/1\n## \n## ✓ Fold02: preprocessor 1/1\n## \n## i Fold02: preprocessor 1/1, model 1/1\n## \n## ✓ Fold02: preprocessor 1/1, model 1/1\n## \n## i Fold02: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold02: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold03: preprocessor 1/1\n## \n## ✓ Fold03: preprocessor 1/1\n## \n## i Fold03: preprocessor 1/1, model 1/1\n## \n## ✓ Fold03: preprocessor 1/1, model 1/1\n## \n## i Fold03: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold03: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold04: preprocessor 1/1\n## \n## ✓ Fold04: preprocessor 1/1\n## \n## i Fold04: preprocessor 1/1, model 1/1\n## \n## ✓ Fold04: preprocessor 1/1, model 1/1\n## \n## i Fold04: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold04: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold05: preprocessor 1/1\n## \n## ✓ Fold05: preprocessor 1/1\n## \n## i Fold05: preprocessor 1/1, model 1/1\n## \n## ✓ Fold05: preprocessor 1/1, model 1/1\n## \n## i Fold05: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold05: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold06: preprocessor 1/1\n## \n## ✓ Fold06: preprocessor 1/1\n## \n## i Fold06: preprocessor 1/1, model 1/1\n## \n## ✓ Fold06: preprocessor 1/1, model 1/1\n## \n## i Fold06: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold06: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold07: preprocessor 1/1\n## \n## ✓ Fold07: preprocessor 1/1\n## \n## i Fold07: preprocessor 1/1, model 1/1\n## \n## ✓ Fold07: preprocessor 1/1, model 1/1\n## \n## i Fold07: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold07: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold08: preprocessor 1/1\n## \n## ✓ Fold08: preprocessor 1/1\n## \n## i Fold08: preprocessor 1/1, model 1/1\n## \n## ✓ Fold08: preprocessor 1/1, model 1/1\n## \n## i Fold08: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold08: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold09: preprocessor 1/1\n## \n## ✓ Fold09: preprocessor 1/1\n## \n## i Fold09: preprocessor 1/1, model 1/1\n## \n## ✓ Fold09: preprocessor 1/1, model 1/1\n## \n## i Fold09: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold09: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold10: preprocessor 1/1\n## \n## ✓ Fold10: preprocessor 1/1\n## \n## i Fold10: preprocessor 1/1, model 1/1\n## \n## ✓ Fold10: preprocessor 1/1, model 1/1\n## \n## i Fold10: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold10: preprocessor 1/1, model 1/1 (predictions)\n## \n## 44 ◯ accept suboptimal  roc_auc=0.89119 (+/-0.008697)\n## \n## i Fold01: preprocessor 1/1\n## \n## ✓ Fold01: preprocessor 1/1\n## \n## i Fold01: preprocessor 1/1, model 1/1\n## \n## ✓ Fold01: preprocessor 1/1, model 1/1\n## \n## i Fold01: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold01: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold02: preprocessor 1/1\n## \n## ✓ Fold02: preprocessor 1/1\n## \n## i Fold02: preprocessor 1/1, model 1/1\n## \n## ✓ Fold02: preprocessor 1/1, model 1/1\n## \n## i Fold02: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold02: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold03: preprocessor 1/1\n## \n## ✓ Fold03: preprocessor 1/1\n## \n## i Fold03: preprocessor 1/1, model 1/1\n## \n## ✓ Fold03: preprocessor 1/1, model 1/1\n## \n## i Fold03: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold03: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold04: preprocessor 1/1\n## \n## ✓ Fold04: preprocessor 1/1\n## \n## i Fold04: preprocessor 1/1, model 1/1\n## \n## ✓ Fold04: preprocessor 1/1, model 1/1\n## \n## i Fold04: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold04: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold05: preprocessor 1/1\n## \n## ✓ Fold05: preprocessor 1/1\n## \n## i Fold05: preprocessor 1/1, model 1/1\n## \n## ✓ Fold05: preprocessor 1/1, model 1/1\n## \n## i Fold05: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold05: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold06: preprocessor 1/1\n## \n## ✓ Fold06: preprocessor 1/1\n## \n## i Fold06: preprocessor 1/1, model 1/1\n## \n## ✓ Fold06: preprocessor 1/1, model 1/1\n## \n## i Fold06: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold06: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold07: preprocessor 1/1\n## \n## ✓ Fold07: preprocessor 1/1\n## \n## i Fold07: preprocessor 1/1, model 1/1\n## \n## ✓ Fold07: preprocessor 1/1, model 1/1\n## \n## i Fold07: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold07: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold08: preprocessor 1/1\n## \n## ✓ Fold08: preprocessor 1/1\n## \n## i Fold08: preprocessor 1/1, model 1/1\n## \n## ✓ Fold08: preprocessor 1/1, model 1/1\n## \n## i Fold08: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold08: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold09: preprocessor 1/1\n## \n## ✓ Fold09: preprocessor 1/1\n## \n## i Fold09: preprocessor 1/1, model 1/1\n## \n## ✓ Fold09: preprocessor 1/1, model 1/1\n## \n## i Fold09: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold09: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold10: preprocessor 1/1\n## \n## ✓ Fold10: preprocessor 1/1\n## \n## i Fold10: preprocessor 1/1, model 1/1\n## \n## ✓ Fold10: preprocessor 1/1, model 1/1\n## \n## i Fold10: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold10: preprocessor 1/1, model 1/1 (predictions)\n## \n## 45 ✖ restart from best  roc_auc=0.8921 (+/-0.00885)\n## \n## i Fold01: preprocessor 1/1\n## \n## ✓ Fold01: preprocessor 1/1\n## \n## i Fold01: preprocessor 1/1, model 1/1\n## \n## ✓ Fold01: preprocessor 1/1, model 1/1\n## \n## i Fold01: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold01: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold02: preprocessor 1/1\n## \n## ✓ Fold02: preprocessor 1/1\n## \n## i Fold02: preprocessor 1/1, model 1/1\n## \n## ✓ Fold02: preprocessor 1/1, model 1/1\n## \n## i Fold02: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold02: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold03: preprocessor 1/1\n## \n## ✓ Fold03: preprocessor 1/1\n## \n## i Fold03: preprocessor 1/1, model 1/1\n## \n## ✓ Fold03: preprocessor 1/1, model 1/1\n## \n## i Fold03: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold03: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold04: preprocessor 1/1\n## \n## ✓ Fold04: preprocessor 1/1\n## \n## i Fold04: preprocessor 1/1, model 1/1\n## \n## ✓ Fold04: preprocessor 1/1, model 1/1\n## \n## i Fold04: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold04: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold05: preprocessor 1/1\n## \n## ✓ Fold05: preprocessor 1/1\n## \n## i Fold05: preprocessor 1/1, model 1/1\n## \n## ✓ Fold05: preprocessor 1/1, model 1/1\n## \n## i Fold05: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold05: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold06: preprocessor 1/1\n## \n## ✓ Fold06: preprocessor 1/1\n## \n## i Fold06: preprocessor 1/1, model 1/1\n## \n## ✓ Fold06: preprocessor 1/1, model 1/1\n## \n## i Fold06: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold06: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold07: preprocessor 1/1\n## \n## ✓ Fold07: preprocessor 1/1\n## \n## i Fold07: preprocessor 1/1, model 1/1\n## \n## ✓ Fold07: preprocessor 1/1, model 1/1\n## \n## i Fold07: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold07: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold08: preprocessor 1/1\n## \n## ✓ Fold08: preprocessor 1/1\n## \n## i Fold08: preprocessor 1/1, model 1/1\n## \n## ✓ Fold08: preprocessor 1/1, model 1/1\n## \n## i Fold08: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold08: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold09: preprocessor 1/1\n## \n## ✓ Fold09: preprocessor 1/1\n## \n## i Fold09: preprocessor 1/1, model 1/1\n## \n## ✓ Fold09: preprocessor 1/1, model 1/1\n## \n## i Fold09: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold09: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold10: preprocessor 1/1\n## \n## ✓ Fold10: preprocessor 1/1\n## \n## i Fold10: preprocessor 1/1, model 1/1\n## \n## ✓ Fold10: preprocessor 1/1, model 1/1\n## \n## i Fold10: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold10: preprocessor 1/1, model 1/1 (predictions)\n## \n## 46 ◯ accept suboptimal  roc_auc=0.89657 (+/-0.008539)\n## \n## i Fold01: preprocessor 1/1\n## \n## ✓ Fold01: preprocessor 1/1\n## \n## i Fold01: preprocessor 1/1, model 1/1\n## \n## ✓ Fold01: preprocessor 1/1, model 1/1\n## \n## i Fold01: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold01: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold02: preprocessor 1/1\n## \n## ✓ Fold02: preprocessor 1/1\n## \n## i Fold02: preprocessor 1/1, model 1/1\n## \n## ✓ Fold02: preprocessor 1/1, model 1/1\n## \n## i Fold02: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold02: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold03: preprocessor 1/1\n## \n## ✓ Fold03: preprocessor 1/1\n## \n## i Fold03: preprocessor 1/1, model 1/1\n## \n## ✓ Fold03: preprocessor 1/1, model 1/1\n## \n## i Fold03: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold03: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold04: preprocessor 1/1\n## \n## ✓ Fold04: preprocessor 1/1\n## \n## i Fold04: preprocessor 1/1, model 1/1\n## \n## ✓ Fold04: preprocessor 1/1, model 1/1\n## \n## i Fold04: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold04: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold05: preprocessor 1/1\n## \n## ✓ Fold05: preprocessor 1/1\n## \n## i Fold05: preprocessor 1/1, model 1/1\n## \n## ✓ Fold05: preprocessor 1/1, model 1/1\n## \n## i Fold05: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold05: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold06: preprocessor 1/1\n## \n## ✓ Fold06: preprocessor 1/1\n## \n## i Fold06: preprocessor 1/1, model 1/1\n## \n## ✓ Fold06: preprocessor 1/1, model 1/1\n## \n## i Fold06: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold06: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold07: preprocessor 1/1\n## \n## ✓ Fold07: preprocessor 1/1\n## \n## i Fold07: preprocessor 1/1, model 1/1\n## \n## ✓ Fold07: preprocessor 1/1, model 1/1\n## \n## i Fold07: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold07: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold08: preprocessor 1/1\n## \n## ✓ Fold08: preprocessor 1/1\n## \n## i Fold08: preprocessor 1/1, model 1/1\n## \n## ✓ Fold08: preprocessor 1/1, model 1/1\n## \n## i Fold08: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold08: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold09: preprocessor 1/1\n## \n## ✓ Fold09: preprocessor 1/1\n## \n## i Fold09: preprocessor 1/1, model 1/1\n## \n## ✓ Fold09: preprocessor 1/1, model 1/1\n## \n## i Fold09: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold09: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold10: preprocessor 1/1\n## \n## ✓ Fold10: preprocessor 1/1\n## \n## i Fold10: preprocessor 1/1, model 1/1\n## \n## ✓ Fold10: preprocessor 1/1, model 1/1\n## \n## i Fold10: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold10: preprocessor 1/1, model 1/1 (predictions)\n## \n## 47 ◯ accept suboptimal  roc_auc=0.88647 (+/-0.008694)\n## \n## i Fold01: preprocessor 1/1\n## \n## ✓ Fold01: preprocessor 1/1\n## \n## i Fold01: preprocessor 1/1, model 1/1\n## \n## ✓ Fold01: preprocessor 1/1, model 1/1\n## \n## i Fold01: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold01: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold02: preprocessor 1/1\n## \n## ✓ Fold02: preprocessor 1/1\n## \n## i Fold02: preprocessor 1/1, model 1/1\n## \n## ✓ Fold02: preprocessor 1/1, model 1/1\n## \n## i Fold02: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold02: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold03: preprocessor 1/1\n## \n## ✓ Fold03: preprocessor 1/1\n## \n## i Fold03: preprocessor 1/1, model 1/1\n## \n## ✓ Fold03: preprocessor 1/1, model 1/1\n## \n## i Fold03: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold03: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold04: preprocessor 1/1\n## \n## ✓ Fold04: preprocessor 1/1\n## \n## i Fold04: preprocessor 1/1, model 1/1\n## \n## ✓ Fold04: preprocessor 1/1, model 1/1\n## \n## i Fold04: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold04: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold05: preprocessor 1/1\n## \n## ✓ Fold05: preprocessor 1/1\n## \n## i Fold05: preprocessor 1/1, model 1/1\n## \n## ✓ Fold05: preprocessor 1/1, model 1/1\n## \n## i Fold05: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold05: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold06: preprocessor 1/1\n## \n## ✓ Fold06: preprocessor 1/1\n## \n## i Fold06: preprocessor 1/1, model 1/1\n## \n## ✓ Fold06: preprocessor 1/1, model 1/1\n## \n## i Fold06: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold06: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold07: preprocessor 1/1\n## \n## ✓ Fold07: preprocessor 1/1\n## \n## i Fold07: preprocessor 1/1, model 1/1\n## \n## ✓ Fold07: preprocessor 1/1, model 1/1\n## \n## i Fold07: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold07: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold08: preprocessor 1/1\n## \n## ✓ Fold08: preprocessor 1/1\n## \n## i Fold08: preprocessor 1/1, model 1/1\n## \n## ✓ Fold08: preprocessor 1/1, model 1/1\n## \n## i Fold08: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold08: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold09: preprocessor 1/1\n## \n## ✓ Fold09: preprocessor 1/1\n## \n## i Fold09: preprocessor 1/1, model 1/1\n## \n## ✓ Fold09: preprocessor 1/1, model 1/1\n## \n## i Fold09: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold09: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold10: preprocessor 1/1\n## \n## ✓ Fold10: preprocessor 1/1\n## \n## i Fold10: preprocessor 1/1, model 1/1\n## \n## ✓ Fold10: preprocessor 1/1, model 1/1\n## \n## i Fold10: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold10: preprocessor 1/1, model 1/1 (predictions)\n## \n## 48 + better suboptimal  roc_auc=0.89035 (+/-0.008894)\n## \n## i Fold01: preprocessor 1/1\n## \n## ✓ Fold01: preprocessor 1/1\n## \n## i Fold01: preprocessor 1/1, model 1/1\n## \n## ✓ Fold01: preprocessor 1/1, model 1/1\n## \n## i Fold01: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold01: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold02: preprocessor 1/1\n## \n## ✓ Fold02: preprocessor 1/1\n## \n## i Fold02: preprocessor 1/1, model 1/1\n## \n## ✓ Fold02: preprocessor 1/1, model 1/1\n## \n## i Fold02: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold02: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold03: preprocessor 1/1\n## \n## ✓ Fold03: preprocessor 1/1\n## \n## i Fold03: preprocessor 1/1, model 1/1\n## \n## ✓ Fold03: preprocessor 1/1, model 1/1\n## \n## i Fold03: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold03: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold04: preprocessor 1/1\n## \n## ✓ Fold04: preprocessor 1/1\n## \n## i Fold04: preprocessor 1/1, model 1/1\n## \n## ✓ Fold04: preprocessor 1/1, model 1/1\n## \n## i Fold04: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold04: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold05: preprocessor 1/1\n## \n## ✓ Fold05: preprocessor 1/1\n## \n## i Fold05: preprocessor 1/1, model 1/1\n## \n## ✓ Fold05: preprocessor 1/1, model 1/1\n## \n## i Fold05: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold05: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold06: preprocessor 1/1\n## \n## ✓ Fold06: preprocessor 1/1\n## \n## i Fold06: preprocessor 1/1, model 1/1\n## \n## ✓ Fold06: preprocessor 1/1, model 1/1\n## \n## i Fold06: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold06: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold07: preprocessor 1/1\n## \n## ✓ Fold07: preprocessor 1/1\n## \n## i Fold07: preprocessor 1/1, model 1/1\n## \n## ✓ Fold07: preprocessor 1/1, model 1/1\n## \n## i Fold07: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold07: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold08: preprocessor 1/1\n## \n## ✓ Fold08: preprocessor 1/1\n## \n## i Fold08: preprocessor 1/1, model 1/1\n## \n## ✓ Fold08: preprocessor 1/1, model 1/1\n## \n## i Fold08: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold08: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold09: preprocessor 1/1\n## \n## ✓ Fold09: preprocessor 1/1\n## \n## i Fold09: preprocessor 1/1, model 1/1\n## \n## ✓ Fold09: preprocessor 1/1, model 1/1\n## \n## i Fold09: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold09: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold10: preprocessor 1/1\n## \n## ✓ Fold10: preprocessor 1/1\n## \n## i Fold10: preprocessor 1/1, model 1/1\n## \n## ✓ Fold10: preprocessor 1/1, model 1/1\n## \n## i Fold10: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold10: preprocessor 1/1, model 1/1 (predictions)\n## \n## 49 + better suboptimal  roc_auc=0.8977 (+/-0.007898)\n## \n## i Fold01: preprocessor 1/1\n## \n## ✓ Fold01: preprocessor 1/1\n## \n## i Fold01: preprocessor 1/1, model 1/1\n## \n## ✓ Fold01: preprocessor 1/1, model 1/1\n## \n## i Fold01: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold01: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold02: preprocessor 1/1\n## \n## ✓ Fold02: preprocessor 1/1\n## \n## i Fold02: preprocessor 1/1, model 1/1\n## \n## ✓ Fold02: preprocessor 1/1, model 1/1\n## \n## i Fold02: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold02: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold03: preprocessor 1/1\n## \n## ✓ Fold03: preprocessor 1/1\n## \n## i Fold03: preprocessor 1/1, model 1/1\n## \n## ✓ Fold03: preprocessor 1/1, model 1/1\n## \n## i Fold03: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold03: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold04: preprocessor 1/1\n## \n## ✓ Fold04: preprocessor 1/1\n## \n## i Fold04: preprocessor 1/1, model 1/1\n## \n## ✓ Fold04: preprocessor 1/1, model 1/1\n## \n## i Fold04: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold04: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold05: preprocessor 1/1\n## \n## ✓ Fold05: preprocessor 1/1\n## \n## i Fold05: preprocessor 1/1, model 1/1\n## \n## ✓ Fold05: preprocessor 1/1, model 1/1\n## \n## i Fold05: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold05: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold06: preprocessor 1/1\n## \n## ✓ Fold06: preprocessor 1/1\n## \n## i Fold06: preprocessor 1/1, model 1/1\n## \n## ✓ Fold06: preprocessor 1/1, model 1/1\n## \n## i Fold06: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold06: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold07: preprocessor 1/1\n## \n## ✓ Fold07: preprocessor 1/1\n## \n## i Fold07: preprocessor 1/1, model 1/1\n## \n## ✓ Fold07: preprocessor 1/1, model 1/1\n## \n## i Fold07: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold07: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold08: preprocessor 1/1\n## \n## ✓ Fold08: preprocessor 1/1\n## \n## i Fold08: preprocessor 1/1, model 1/1\n## \n## ✓ Fold08: preprocessor 1/1, model 1/1\n## \n## i Fold08: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold08: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold09: preprocessor 1/1\n## \n## ✓ Fold09: preprocessor 1/1\n## \n## i Fold09: preprocessor 1/1, model 1/1\n## \n## ✓ Fold09: preprocessor 1/1, model 1/1\n## \n## i Fold09: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold09: preprocessor 1/1, model 1/1 (predictions)\n## \n## i Fold10: preprocessor 1/1\n## \n## ✓ Fold10: preprocessor 1/1\n## \n## i Fold10: preprocessor 1/1, model 1/1\n## \n## ✓ Fold10: preprocessor 1/1, model 1/1\n## \n## i Fold10: preprocessor 1/1, model 1/1 (extracts)\n## \n## i Fold10: preprocessor 1/1, model 1/1 (predictions)\n## \n## 50 ─ discard suboptimal roc_auc=0.86146 (+/-0.009902)\n\nAs with the other tune_*() functions, the corresponding autoplot() function produces visual assessments of the results. Using autoplot(svm_sa, type = \"performance\") shows the performance over iterations (Figure 14.9) while autoplot(svm_sa, type = \"parameters\") plots performance versus specific tuning parameter values (Figure 14.10).\n\n\n\n\nFigure 14.9: Progress of the simulated annealing process shown when the autoplot() method is used with type = \"performance\"\n\n\n\n\n\n\n\nFigure 14.10: Performance versus tuning parameter values when the autoplot() method is used with type = \"parameters\".\n\n\n\nA visualization of the search path helps to understand where the search process did well and where it went astray:\nLike tune_bayes(), manually stopping execution will return the completed iterations."
  },
  {
    "objectID": "14-iterative-search.html#iterative-summary",
    "href": "14-iterative-search.html#iterative-summary",
    "title": "14  Iterative Search",
    "section": "\n14.4 Chapter Summary",
    "text": "14.4 Chapter Summary\nThis chapter described two iterative search methods for optimizing tuning parameters. Bayes optimization uses a predictive model trained on existing resampling results to suggest tuning parameter values, while simulated annealing walks through the hyperparameter space to find good values. Both can be effective at finding good values alone or as a follow-up method used after an initial grid search to further finetune performance.\n\n\n\n\nBohachevsky, I, M Johnson, and M Stein. 1986. “Generalized Simulated Annealing for Function Optimization.” Technometrics 28 (3): 209–17.\n\n\nFrazier, R. 2018. “A Tutorial on Bayesian Optimization.” https://arxiv.org/abs/1807.02811.\n\n\nKirkpatrick, S, D Gelatt, and M Vecchi. 1983. “Optimization by Simulated Annealing.” Science 220 (4598): 671–80.\n\n\nKuhn, M, and K Johnson. 2013. Applied Predictive Modeling. Springer.\n\n\nRasmussen, C, and C Williams. 2006. Gaussian Processes for Machine Learning. Gaussian Processes for Machine Learning. MIT Press.\n\n\nSchulz, E, M Speekenbrink, and A Krause. 2018. “A Tutorial on Gaussian Process Regression: Modelling, Exploring, and Exploiting Functions.” Journal of Mathematical Psychology 85: 1–16.\n\n\nShahriari, B., K. Swersky, Z. Wang, R. P. Adams, and N. de Freitas. 2016. “Taking the Human Out of the Loop: A Review of Bayesian Optimization.” Proceedings of the IEEE 104 (1): 148–75.\n\n\nVan Laarhoven, P, and E Aarts. 1987. “Simulated Annealing.” In Simulated Annealing: Theory and Applications, 7–15. Springer."
  },
  {
    "objectID": "14-iterative-search.html#footnotes",
    "href": "14-iterative-search.html#footnotes",
    "title": "14  Iterative Search",
    "section": "",
    "text": "This equation is also the same as the radial basis function used in kernel methods, such as the SVM model that is currently being used. This is a coincidence; this covariance function is unrelated to the SVM tuning parameter that we are using.↩︎"
  },
  {
    "objectID": "18-explaining-models-and-predictions.html#software-for-model-explanations",
    "href": "18-explaining-models-and-predictions.html#software-for-model-explanations",
    "title": "18  Explaining Models and Predictions",
    "section": "\n18.1 Software for Model Explanations",
    "text": "18.1 Software for Model Explanations\nThe tidymodels framework does not itself contain software for model explanations. Instead, models trained and evaluated with tidymodels can be explained with other, supplementary software in R packages such as lime, vip, and DALEX. We often choose:\n\n\nvip functions when we want to use model-based methods that take advantage of model structure (and are often faster)\n\nDALEX functions when we want to use model-agnostic methods that can be applied to any model\n\nIn Chapters 10 and 11, we trained and compared several models to predict the price of homes in Ames, IA, including a linear model with interactions and a random forest model, with results shown in Figure 18.1.\n\n\n\n\nFigure 18.1: Comparing predicted prices for a linear model with interactions and a random forest model\n\n\n\nLet’s build model-agnostic explainers for both of these models to find out why they make these predictions. We can use the DALEXtra add-on package for DALEX, which provides support for tidymodels. Biecek and Burzykowski (2021) provide a thorough exploration of how to use DALEX for model explanations; this chapter only summarizes some important approaches, specific to tidymodels. To compute any kind of model explanation, global or local, using DALEX, we first prepare the appropriate data and then create an explainer for each model:\n\nlibrary(DALEXtra)\nvip_features &lt;- c(\"Neighborhood\", \"Gr_Liv_Area\", \"Year_Built\", \n                  \"Bldg_Type\", \"Latitude\", \"Longitude\")\n\nvip_train &lt;- \n  ames_train %&gt;% \n  select(all_of(vip_features))\n\nexplainer_lm &lt;- \n  explain_tidymodels(\n    lm_fit, \n    data = vip_train, \n    y = ames_train$Sale_Price,\n    label = \"lm + interactions\",\n    verbose = FALSE\n  )\n\nexplainer_rf &lt;- \n  explain_tidymodels(\n    rf_fit, \n    data = vip_train, \n    y = ames_train$Sale_Price,\n    label = \"random forest\",\n    verbose = FALSE\n  )\n\n\nA linear model is typically straightforward to interpret and explain; you may not often find yourself using separate model explanation algorithms for a linear model. However, it can sometimes be difficult to understand or explain the predictions of even a linear model once it has splines and interaction terms!\n\nDealing with significant feature engineering transformations during model explainability highlights some options we have (or sometimes, ambiguity in such analyses). We can quantify global or local model explanations either in terms of:\n\n\noriginal, basic predictors as they existed without significant feature engineering transformations, or\n\nderived features, such as those created via dimensionality reduction (Chapter 16) or interactions and spline terms, as in this example."
  },
  {
    "objectID": "18-explaining-models-and-predictions.html#local-explanations",
    "href": "18-explaining-models-and-predictions.html#local-explanations",
    "title": "18  Explaining Models and Predictions",
    "section": "\n18.2 Local Explanations",
    "text": "18.2 Local Explanations\nLocal model explanations provide information about a prediction for a single observation. For example, let’s consider an older duplex in the North Ames neighborhood (?sec-exploring-features-of-homes-in-ames):\n\nduplex &lt;- vip_train[120,]\nduplex\n## # A tibble: 1 × 6\n##   Neighborhood Gr_Liv_Area Year_Built Bldg_Type Latitude Longitude\n##   &lt;fct&gt;              &lt;dbl&gt;      &lt;dbl&gt; &lt;fct&gt;        &lt;dbl&gt;     &lt;dbl&gt;\n## 1 North_Ames          1040       1949 Duplex        42.0     -93.6\n\nThere are multiple possible approaches to understanding why a model predicts a given price for this duplex. One is a break-down explanation, implemented with the DALEX function predict_parts(); it computes how contributions attributed to individual features change the mean model’s prediction for a particular observation, like our duplex. For the linear model, the duplex status (Bldg_Type = 3),1 size, longitude, and age all contribute the most to the price being driven down from the intercept:\n\nlm_breakdown &lt;- predict_parts(explainer = explainer_lm, new_observation = duplex)\nlm_breakdown\n##                                           contribution\n## lm + interactions: intercept                     5.221\n## lm + interactions: Gr_Liv_Area = 1040           -0.082\n## lm + interactions: Bldg_Type = 3                -0.049\n## lm + interactions: Longitude = -93.608903       -0.043\n## lm + interactions: Year_Built = 1949            -0.039\n## lm + interactions: Latitude = 42.035841         -0.007\n## lm + interactions: Neighborhood = 1              0.001\n## lm + interactions: prediction                    5.002\n\nSince this linear model was trained using spline terms for latitude and longitude, the contribution to price for Longitude shown here combines the effects of all of its individual spline terms. The contribution is in terms of the original Longitude feature, not the derived spline features.\nThe most important features are slightly different for the random forest model, with the size, age, and duplex status being most important:\n\nrf_breakdown &lt;- predict_parts(explainer = explainer_rf, new_observation = duplex)\nrf_breakdown\n##                                       contribution\n## random forest: intercept                     5.221\n## random forest: Year_Built = 1949            -0.076\n## random forest: Gr_Liv_Area = 1040           -0.075\n## random forest: Bldg_Type = 3                -0.027\n## random forest: Longitude = -93.608903       -0.043\n## random forest: Latitude = 42.035841         -0.028\n## random forest: Neighborhood = 1             -0.003\n## random forest: prediction                    4.969\n\n\nModel break-down explanations like these depend on the order of the features.\n\nIf we choose the order for the random forest model explanation to be the same as the default for the linear model (chosen via a heuristic), we can change the relative importance of the features:\n\npredict_parts(\n  explainer = explainer_rf, \n  new_observation = duplex,\n  order = lm_breakdown$variable_name\n)\n##                                       contribution\n## random forest: intercept                     5.221\n## random forest: Gr_Liv_Area = 1040           -0.075\n## random forest: Bldg_Type = 3                -0.019\n## random forest: Longitude = -93.608903       -0.023\n## random forest: Year_Built = 1949            -0.104\n## random forest: Latitude = 42.035841         -0.028\n## random forest: Neighborhood = 1             -0.003\n## random forest: prediction                    4.969\n\nWe can use the fact that these break-down explanations change based on order to compute the most important features over all (or many) possible orderings. This is the idea behind Shapley Additive Explanations (Lundberg and Lee 2017), where the average contributions of features are computed under different combinations or “coalitions” of feature orderings. Let’s compute SHAP attributions for our duplex, using B = 20 random orderings:\n\nset.seed(1801)\nshap_duplex &lt;- \n  predict_parts(\n    explainer = explainer_rf, \n    new_observation = duplex, \n    type = \"shap\",\n    B = 20\n  )\n\nWe could use the default plot method from DALEX by calling plot(shap_duplex), or we can access the underlying data and create a custom plot. The box plots in Figure 18.2 display the distribution of contributions across all the orderings we tried, and the bars display the average attribution for each feature:\n\nlibrary(forcats)\nshap_duplex %&gt;%\n  group_by(variable) %&gt;%\n  mutate(mean_val = mean(contribution)) %&gt;%\n  ungroup() %&gt;%\n  mutate(variable = fct_reorder(variable, abs(mean_val))) %&gt;%\n  ggplot(aes(contribution, variable, fill = mean_val &gt; 0)) +\n  geom_col(data = ~distinct(., variable, mean_val), \n           aes(mean_val, variable), \n           alpha = 0.5) +\n  geom_boxplot(width = 0.5) +\n  theme(legend.position = \"none\") +\n  scale_fill_viridis_d() +\n  labs(y = NULL)\n\n\n\n\n\nFigure 18.2: Shapley additive explanations from the random forest model for a duplex property\n\n\n\nWhat about a different observation in our data set? Let’s look at a larger, newer one-family home in the Gilbert neighborhood:\n\nbig_house &lt;- vip_train[1269,]\nbig_house\n## # A tibble: 1 × 6\n##   Neighborhood Gr_Liv_Area Year_Built Bldg_Type Latitude Longitude\n##   &lt;fct&gt;              &lt;dbl&gt;      &lt;dbl&gt; &lt;fct&gt;        &lt;dbl&gt;     &lt;dbl&gt;\n## 1 Gilbert             2267       2002 OneFam        42.1     -93.6\n\nWe can compute SHAP average attributions for this house in the same way:\n\nset.seed(1802)\nshap_house &lt;- \n  predict_parts(\n    explainer = explainer_rf, \n    new_observation = big_house, \n    type = \"shap\",\n    B = 20\n  )\n\nThe results are shown in Figure 18.3; unlike the duplex, the size and age of this house contribute to its price being higher.\n\n\n\n\nFigure 18.3: Shapley additive explanations from the random forest model for a one-family home in Gilbert"
  },
  {
    "objectID": "18-explaining-models-and-predictions.html#global-explanations",
    "href": "18-explaining-models-and-predictions.html#global-explanations",
    "title": "18  Explaining Models and Predictions",
    "section": "\n18.3 Global Explanations",
    "text": "18.3 Global Explanations\nGlobal model explanations, also called global feature importance or variable importance, help us understand which features are most important in driving the predictions of the linear and random forest models overall, aggregated over the whole training set. While the previous section addressed which variables or features are most important in predicting sale price for an individual home, global feature importance addresses the most important variables for a model in aggregate.\n\nOne way to compute variable importance is to permute the features (Breiman 2001). We can permute or shuffle the values of a feature, predict from the model, and then measure how much worse the model fits the data compared to before shuffling.\n\nIf shuffling a column causes a large degradation in model performance, it is important; if shuffling a column’s values doesn’t make much difference to how the model performs, it must not be an important variable. This approach can be applied to any kind of model (it is model agnostic), and the results are straightforward to understand.\nUsing DALEX, we compute this kind of variable importance via the model_parts() function.\n\nset.seed(1803)\nvip_lm &lt;- model_parts(explainer_lm, loss_function = loss_root_mean_square)\nset.seed(1804)\nvip_rf &lt;- model_parts(explainer_rf, loss_function = loss_root_mean_square)\n\nAgain, we could use the default plot method from DALEX by calling plot(vip_lm, vip_rf) but the underlying data is available for exploration, analysis, and plotting. Let’s create a function for plotting:\n\nggplot_imp &lt;- function(...) {\n  obj &lt;- list(...)\n  metric_name &lt;- attr(obj[[1]], \"loss_name\")\n  metric_lab &lt;- paste(metric_name, \n                      \"after permutations\\n(higher indicates more important)\")\n  \n  full_vip &lt;- bind_rows(obj) %&gt;%\n    filter(variable != \"_baseline_\")\n  \n  perm_vals &lt;- full_vip %&gt;% \n    filter(variable == \"_full_model_\") %&gt;% \n    group_by(label) %&gt;% \n    summarise(dropout_loss = mean(dropout_loss))\n  \n  p &lt;- full_vip %&gt;%\n    filter(variable != \"_full_model_\") %&gt;% \n    mutate(variable = fct_reorder(variable, dropout_loss)) %&gt;%\n    ggplot(aes(dropout_loss, variable)) \n  if(length(obj) &gt; 1) {\n    p &lt;- p + \n      facet_wrap(vars(label)) +\n      geom_vline(data = perm_vals, aes(xintercept = dropout_loss, color = label),\n                 linewidth = 1.4, lty = 2, alpha = 0.7) +\n      geom_boxplot(aes(color = label, fill = label), alpha = 0.2)\n  } else {\n    p &lt;- p + \n      geom_vline(data = perm_vals, aes(xintercept = dropout_loss),\n                 linewidth = 1.4, lty = 2, alpha = 0.7) +\n      geom_boxplot(fill = \"#91CBD765\", alpha = 0.4)\n    \n  }\n  p +\n    theme(legend.position = \"none\") +\n    labs(x = metric_lab, \n         y = NULL,  fill = NULL,  color = NULL)\n}\n\nUsing ggplot_imp(vip_lm, vip_rf) produces Figure 18.4.\n\n\n\n\nFigure 18.4: Global explainer for the random forest and linear regression models\n\n\n\nThe dashed line in each panel of Figure 18.4 shows the RMSE for the full model, either the linear model or the random forest model. Features farther to the right are more important, because permuting them results in higher RMSE. There is quite a lot of interesting information to learn from this plot; for example, neighborhood is quite important in the linear model with interactions/splines but the second least important feature for the random forest model."
  },
  {
    "objectID": "18-explaining-models-and-predictions.html#building-global-explanations-from-local-explanations",
    "href": "18-explaining-models-and-predictions.html#building-global-explanations-from-local-explanations",
    "title": "18  Explaining Models and Predictions",
    "section": "\n18.4 Building Global Explanations from Local Explanations",
    "text": "18.4 Building Global Explanations from Local Explanations\nSo far in this chapter, we have focused on local model explanations for a single observation (via Shapley additive explanations) and global model explanations for a data set as a whole (via permuting features). It is also possible to build global model explanations by aggregating local model explanations, as with partial dependence profiles.\n\nPartial dependence profiles show how the expected value of a model prediction, like the predicted price of a home in Ames, changes as a function of a feature, like the age or gross living area.\n\nOne way to build such a profile is by aggregating or averaging profiles for individual observations. A profile showing how an individual observation’s prediction changes as a function of a given feature is called an ICE (individual conditional expectation) profile or a CP (ceteris paribus) profile. We can compute such individual profiles (for 500 of the observations in our training set) and then aggregate them using the DALEX function model_profile():\n\nset.seed(1805)\npdp_age &lt;- model_profile(explainer_rf, N = 500, variables = \"Year_Built\")\n\nLet’s create another function for plotting the underlying data in this object:\n\nggplot_pdp &lt;- function(obj, x) {\n  \n  p &lt;- \n    as_tibble(obj$agr_profiles) %&gt;%\n    mutate(`_label_` = stringr::str_remove(`_label_`, \"^[^_]*_\")) %&gt;%\n    ggplot(aes(`_x_`, `_yhat_`)) +\n    geom_line(data = as_tibble(obj$cp_profiles),\n              aes(x = {{ x }}, group = `_ids_`),\n              linewidth = 0.5, alpha = 0.05, color = \"gray50\")\n  \n  num_colors &lt;- n_distinct(obj$agr_profiles$`_label_`)\n  \n  if (num_colors &gt; 1) {\n    p &lt;- p + geom_line(aes(color = `_label_`), linewidth = 1.2, alpha = 0.8)\n  } else {\n    p &lt;- p + geom_line(color = \"midnightblue\", linewidth = 1.2, alpha = 0.8)\n  }\n  \n  p\n}\n\nUsing this function generates Figure 18.5, where we can see the nonlinear behavior of the random forest model.\n\nggplot_pdp(pdp_age, Year_Built)  +\n  labs(x = \"Year built\", \n       y = \"Sale Price (log)\", \n       color = NULL)\n\n\n\n\n\nFigure 18.5: Partial dependence profiles for the random forest model focusing on the year built predictor\n\n\n\nSale price for houses built in different years is mostly flat, with a modest rise after about 1960. Partial dependence profiles can be computed for any other feature in the model, and also for groups in the data, such as Bldg_Type. Let’s use 1,000 observations for these profiles.\n\nset.seed(1806)\npdp_liv &lt;- model_profile(explainer_rf, N = 1000, \n                         variables = \"Gr_Liv_Area\", \n                         groups = \"Bldg_Type\")\n\nggplot_pdp(pdp_liv, Gr_Liv_Area) +\n  scale_x_log10() +\n  scale_color_brewer(palette = \"Dark2\") +\n  labs(x = \"Gross living area\", \n       y = \"Sale Price (log)\", \n       color = NULL)\n\nThis code produces Figure 18.6, where we see that sale price increases the most between about 1,000 and 3,000 square feet of living area, and that different home types (like single family homes or different types of townhouses) mostly exhibit similar increasing trends in price with more living space.\n\n\n\n\nFigure 18.6: Partial dependence profiles for the random forest model focusing on building types and gross living area\n\n\n\nWe have the option of using plot(pdp_liv) for default DALEX plots, but since we are making plots with the underlying data here, we can even facet by one of the features to visualize if the predictions change differently and highlighting the imbalance in these subgroups (as shown in Figure 18.7).\n\nas_tibble(pdp_liv$agr_profiles) %&gt;%\n  mutate(Bldg_Type = stringr::str_remove(`_label_`, \"random forest_\")) %&gt;%\n  ggplot(aes(`_x_`, `_yhat_`, color = Bldg_Type)) +\n  geom_line(data = as_tibble(pdp_liv$cp_profiles),\n            aes(x = Gr_Liv_Area, group = `_ids_`),\n            linewidth = 0.5, alpha = 0.1, color = \"gray50\") +\n  geom_line(linewidth = 1.2, alpha = 0.8, show.legend = FALSE) +\n  scale_x_log10() +\n  facet_wrap(~Bldg_Type) +\n  scale_color_brewer(palette = \"Dark2\") +\n  labs(x = \"Gross living area\", \n       y = \"Sale Price (log)\", \n       color = NULL)\n\n\n\n\n\nFigure 18.7: Partial dependence profiles for the random forest model focusing on building types and gross living area using facets\n\n\n\nThere is no one correct approach for building model explanations, and the options outlined in this chapter are not exhaustive. We have highlighted good options for explanations at both the individual and global level, as well as how to bridge from one to the other, and we point you to Biecek and Burzykowski (2021) and Molnar (2020) for further reading."
  },
  {
    "objectID": "18-explaining-models-and-predictions.html#back-to-beans",
    "href": "18-explaining-models-and-predictions.html#back-to-beans",
    "title": "18  Explaining Models and Predictions",
    "section": "\n18.5 Back to Beans!",
    "text": "18.5 Back to Beans!\nIn Chapter 16, we discussed how to use dimensionality reduction as a feature engineering or preprocessing step when modeling high-dimensional data. For our example data set of dry bean morphology measures predicting bean type, we saw great results from partial least squares (PLS) dimensionality reduction combined with a regularized discriminant analysis model. Which of those morphological characteristics were most important in the bean type predictions? We can use the same approach outlined throughout this chapter to create a model-agnostic explainer and compute, say, global model explanations via model_parts():\n\nset.seed(1807)\nvip_beans &lt;- \n  explain_tidymodels(\n    rda_wflow_fit, \n    data = bean_train %&gt;% select(-class), \n    y = bean_train$class,\n    label = \"RDA\",\n    verbose = FALSE\n  ) %&gt;% \n  model_parts() \n\nUsing our previously defined importance plotting function, ggplot_imp(vip_beans) produces Figure 18.8.\n\n\n\n\nFigure 18.8: Global explainer for the regularized discriminant analysis model on the beans data\n\n\n\n\nThe measures of global feature importance that we see in Figure 18.8 incorporate the effects of all of the PLS components, but in terms of the original variables.\n\nFigure 18.8 shows us that shape factors are among the most important features for predicting bean type, especially shape factor 4, a measure of solidity that takes into account the area \\(A\\), major axis \\(L\\), and minor axis \\(l\\):\n\\[\\text{SF4} = \\frac{A}{\\pi(L/2)(l/2)}\\]\nWe can see from Figure 18.8 that shape factor 1 (the ratio of the major axis to the area), the minor axis length, and roundness are the next most important bean characteristics for predicting bean variety."
  },
  {
    "objectID": "18-explaining-models-and-predictions.html#explain-summary",
    "href": "18-explaining-models-and-predictions.html#explain-summary",
    "title": "18  Explaining Models and Predictions",
    "section": "\n18.6 Chapter Summary",
    "text": "18.6 Chapter Summary\nFor some types of models, the answer to why a model made a certain prediction is straightforward, but for other types of models, we must use separate explainer algorithms to understand what features are relatively most important for predictions. You can generate two main kinds of model explanations from a trained model. Global explanations provide information aggregated over an entire data set, while local explanations provide understanding about a model’s predictions for a single observation.\nPackages such as DALEX and its supporting package DALEXtra, vip, and lime can be integrated into a tidymodels analysis to provide these model explainers. Model explanations are just one piece of understanding whether your model is appropriate and effective, along with estimates of model performance; Chapter @ref(trust) further explores the quality and trustworthiness of predictions.\n\n\n\n\nBiecek, Przemyslaw, and Tomasz Burzykowski. 2021. Explanatory Model Analysis. Chapman; Hall/CRC, New York. https://ema.drwhy.ai/.\n\n\nBreiman, L. 2001. “Random Forests.” Machine Learning 45 (1): 5–32.\n\n\nLundberg, Scott M., and Su-In Lee. 2017. “A Unified Approach to Interpreting Model Predictions.” In Proceedings of the 31st International Conference on Neural Information Processing Systems, 4768–77. NIPS’17. Red Hook, NY, USA: Curran Associates Inc.\n\n\nMolnar, Christopher. 2020. Interpretable Machine Learning. lulu.com. https://christophm.github.io/interpretable-ml-book/."
  },
  {
    "objectID": "18-explaining-models-and-predictions.html#footnotes",
    "href": "18-explaining-models-and-predictions.html#footnotes",
    "title": "18  Explaining Models and Predictions",
    "section": "",
    "text": "Notice that this package for model explanations focuses on the level of categorical predictors in this type of output, like Bldg_Type = 3 for duplex and Neighborhood = 1 for North Ames.↩︎"
  },
  {
    "objectID": "19-when-should-you-trust-predictions.html#equivocal-zones",
    "href": "19-when-should-you-trust-predictions.html#equivocal-zones",
    "title": "19  When Should You Trust Your Predictions?",
    "section": "\n19.1 Equivocal Results",
    "text": "19.1 Equivocal Results\n\nIn some cases, the amount of uncertainty associated with a prediction is too high to be trusted.\n\nIf a model result indicated that you had a 51% chance of having contracted COVID-19, it would be natural to view the diagnosis with some skepticism. In fact, regulatory bodies often require many medical diagnostics to have an equivocal zone. This zone is a range of results in which the prediction should not be reported to patients, for example, some range of COVID-19 test results that are too uncertain to be reported to a patient. See Danowski et al. (1970) and Kerleguer et al. (2003) for examples. The same notion can be applied to models created outside of medical diagnostics.\nLet’s use a function that can simulate classification data with two classes and two predictors (x and y). The true model is a logistic regression model with the equation:\n\\[\n\\mathrm{logit}(p) = -1 - 2x - \\frac{x^2}{5} + 2y^2\n\\]\nThe two predictors follow a bivariate normal distribution with a correlation of 0.70. We’ll create a training set of 200 samples and a test set of 50:\n\nlibrary(tidymodels)\ntidymodels_prefer()\n\nsimulate_two_classes &lt;- \n  function (n, error = 0.1, eqn = quote(-1 - 2 * x - 0.2 * x^2 + 2 * y^2))  {\n    # Slightly correlated predictors\n    sigma &lt;- matrix(c(1, 0.7, 0.7, 1), nrow = 2, ncol = 2)\n    dat &lt;- MASS::mvrnorm(n = n, mu = c(0, 0), Sigma = sigma)\n    colnames(dat) &lt;- c(\"x\", \"y\")\n    cls &lt;- paste0(\"class_\", 1:2)\n    dat &lt;- \n      as_tibble(dat) %&gt;% \n      mutate(\n        linear_pred = !!eqn,\n        # Add some misclassification noise\n        linear_pred = linear_pred + rnorm(n, sd = error),\n        prob = binomial()$linkinv(linear_pred),\n        class = ifelse(prob &gt; runif(n), cls[1], cls[2]),\n        class = factor(class, levels = cls)\n      )\n    dplyr::select(dat, x, y, class)\n  }\n\nset.seed(1901)\ntraining_set &lt;- simulate_two_classes(200)\ntesting_set  &lt;- simulate_two_classes(50)\n\nWe estimate a logistic regression model using Bayesian methods (using the default Gaussian prior distributions for the parameters):\n\ntwo_class_mod &lt;- \n  logistic_reg() %&gt;% \n  set_engine(\"stan\", seed = 1902) %&gt;% \n  fit(class ~ . + I(x^2)+ I(y^2), data = training_set)\nprint(two_class_mod, digits = 3)\n## parsnip model object\n## \n## stan_glm\n##  family:       binomial [logit]\n##  formula:      class ~ . + I(x^2) + I(y^2)\n##  observations: 200\n##  predictors:   5\n## ------\n##             Median MAD_SD\n## (Intercept)  1.092  0.287\n## x            2.290  0.423\n## y            0.314  0.354\n## I(x^2)       0.077  0.307\n## I(y^2)      -2.465  0.424\n## \n## ------\n## * For help interpreting the printed output see ?print.stanreg\n## * For info on the priors used see ?prior_summary.stanreg\n\nThe fitted class boundary is overlaid onto the test set in Figure @ref(fig:glm-boundaries). The data points closest to the class boundary are the most uncertain. If their values changed slightly, their predicted class might change. One simple method for disqualifying some results is to call them “equivocal” if the values are within some range around 50% (or the appropriate probability cutoff for a certain situation). Depending on the problem the model is being applied to, this might indicate we should collect another measurement or we require more information before a trustworthy prediction is possible.\n\n\n\n\nSimulated two-class data set with a logistic regression fit and decision boundary.\n\n\n\nWe could base the width of the band around the cutoff on how performance improves when the uncertain results are removed. However, we should also estimate the reportable rate (the expected proportion of usable results). For example, it would not be useful in real-world situations to have perfect performance but release predictions on only 2% of the samples passed to the model.\nLet’s use the test set to determine the balance between improving performance and having enough reportable results. The predictions are created using:\n\ntest_pred &lt;- augment(two_class_mod, testing_set)\ntest_pred %&gt;% head()\n## # A tibble: 6 × 6\n##   .pred_class .pred_class_1 .pred_class_2      x      y class  \n##   &lt;fct&gt;               &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;fct&gt;  \n## 1 class_2           0.0256          0.974  1.12  -0.176 class_2\n## 2 class_1           0.555           0.445 -0.126 -0.582 class_2\n## 3 class_2           0.00620         0.994  1.92   0.615 class_2\n## 4 class_2           0.472           0.528 -0.400  0.252 class_2\n## 5 class_2           0.163           0.837  1.30   1.09  class_1\n## 6 class_2           0.0317          0.968  2.59   1.36  class_2\n\nWith tidymodels, the probably package contains functions for equivocal zones. For cases with two classes, the make_two_class_pred() function creates a factor-like column that has the predicted classes with an equivocal zone:\n\nlibrary(probably)\n\nlvls &lt;- levels(training_set$class)\n\ntest_pred &lt;- \n  test_pred %&gt;% \n  mutate(.pred_with_eqz = make_two_class_pred(.pred_class_1, lvls, buffer = 0.15))\n\ntest_pred %&gt;% count(.pred_with_eqz)\n## # A tibble: 3 × 2\n##   .pred_with_eqz     n\n##       &lt;clss_prd&gt; &lt;int&gt;\n## 1           [EQ]     9\n## 2        class_1    20\n## 3        class_2    21\n\nRows that are within \\(0.50\\pm0.15\\) are given a value of [EQ].\n\nThe notation [EQ] in this example is not a factor level but an attribute of that column.\n\nSince the factor levels are the same as the original data, confusion matrices and other statistics can be computed without error. When using standard functions from the yardstick package, the equivocal results are converted to NA and are not used in the calculations that use the hard class predictions. Notice the differences in these confusion matrices:\n\n# All data\ntest_pred %&gt;% conf_mat(class, .pred_class)\n##           Truth\n## Prediction class_1 class_2\n##    class_1      20       6\n##    class_2       5      19\n\n# Reportable results only: \ntest_pred %&gt;% conf_mat(class, .pred_with_eqz)\n##           Truth\n## Prediction class_1 class_2\n##    class_1      17       3\n##    class_2       5      16\n\nAn is_equivocal() function is also available for filtering these rows from the data.\nDoes the equivocal zone help improve accuracy? Let’s look at different buffer sizes, as shown in Figure @ref(fig:equivocal-zone-results):\n\n# A function to change the buffer then compute performance.\neq_zone_results &lt;- function(buffer) {\n  test_pred &lt;- \n    test_pred %&gt;% \n    mutate(.pred_with_eqz = make_two_class_pred(.pred_class_1, lvls, buffer = buffer))\n  acc &lt;- test_pred %&gt;% accuracy(class, .pred_with_eqz)\n  rep_rate &lt;- reportable_rate(test_pred$.pred_with_eqz)\n  tibble(accuracy = acc$.estimate, reportable = rep_rate, buffer = buffer)\n}\n\n# Evaluate a sequence of buffers and plot the results. \nmap(seq(0, .1, length.out = 40), eq_zone_results) %&gt;% \n  list_rbind() %&gt;% \n  pivot_longer(c(-buffer), names_to = \"statistic\", values_to = \"value\") %&gt;% \n  ggplot(aes(x = buffer, y = value, lty = statistic)) + \n  geom_step(linewidth = 1.2, alpha = 0.8) + \n  labs(y = NULL, lty = NULL)\n\n\n\n\n\nThe effect of equivocal zones on model performance\n\n\n\nFigure @ref(fig:equivocal-zone-results) shows us that accuracy improves by a few percentage points but at the cost of nearly 10% of predictions being unusable! The value of such a compromise depends on how the model predictions will be used.\nThis analysis focused on using the predicted class probability to disqualify points, since this is a fundamental measure of uncertainty in classification models. A slightly better approach would be to use the standard error of the class probability. Since we used a Bayesian model, the probability estimates we found are actually the mean of the posterior predictive distribution. In other words, the Bayesian model gives us a distribution for the class probability. Measuring the standard deviation of this distribution gives us a standard error of prediction of the probability. In most cases, this value is directly related to the mean class probability. You might recall that, for a Bernoulli random variable with probability \\(p\\), the variance is \\(p(1-p)\\). Because of this relationship, the standard error is largest when the probability is 50%. Instead of assigning an equivocal result using the class probability, we could instead use a cutoff on the standard error of prediction.\nOne important aspect of the standard error of prediction is that it takes into account more than just the class probability. In cases where there is significant extrapolation or aberrant predictor values, the standard error might increase. The benefit of using the standard error of prediction is that it might also flag predictions that are problematic (as opposed to simply uncertain). One reason we used the Bayesian model is that it naturally estimates the standard error of prediction; not many models can calculate this. For our test set, using type = \"pred_int\" will produce upper and lower limits and the std_error adds a column for that quantity. For 80% intervals:\n\ntest_pred &lt;- \n  test_pred %&gt;% \n  bind_cols(\n    predict(two_class_mod, testing_set, type = \"pred_int\", std_error = TRUE)\n  )\n\nFor our example where the model and data are well behaved, Figure @ref(fig:std-errors) shows the standard error of prediction across the space:\n\n\n\n\nThe effect of the standard error of prediction overlaid with the test set data\n\n\n\nUsing the standard error as a measure to preclude samples from being predicted can also be applied to models with numeric outcomes. However, as shown in the next section, this may not always work."
  },
  {
    "objectID": "19-when-should-you-trust-predictions.html#applicability-domains",
    "href": "19-when-should-you-trust-predictions.html#applicability-domains",
    "title": "19  When Should You Trust Your Predictions?",
    "section": "\n19.2 Determining Model Applicability",
    "text": "19.2 Determining Model Applicability\nEquivocal zones try to measure the reliability of a prediction based on the model outputs. It may be that model statistics, such as the standard error of prediction, cannot measure the impact of extrapolation, and so we need another way to assess whether to trust a prediction and answer, “Is our model applicable for predicting a specific data point?” Let’s take the Chicago train data used extensively in Kuhn and Johnson (2019) and first shown in Section @ref(examples-of-tidyverse-syntax). The goal is to predict the number of customers entering the Clark and Lake train station each day.\nThe data set in the modeldata package (a tidymodels package with example data sets) has daily values between enero 22, 2001 and agosto 28, 2016. Let’s create a small test set using the last two weeks of the data:\n\n## loads both `Chicago` data set as well as `stations`\ndata(Chicago)\n\nChicago &lt;- Chicago %&gt;% select(ridership, date, one_of(stations))\n\nn &lt;- nrow(Chicago)\n\nChicago_train &lt;- Chicago %&gt;% slice(1:(n - 14))\nChicago_test  &lt;- Chicago %&gt;% slice((n - 13):n)\n\nThe main predictors are lagged ridership data at different train stations, including Clark and Lake, as well as the date. The ridership predictors are highly correlated with one another. In the following recipe, the date column is expanded into several new features, and the ridership predictors are represented using partial least squares (PLS) components. PLS (Geladi and Kowalski 1986), as we discussed in Section @ref(partial-least-squares), is a supervised version of principal component analysis where the new features have been decorrelated but are predictive of the outcome data.\nUsing the preprocessed data, we fit a standard linear model:\n\nbase_recipe &lt;-\n  recipe(ridership ~ ., data = Chicago_train) %&gt;%\n  # Create date features\n  step_date(date) %&gt;%\n  step_holiday(date, keep_original_cols = FALSE) %&gt;%\n  # Create dummy variables from factor columns\n  step_dummy(all_nominal()) %&gt;%\n  # Remove any columns with a single unique value\n  step_zv(all_predictors()) %&gt;%\n  step_normalize(!!!stations)%&gt;%\n  step_pls(!!!stations, num_comp = 10, outcome = vars(ridership))\n\nlm_spec &lt;-\n  linear_reg() %&gt;%\n  set_engine(\"lm\") \n\nlm_wflow &lt;-\n  workflow() %&gt;%\n  add_recipe(base_recipe) %&gt;%\n  add_model(lm_spec)\n\nset.seed(1902)\nlm_fit &lt;- fit(lm_wflow, data = Chicago_train)\n\nHow well do the data fit on the test set? We can predict() for the test set to find both predictions and prediction intervals:\n\nres_test &lt;-\n  predict(lm_fit, Chicago_test) %&gt;%\n  bind_cols(\n    predict(lm_fit, Chicago_test, type = \"pred_int\"),\n    Chicago_test\n  )\n\nres_test %&gt;% select(date, ridership, starts_with(\".pred\"))\n## # A tibble: 14 × 5\n##   date       ridership .pred .pred_lower .pred_upper\n##   &lt;date&gt;         &lt;dbl&gt; &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n## 1 2016-08-15     20.6  20.3        16.2         24.5\n## 2 2016-08-16     21.0  21.3        17.1         25.4\n## 3 2016-08-17     21.0  21.4        17.3         25.6\n## 4 2016-08-18     21.3  21.4        17.3         25.5\n## 5 2016-08-19     20.4  20.9        16.7         25.0\n## 6 2016-08-20      6.22  7.52        3.34        11.7\n## # ℹ 8 more rows\nres_test %&gt;% rmse(ridership, .pred)\n## # A tibble: 1 × 3\n##   .metric .estimator .estimate\n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n## 1 rmse    standard       0.865\n\nThese are fairly good results. Figure @ref(fig:chicago-2016) visualizes the predictions along with 95% prediction intervals.\n\n\n\n\nTwo weeks of 2016 predictions for the Chicago data along with 95% prediction intervals\n\n\n\nGiven the scale of the ridership numbers, these results look particularly good for such a simple model. If this model were deployed, how well would it have done a few years later in June 2020? The model successfully makes a prediction, as a predictive model almost always will when given input data:\n\nres_2020 &lt;-\n  predict(lm_fit, Chicago_2020) %&gt;%\n  bind_cols(\n    predict(lm_fit, Chicago_2020, type = \"pred_int\"),\n    Chicago_2020\n  ) \n\nres_2020 %&gt;% select(date, contains(\".pred\"))\n## # A tibble: 14 × 4\n##   date       .pred .pred_lower .pred_upper\n##   &lt;date&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n## 1 2020-06-01 20.1        15.9         24.3\n## 2 2020-06-02 21.4        17.2         25.6\n## 3 2020-06-03 21.5        17.3         25.6\n## 4 2020-06-04 21.3        17.1         25.4\n## 5 2020-06-05 20.7        16.6         24.9\n## 6 2020-06-06  9.04        4.88        13.2\n## # ℹ 8 more rows\n\nThe prediction intervals are about the same width, even though these data are well beyond the time period of the original training set. However, given the global pandemic in 2020, the performance on these data are abysmal:\n\nres_2020 %&gt;% select(date, ridership, starts_with(\".pred\"))\n## # A tibble: 14 × 5\n##   date       ridership .pred .pred_lower .pred_upper\n##   &lt;date&gt;         &lt;dbl&gt; &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n## 1 2020-06-01     0.002 20.1        15.9         24.3\n## 2 2020-06-02     0.005 21.4        17.2         25.6\n## 3 2020-06-03     0.566 21.5        17.3         25.6\n## 4 2020-06-04     1.66  21.3        17.1         25.4\n## 5 2020-06-05     1.95  20.7        16.6         24.9\n## 6 2020-06-06     1.08   9.04        4.88        13.2\n## # ℹ 8 more rows\nres_2020 %&gt;% rmse(ridership, .pred)\n## # A tibble: 1 × 3\n##   .metric .estimator .estimate\n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n## 1 rmse    standard        17.2\n\nYou can see this terrible model performance visually in Figure @ref(fig:chicago-2020).\n\n\n\n\nTwo weeks of 2020 predictions for the Chicago data along with 95% prediction intervals\n\n\n\nConfidence and prediction intervals for linear regression expand as the data become more and more removed from the center of the training set. However, that effect is not dramatic enough to flag these predictions as being poor.\n\nSometimes the statistics produced by models don’t measure the quality of predictions very well.\n\nThis situation can be avoided by having a secondary methodology that can quantify how applicable the model is for any new prediction (i.e., the model’s applicability domain). There are a variety of methods to compute an applicability domain model, such as Jaworska, Nikolova-Jeliazkova, and Aldenberg (2005) or Netzeva et al. (2005). The approach used in this chapter is a fairly simple unsupervised method that attempts to measure how much (if any) a new data point is beyond the training data.1\n\nThe idea is to accompany a prediction with a score that measures how similar the new point is to the training set.\n\nOne method that works well uses principal component analysis (PCA) on the numeric predictor values. We’ll illustrate the process by using only two of the predictors that correspond to ridership at different stations (California and Austin stations). The training set are shown in panel (a) in Figure @ref(fig:pca-reference-dist). The ridership data for these stations are highly correlated, and the two distributions shown in the scatter plot correspond to ridership on the weekends and week days.\nThe first step is to conduct PCA on the training data. The PCA scores for the training set are shown in panel (b) in Figure @ref(fig:pca-reference-dist). Next, using these results, we measure the distance of each training set point to the center of the PCA data (panel (c) of Figure @ref(fig:pca-reference-dist)). We can then use this reference distribution (panel (d) of Figure @ref(fig:pca-reference-dist)) to estimate how far a data point is from the mainstream of the training data.\n\n\n\n\nThe PCA reference distribution based on the training set\n\n\n\nFor a new sample, the PCA scores are computed along with the distance to the center of the training set.\nHowever, what does it mean when a new sample has a distance of X? Since the PCA components can have different ranges from data set to data set, there is no obvious limit to say that a distance is too large.\nOne approach is to treat the distances from the training set data as “normal.” For new samples, we can determine how the new distance compares to the range in the reference distribution (from the training set). A percentile can be computed for new samples that reflect how much of the training set is less extreme than the new samples.\n\nA percentile of 90% means that most of the training set data are closer to the data center than the new sample.\n\nThe plot in Figure @ref(fig:two-new-points) overlays a testing set sample (triangle and dashed line) and a 2020 sample (circle and solid line) with the PCA distances from the training set.\n\n\n\n\nThe reference distribution with two new points: one using the test set and one from the 2020 data\n\n\n\nThe test set point has a distance of 1.28. It is in the 51.8% percentile of the training set distribution, indicating that it is snugly within the mainstream of the training set.\nThe 2020 sample is farther from the center than any of the training set samples (with a percentile of 100%). This indicates the sample is very extreme and that its corresponding prediction would be a severe extrapolation (and probably should not be reported).\nThe applicable package can develop an applicability domain model using PCA. We’ll use the 20 lagged station ridership predictors as inputs into the PCA analysis. There is an additional argument called threshold that determines how many components are used in the distance calculation. For our example, we’ll use a large value that indicates we should use enough components to account for 99% of the variation in the ridership predictors:\n\nlibrary(applicable)\npca_stat &lt;- apd_pca(~ ., data = Chicago_train %&gt;% select(one_of(stations)), \n                    threshold = 0.99)\npca_stat\n## # Predictors:\n##    20\n## # Principal Components:\n##    9 components were needed\n##    to capture at least 99% of the\n##    total variation in the predictors.\n\nThe autoplot() method plots the reference distribution. It has an optional argument for which data to plot. We’ll add a value of distance to plot only the training set distance distribution. This code generates the plot in Figure @ref(fig:ap-autoplot):\n\nautoplot(pca_stat, distance) + labs(x = \"distance\")\n\n\n\n\n\nThe results of using the autoplot() method on an applicable object\n\n\n\nThe x-axis shows the values of the distance and the y-axis displays the distribution’s percentiles. For example, half of the training set samples had distances less than 3.7.\nTo compute the percentiles for new data, the score() function works in the same way as predict():\n\nscore(pca_stat, Chicago_test) %&gt;% select(starts_with(\"distance\"))\n## # A tibble: 14 × 2\n##   distance distance_pctl\n##      &lt;dbl&gt;         &lt;dbl&gt;\n## 1     4.88          66.7\n## 2     5.21          71.4\n## 3     5.19          71.1\n## 4     5.00          68.5\n## 5     4.36          59.3\n## 6     4.10          55.2\n## # ℹ 8 more rows\n\nThese seem fairly reasonable. For the 2020 data:\n\nscore(pca_stat, Chicago_2020) %&gt;% select(starts_with(\"distance\"))\n## # A tibble: 14 × 2\n##   distance distance_pctl\n##      &lt;dbl&gt;         &lt;dbl&gt;\n## 1     9.39          99.8\n## 2     9.40          99.8\n## 3     9.30          99.7\n## 4     9.30          99.7\n## 5     9.29          99.7\n## 6    10.1            1  \n## # ℹ 8 more rows\n\nThe 2020 distance values indicate that these predictor values are outside of the vast majority of data seen by the model at training time. These should be flagged so that the predictions are either not reported at all or viewed with skepticism.\n\nOne important aspect of this analysis concerns which predictors are used to develop the applicability domain model. In our analysis, we used the raw predictor columns. However, in building the model, PLS score features were used in their place. Which of these should apd_pca() use? The apd_pca() function can also take a recipe as the input (instead of a formula) so that the distances reflect the PLS scores instead of the individual predictor columns. You can evaluate both methods to understand which one gives more relevant results."
  },
  {
    "objectID": "19-when-should-you-trust-predictions.html#trust-summary",
    "href": "19-when-should-you-trust-predictions.html#trust-summary",
    "title": "19  When Should You Trust Your Predictions?",
    "section": "\n19.3 Chapter Summary",
    "text": "19.3 Chapter Summary\nThis chapter showed two methods for evaluating whether predictions should be reported to the consumers of models. Equivocal zones deal with outcomes/predictions and can be helpful when the amount of uncertainty in a prediction is too large.\nApplicability domain models deal with features/predictors and quantify the amount of extrapolation (if any) that occurs when making a prediction. This chapter showed a basic method using principal component analysis, although there are many other ways to measure applicability. The applicable package also contains specialized methods for data sets where all of the predictors are binary. This method computes similarity scores between training set data points to define the reference distribution.\n\n\n\n\nBartley, E AND Schliep, M . AND Hanks. 2019. “Identifying and Characterizing Extrapolation in Multivariate Response Data.” PLOS ONE 14 (December): 1–20.\n\n\nDanowski, T, J Aarons, J Hydovitz, and J Wingert. 1970. “Utility of Equivocal Glucose Tolerances.” Diabetes 19 (7): 524–26.\n\n\nGeladi, P., and B Kowalski. 1986. “Partial Least-Squares Regression: A Tutorial.” Analytica Chimica Acta 185: 1–17.\n\n\nJaworska, J, N Nikolova-Jeliazkova, and T Aldenberg. 2005. “QSAR Applicability Domain Estimation by Projection of the Training Set in Descriptor Space: A Review.” Alternatives to Laboratory Animals 33 (5): 445–59.\n\n\nKerleguer, A., J.-L. Koeck, M. Fabre, P. Gérôme, R. Teyssou, and V. Hervé. 2003. “Use of Equivocal Zone in Interpretation of Results of the Amplified Mycobacterium Tuberculosis Direct Test for Diagnosis of Tuberculosis.” Journal of Clinical Microbiology 41 (4): 1783–84.\n\n\nNetzeva, T, A Worth, T Aldenberg, R Benigni, M Cronin, P Gramatica, J Jaworska, et al. 2005. “Current Status of Methods for Defining the Applicability Domain of (Quantitative) Structure-Activity Relationships: The Report and Recommendations of ECVAM Workshop 52.” Alternatives to Laboratory Animals 33 (2): 155–73."
  },
  {
    "objectID": "19-when-should-you-trust-predictions.html#footnotes",
    "href": "19-when-should-you-trust-predictions.html#footnotes",
    "title": "19  ¿Cuándo debería confiar en sus predicciones?",
    "section": "",
    "text": "Bartley (2019) muestra otro método más y lo aplica a estudios ecológicos.↩︎"
  },
  {
    "objectID": "20-ensemble-models.html#data-stack",
    "href": "20-ensemble-models.html#data-stack",
    "title": "20  Ensembles of Models",
    "section": "\n20.1 Creating the Training Set for Stacking",
    "text": "20.1 Creating the Training Set for Stacking\nThe first step for building a stacked ensemble relies on the assessment set predictions from a resampling scheme with multiple splits. For each data point in the training set, stacking requires an out-of-sample prediction of some sort. For regression models, this is the predicted outcome. For classification models, the predicted classes or probabilities are available for use, although the latter contains more information than the hard class predictions. For a set of models, a data set is assembled where rows are the training set samples and columns are the out-of-sample predictions from the set of multiple models.\nBack in Chapter @ref(workflow-sets), we used five repeats of 10-fold cross-validation to resample the data. This resampling scheme generates five assessment set predictions for each training set sample. Multiple out-of-sample predictions can occur in several other resampling techniques (e.g., bootstrapping). For the purpose of stacking, any replicate predictions for a data point in the training set are averaged so that there is a single prediction per training set sample per candidate member.\n\nSimple validation sets can also be used with stacking since tidymodels considers this to be a single resample.\n\nFor the concrete example, the training set used for model stacking has columns for all of the candidate tuning parameter results. Table @ref(tab:ensemble-candidate-preds) presents the first six rows and selected columns.\n\n\n\nPredictions from candidate tuning parameter configurations.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnsemble Candidate Predictions\n\n\n\nSample #\nBagged Tree\nMARS 1\nMARS 2\nCubist 1\n...\nCubist 25\n...\n\n\n\n\n1\n25.18\n18.20\n17.15\n17.79\n\n17.82\n\n\n\n2\n5.18\n-1.77\n-0.72\n2.83\n\n3.87\n\n\n\n3\n9.71\n7.55\n5.91\n6.31\n\n8.60\n\n\n\n4\n25.21\n20.93\n21.35\n23.72\n\n21.61\n\n\n\n5\n6.33\n1.53\n0.27\n3.60\n\n4.57\n\n\n\n6\n7.88\n5.00\n1.74\n7.69\n\n7.55\n\n\n\n\n\n\nThere is a single column for the bagged tree model since it has no tuning parameters. Also, recall that MARS was tuned over a single parameter (the product degree) with two possible configurations, so this model is represented by two columns. Most of the other models have 25 corresponding columns, as shown for Cubist in this example.\n\nFor classification models, the candidate prediction columns would be predicted class probabilities. Since these columns add to one for each model, the probabilities for one of the classes can be left out.\n\nTo summarize where we are so far, the first step to stacking is to assemble the assessment set predictions for the training set from each candidate model. We can use these assessment set predictions to move forward and build a stacked ensemble.\nTo start ensembling with the stacks package, create an empty data stack using the stacks() function and then add candidate models. Recall that we used workflow sets to fit a wide variety of models to these data. We’ll use the racing results:\n\nrace_results\n## # A workflow set/tibble: 12 × 4\n##   wflow_id    info             option    result   \n##   &lt;chr&gt;       &lt;list&gt;           &lt;list&gt;    &lt;list&gt;   \n## 1 MARS        &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;race[+]&gt;\n## 2 CART        &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;race[+]&gt;\n## 3 CART_bagged &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;rsmp[+]&gt;\n## 4 RF          &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;race[+]&gt;\n## 5 boosting    &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;race[+]&gt;\n## 6 Cubist      &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;race[+]&gt;\n## # ℹ 6 more rows\n\nIn this case, our syntax is:\n\nlibrary(tidymodels)\nlibrary(stacks)\ntidymodels_prefer()\n\nconcrete_stack &lt;- \n  stacks() %&gt;% \n  add_candidates(race_results)\n\nconcrete_stack\n## # A data stack with 12 model definitions and 19 candidate members:\n## #   MARS: 1 model configuration\n## #   CART: 1 model configuration\n## #   CART_bagged: 1 model configuration\n## #   RF: 1 model configuration\n## #   boosting: 1 model configuration\n## #   Cubist: 1 model configuration\n## #   SVM_radial: 1 model configuration\n## #   SVM_poly: 1 model configuration\n## #   KNN: 3 model configurations\n## #   neural_network: 2 model configurations\n## #   full_quad_linear_reg: 5 model configurations\n## #   full_quad_KNN: 1 model configuration\n## # Outcome: compressive_strength (numeric)\n\nRecall that racing methods (Section @ref(racing)) are more efficient since they might not evaluate all configurations on all resamples. Stacking requires that all candidate members have the complete set of resamples. add_candidates() includes only the model configurations that have complete results.\n\nWhy use the racing results instead of the full set of candidate models contained in grid_results? Either can be used. We found better performance for these data using the racing results. This might be due to the racing method pre-selecting the best model(s) from the larger grid.\n\nIf we had not used the workflowsets package, objects from the tune and finetune could also be passed to add_candidates(). This can include both grid and iterative search objects."
  },
  {
    "objectID": "20-ensemble-models.html#blend-predictions",
    "href": "20-ensemble-models.html#blend-predictions",
    "title": "20  Ensembles of Models",
    "section": "\n20.2 Blend the Predictions",
    "text": "20.2 Blend the Predictions\nThe training set predictions and the corresponding observed outcome data are used to create a meta-learning model where the assessment set predictions are the predictors of the observed outcome data. Meta-learning can be accomplished using any model. The most commonly used model is a regularized generalized linear model, which encompasses linear, logistic, and multinomial models. Specifically, regularization via the lasso penalty (Tibshirani 1996), which uses shrinkage to pull points toward a central value, has several advantages:\n\nUsing the lasso penalty can remove candidates (and sometimes whole model types) from the ensemble.\nThe correlation between ensemble candidates tends to be very high, and regularization helps alleviate this issue.\n\nBreiman (1996b) also suggested that, when a linear model is used to blend the predictions, it might be helpful to constrain the blending coefficients to be nonnegative. We have generally found this to be good advice and it is the default for the stacks package (but it can be changed via an optional argument).\nSince our outcome is numeric, linear regression is used for the metamodel. Fitting the metamodel is as straightforward as using:\n\nset.seed(2001)\nens &lt;- blend_predictions(concrete_stack)\n\nThis evaluates the meta-learning model over a predefined grid of lasso penalty values and uses an internal resampling method to determine the best value. The autoplot() method, shown in Figure @ref(fig:stacking-autoplot), helps us understand if the default penalization method was sufficient:\n\nautoplot(ens)\n\n\n\n\n\nResults of using the autoplot() method on the blended stacks object\n\n\n\nThe top panel of Figure @ref(fig:stacking-autoplot) shows the average number of candidate ensemble members retained by the meta-learning model. We can see that the number of members is fairly constant and, as it increases, the RMSE also increases.\nThe default range may not have served us well here. To evaluate the meta-learning model with larger penalties, let’s pass an additional option:\n\nset.seed(2002)\nens &lt;- blend_predictions(concrete_stack, penalty = 10^seq(-2, -0.5, length = 20))\n\nNow, in Figure @ref(fig:stacking-autoplot-redo), we see a range where the ensemble model becomes worse than with our first blend (but not by much). The \\(R^2\\) values increase with more members and larger penalties.\n\nautoplot(ens)\n\n\n\n\n\nThe results of using the autoplot() method on the updated blended stacks object\n\n\n\nWhen blending predictions using a regression model, it is common to constrain the blending parameters to be nonnegative. For these data, this constraint has the effect of eliminating many of the potential ensemble members; even at fairly low penalties, the ensemble is limited to a fraction of the original eighteen.\nThe penalty value associated with the smallest RMSE was 0.036. Printing the object shows the details of the meta-learning model:\n\nens\n## ── A stacked ensemble model ─────────────────────────────────────\n## \n## \n## Out of 19 possible candidate members, the ensemble retained 4.\n## \n## Penalty: 0.0356969884682606.\n## \n## Mixture: 1.\n## \n## \n## The 4 highest weighted members are:\n## # A tibble: 4 × 3\n##   member                    type         weight\n##   &lt;chr&gt;                     &lt;chr&gt;         &lt;dbl&gt;\n## 1 boosting_1_04             boost_tree   0.761 \n## 2 neural_network_1_12       mlp          0.127 \n## 3 Cubist_1_25               cubist_rules 0.102 \n## 4 full_quad_linear_reg_1_16 linear_reg   0.0325\n## \n## Members have not yet been fitted with `fit_members()`.\n\nThe regularized linear regression meta-learning model contained four blending coefficients across four types of models. The autoplot() method can be used again to show the contributions of each model type, to produce Figure @ref(fig:blending-weights).\n\nautoplot(ens, \"weights\") +\n  geom_text(aes(x = weight + 0.01, label = model), hjust = 0) + \n  theme(legend.position = \"none\") +\n  lims(x = c(-0.01, 0.8))\n\n\n\n\n\nBlending coefficients for the stacking ensemble\n\n\n\nThe boosted tree and neural network models have the largest contributions to the ensemble. For this ensemble, the outcome is predicted with the equation:\n\n\\[\\begin{align}\n\\text{ensemble prediction} &=-0.76 \\\\\n    +&0.76 \\times \\text{boost tree prediction} \\notag \\\\\n    +&0.13 \\times \\text{mlp prediction} \\notag \\\\\n    +&0.1 \\times \\text{cubist rules prediction} \\notag \\\\\n    +&0.032 \\times \\text{linear reg prediction} \\notag\n\\end{align}\\]\n\nwhere the predictors in the equation are the predicted compressive strength values from those models."
  },
  {
    "objectID": "20-ensemble-models.html#fit-members",
    "href": "20-ensemble-models.html#fit-members",
    "title": "20  Ensembles of Models",
    "section": "\n20.3 Fit the Member Models",
    "text": "20.3 Fit the Member Models\nThe ensemble contains four candidate members, and we now know how their predictions can be blended into a final prediction for the ensemble. However, these individual model fits have not yet been created. To be able to use the stacking model, four additional model fits are required. These use the entire training set with the original predictors.\nThe four models to be fit are:\n\n\nboosting: number of trees = 1957, minimal node size = 8, tree depth = 7, learning rate = 0.0756, minimum loss reduction = 1.45e-07, and proportion of observations sampled = 0.679\nCubist: number of committees = 98 and number of nearest neighbors = 2\nlinear regression (quadratic features): amount of regularization = 6.28e-09 and proportion of lasso penalty = 0.636\nneural network: number of hidden units = 22, amount of regularization = 2.08e-10, and number of epochs = 92\n\n\nThe stacks package has a function, fit_members(), that trains and returns these models:\n\nens &lt;- fit_members(ens)\n\nThis updates the stacking object with the fitted workflow objects for each member. At this point, the stacking model can be used for prediction."
  },
  {
    "objectID": "20-ensemble-models.html#test-set-results",
    "href": "20-ensemble-models.html#test-set-results",
    "title": "20  Ensembles of Models",
    "section": "\n20.4 Test Set Results",
    "text": "20.4 Test Set Results\nSince the blending process used resampling, we can estimate that the ensemble with five members had an estimated RMSE of 4.09. Recall from Chapter 15 that the best boosted tree had a test set RMSE of 3.46. How will the ensemble model compare on the test set? We can predict() to find out:\n\nreg_metrics &lt;- metric_set(rmse, rsq)\nens_test_pred &lt;- \n  predict(ens, concrete_test) %&gt;% \n  bind_cols(concrete_test)\n\nens_test_pred %&gt;% \n  reg_metrics(compressive_strength, .pred)\n## # A tibble: 2 × 3\n##   .metric .estimator .estimate\n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n## 1 rmse    standard       3.37 \n## 2 rsq     standard       0.956\n\nThis is moderately better than our best single model. It is fairly common for stacking to produce incremental benefits when compared to the best single model."
  },
  {
    "objectID": "20-ensemble-models.html#ensembles-summary",
    "href": "20-ensemble-models.html#ensembles-summary",
    "title": "20  Ensembles of Models",
    "section": "\n20.5 Chapter Summary",
    "text": "20.5 Chapter Summary\nThis chapter demonstrated how to combine different models into an ensemble for better predictive performance. The process of creating the ensemble can automatically eliminate candidate models to find a small subset that improves performance. The stacks package has a fluent interface for combining resampling and tuning results into a meta-model.\n\n\n\n\nBreiman, L. 1996a. “Bagging Predictors.” Machine Learning 24 (2): 123–40.\n\n\n———. 1996b. “Stacked Regressions.” Machine Learning 24 (1): 49–64.\n\n\n———. 2001. “Random Forests.” Machine Learning 45 (1): 5–32.\n\n\nFreund, Y, and R Schapire. 1997. “A Decision-Theoretic Generalization of on-Line Learning and an Application to Boosting.” Journal of Computer and System Sciences 55 (1): 119–39.\n\n\nHo, T. 1995. “Random Decision Forests.” In Proceedings of 3rd International Conference on Document Analysis and Recognition, 1:278–82. IEEE.\n\n\nTibshirani, Robert. 1996. “Regression Shrinkage and Selection via the Lasso.” Journal of the Royal Statistical Society. Series B (Methodological) 58 (1): 267–88. http://www.jstor.org/stable/2346178.\n\n\nWolpert, D. 1992. “Stacked Generalization.” Neural Networks 5 (2): 241–59."
  },
  {
    "objectID": "21-inferential-analysis.html#inference-for-count-data",
    "href": "21-inferential-analysis.html#inference-for-count-data",
    "title": "21  Inferential Analysis",
    "section": "\n21.1 Inference for Count Data",
    "text": "21.1 Inference for Count Data\nTo understand how tidymodels packages can be used for inferential modeling, let’s focus on an example with count data. We’ll use biochemistry publication data from the pscl package. These data consist of information on 915 Ph.D. biochemistry graduates and tries to explain factors that impact their academic productivity (measured via number or count of articles published within three years). The predictors include the gender of the graduate, their marital status, the number of children of the graduate that are at least five years old, the prestige of their department, and the number of articles produced by their mentor in the same time period. The data reflect biochemistry doctorates who finished their education between 1956 and 1963. The data are a somewhat biased sample of all of the biochemistry doctorates given during this period (based on completeness of information).\n\nRecall that in Chapter 19 we asked the question “Is our model applicable for predicting a specific data point?” It is very important to define what populations an inferential analysis applies to. For these data, the results would likely apply to biochemistry doctorates given around the time frame that the data were collected. Does it also apply to other chemistry doctorate types (e.g., medicinal chemistry, etc)? These are important questions to address (and document) when conducting inferential analyses.\n\nA plot of the data shown in Figure 21.1 indicates that many graduates did not publish any articles in this time and that the outcome follows a right-skewed distribution:\n\nlibrary(tidymodels)\ntidymodels_prefer()\n\ndata(\"bioChemists\", package = \"pscl\")\n\nggplot(bioChemists, aes(x = art)) + \n  geom_histogram(binwidth = 1, color = \"white\") + \n  labs(x = \"Number of articles within 3y of graduation\")\n\n\n\n\n\nFigure 21.1: Distribution of the number of articles written within 3 years of graduation\n\n\n\nSince the outcome data are counts, the most common distribution assumption to make is that the outcome has a Poisson distribution. This chapter will use these data for several types of analyses."
  },
  {
    "objectID": "21-inferential-analysis.html#comparisons-with-two-sample-tests",
    "href": "21-inferential-analysis.html#comparisons-with-two-sample-tests",
    "title": "21  Inferential Analysis",
    "section": "\n21.2 Comparisons with Two-Sample Tests",
    "text": "21.2 Comparisons with Two-Sample Tests\nWe can start with hypothesis testing. The original author’s goal with this data set on biochemistry publication data was to determine if there is a difference in publications between men and women (Long 1992). The data from the study show:\n\nbioChemists %&gt;% \n  group_by(fem) %&gt;% \n  summarize(counts = sum(art), n = length(art))\n## # A tibble: 2 × 3\n##   fem   counts     n\n##   &lt;fct&gt;  &lt;int&gt; &lt;int&gt;\n## 1 Men      930   494\n## 2 Women    619   421\n\nThere were many more publications by men, although there were also more men in the data. The simplest approach to analyzing these data would be to do a two-sample comparison using the poisson.test() function in the stats package. It requires the counts for one or two groups.\nFor our application, the hypotheses to compare the two sexes are:\n\\[\\begin{align}\nH_0&: \\lambda_m = \\lambda_f \\notag \\\\\nH_a&: \\lambda_m \\ne \\lambda_f \\notag\n\\end{align}\\]\nwhere the \\(\\lambda\\) values are the rates of publications (over the same time period).\nA basic application of the test is:1\n\npoisson.test(c(930, 619), T = 3)\n## \n##  Comparison of Poisson rates\n## \n## data:  c(930, 619) time base: 3\n## count1 = 930, expected count1 = 774, p-value = 3e-15\n## alternative hypothesis: true rate ratio is not equal to 1\n## 95 percent confidence interval:\n##  1.356 1.666\n## sample estimates:\n## rate ratio \n##      1.502\n\nThe function reports a p-value as well as a confidence interval for the ratio of the publication rates. The results indicate that the observed difference is greater than the experiential noise and favors \\(H_a\\).\nOne issue with using this function is that the results come back as an htest object. While this type of object has a well-defined structure, it can be difficult to consume for subsequent operations such as reporting or visualizations. The most impactful tool that tidymodels offers for inferential models is the tidy() functions in the broom package. As previously seen, this function makes a well-formed, predictably named tibble from the object. We can tidy() the results of our two-sample comparison test:\n\npoisson.test(c(930, 619)) %&gt;% \n  tidy()\n## # A tibble: 1 × 8\n##   estimate statistic  p.value parameter conf.low conf.high method        alternative\n##      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;      \n## 1     1.50       930 2.73e-15      774.     1.36      1.67 Comparison o… two.sided\n\n\nBetween the broom and broom.mixed packages, there are tidy() methods for more than 150 models.\n\nWhile the Poisson distribution is reasonable, we might also want to assess using fewer distributional assumptions. Two methods that might be helpful are the bootstrap and permutation tests (Davison and Hinkley 1997).\nThe infer package, part of the tidymodels framework, is a powerful and intuitive tool for hypothesis testing (Ismay and Kim 2021). Its syntax is concise and designed for nonstatisticians.\nFirst, we specify() that we will use the difference in the mean number of articles between the sexes and then calculate() the statistic from the data. Recall that the maximum likelihood estimator for the Poisson mean is the sample mean. The hypotheses tested here are the same as the previous test (but are conducted using a different testing procedure).\nWith infer, we specify the outcome and covariate, then state the statistic of interest:\n\nlibrary(infer)\n\nobserved &lt;- \n  bioChemists %&gt;%\n  specify(art ~ fem) %&gt;%\n  calculate(stat = \"diff in means\", order = c(\"Men\", \"Women\"))\nobserved\n## Response: art (numeric)\n## Explanatory: fem (factor)\n## # A tibble: 1 × 1\n##    stat\n##   &lt;dbl&gt;\n## 1 0.412\n\nFrom here, we compute a confidence interval for this mean by creating the bootstrap distribution via generate(); the same statistic is computed for each resampled version of the data:\n\nset.seed(2101)\nbootstrapped &lt;- \n  bioChemists %&gt;%\n  specify(art ~ fem)  %&gt;%\n  generate(reps = 2000, type = \"bootstrap\") %&gt;%\n  calculate(stat = \"diff in means\", order = c(\"Men\", \"Women\"))\nbootstrapped\n## Response: art (numeric)\n## Explanatory: fem (factor)\n## # A tibble: 2,000 × 2\n##   replicate  stat\n##       &lt;int&gt; &lt;dbl&gt;\n## 1         1 0.467\n## 2         2 0.107\n## 3         3 0.467\n## 4         4 0.308\n## 5         5 0.369\n## 6         6 0.428\n## # ℹ 1,994 more rows\n\nA percentile interval is calculated using:\n\npercentile_ci &lt;- get_ci(bootstrapped)\npercentile_ci\n## # A tibble: 1 × 2\n##   lower_ci upper_ci\n##      &lt;dbl&gt;    &lt;dbl&gt;\n## 1    0.158    0.653\n\nThe infer package has a high-level API for showing the analysis results, as shown in Figure 21.2.\n\nvisualize(bootstrapped) +\n    shade_confidence_interval(endpoints = percentile_ci)\n\n\n\n\n\nFigure 21.2: The bootstrap distribution of the difference in means. The highlighted region is the confidence interval.\n\n\n\nSince the interval visualized in in Figure 21.2 does not include zero, these results indicate that men have published more articles than women.\nIf we require a p-value, the infer package can compute the value via a permutation test, shown in the following code. The syntax is very similar to the bootstrapping code we used earlier. We add a hypothesize() verb to state the type of assumption to test and the generate() call contains an option to shuffle the data.\n\nset.seed(2102)\npermuted &lt;- \n  bioChemists %&gt;%\n  specify(art ~ fem)  %&gt;%\n  hypothesize(null = \"independence\") %&gt;%\n  generate(reps = 2000, type = \"permute\") %&gt;%\n  calculate(stat = \"diff in means\", order = c(\"Men\", \"Women\"))\npermuted\n## Response: art (numeric)\n## Explanatory: fem (factor)\n## Null Hypothesis: independence\n## # A tibble: 2,000 × 2\n##   replicate     stat\n##       &lt;int&gt;    &lt;dbl&gt;\n## 1         1  0.201  \n## 2         2 -0.133  \n## 3         3  0.109  \n## 4         4 -0.195  \n## 5         5 -0.00128\n## 6         6 -0.102  \n## # ℹ 1,994 more rows\n\nThe following visualization code is also very similar to the bootstrap approach. This code generates Figure 21.3 where the vertical line signifies the observed value:\n\nvisualize(permuted) +\n    shade_p_value(obs_stat = observed, direction = \"two-sided\")\n\n\n\n\n\nFigure 21.3: Empirical distribution of the test statistic under the null hypothesis. The vertical line indicates the observed test statistic.\n\n\n\nThe actual p-value is:\n\npermuted %&gt;%\n  get_p_value(obs_stat = observed, direction = \"two-sided\")\n## # A tibble: 1 × 1\n##   p_value\n##     &lt;dbl&gt;\n## 1   0.002\n\nThe vertical line representing the null hypothesis in Figure 21.3 is far away from the permutation distribution. This means, if in fact the null hypothesis were true, the likelihood is exceedingly small of observing data at least as extreme as what is at hand.\nThe two-sample tests shown in this section are probably suboptimal because they do not account for other factors that might explain the observed relationship between publication rate and sex. Let’s move to a more complex model that can consider additional covariates."
  },
  {
    "objectID": "21-inferential-analysis.html#log-linear-models",
    "href": "21-inferential-analysis.html#log-linear-models",
    "title": "21  Inferential Analysis",
    "section": "\n21.3 Log-Linear Models",
    "text": "21.3 Log-Linear Models\nThe focus of the rest of this chapter will be on a generalized linear model (Dobson 1999) where we assume the counts follow a Poisson distribution. For this model, the covariates/predictors enter the model in a log-linear fashion:\n\\[\n\\log(\\lambda) = \\beta_0 + \\beta_1x_1 + \\ldots + \\beta_px_p\n\\]\nwhere \\(\\lambda\\) is the expected value of the counts.\nLet’s fit a simple model that contains all of the predictor columns. The poissonreg package, a parsnip extension package in tidymodels, will fit this model specification:\n\nlibrary(poissonreg)\n\n# default engine is 'glm'\nlog_lin_spec &lt;- poisson_reg()\n\nlog_lin_fit &lt;- \n  log_lin_spec %&gt;% \n  fit(art ~ ., data = bioChemists)\nlog_lin_fit\n## parsnip model object\n## \n## \n## Call:  stats::glm(formula = art ~ ., family = stats::poisson, data = data)\n## \n## Coefficients:\n## (Intercept)     femWomen   marMarried         kid5          phd         ment  \n##      0.3046      -0.2246       0.1552      -0.1849       0.0128       0.0255  \n## \n## Degrees of Freedom: 914 Total (i.e. Null);  909 Residual\n## Null Deviance:       1820 \n## Residual Deviance: 1630  AIC: 3310\n\nThe tidy() method succinctly summarizes the coefficients for the model (along with 90% confidence intervals):\n\ntidy(log_lin_fit, conf.int = TRUE, conf.level = 0.90)\n## # A tibble: 6 × 7\n##   term        estimate std.error statistic  p.value conf.low conf.high\n##   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n## 1 (Intercept)   0.305    0.103       2.96  3.10e- 3   0.134     0.473 \n## 2 femWomen     -0.225    0.0546     -4.11  3.92e- 5  -0.315    -0.135 \n## 3 marMarried    0.155    0.0614      2.53  1.14e- 2   0.0545    0.256 \n## 4 kid5         -0.185    0.0401     -4.61  4.08e- 6  -0.251    -0.119 \n## 5 phd           0.0128   0.0264      0.486 6.27e- 1  -0.0305    0.0563\n## 6 ment          0.0255   0.00201    12.7   3.89e-37   0.0222    0.0288\n\nIn this output, the p-values correspond to separate hypothesis tests for each parameter:\n\\[\\begin{align}\nH_0&: \\beta_j = 0 \\notag \\\\\nH_a&: \\beta_j \\ne 0 \\notag\n\\end{align}\\]\nfor each of the model parameters. Looking at these results, phd (the prestige of their department) may not have any relationship with the outcome.\nWhile the Poisson distribution is the routine assumption for data like these, it may be beneficial to conduct a rough check of the model assumptions by fitting the models without using the Poisson likelihood to calculate the confidence intervals. The rsample package has a convenience function to compute bootstrap confidence intervals for lm() and glm() models. We can use this function, while explicitly declaring family = poisson, to compute a large number of model fits. By default, we compute a 90% confidence bootstrap-t interval (percentile intervals are also available):\n\nset.seed(2103)\nglm_boot &lt;- \n  reg_intervals(art ~ ., data = bioChemists, model_fn = \"glm\", family = poisson)\nglm_boot\n## # A tibble: 5 × 6\n##   term          .lower .estimate  .upper .alpha .method  \n##   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    \n## 1 femWomen   -0.358      -0.226  -0.0856   0.05 student-t\n## 2 kid5       -0.298      -0.184  -0.0789   0.05 student-t\n## 3 marMarried  0.000264    0.155   0.317    0.05 student-t\n## 4 ment        0.0182      0.0256  0.0322   0.05 student-t\n## 5 phd        -0.0707      0.0130  0.102    0.05 student-t\n\n\nWhen we compare these results (in Figure 21.4) to the purely parametric results from glm(), the bootstrap intervals are somewhat wider. If the data were truly Poisson, these intervals would have more similar widths.\n\n\n\n\n\nFigure 21.4: Two types of confidence intervals for the Poisson regression model\n\n\n\nDetermining which predictors to include in the model is a difficult problem. One approach is to conduct likelihood ratio tests (LRT) (McCullagh and Nelder 1989) between nested models. Based on the confidence intervals, we have evidence that a simpler model without phd may be sufficient. Let’s fit a smaller model, then conduct a statistical test:\n\\[\\begin{align}\nH_0&: \\beta_{phd} = 0 \\notag \\\\\nH_a&: \\beta_{phd} \\ne 0 \\notag\n\\end{align}\\]\nThis hypothesis was previously tested when we showed the tidied results for log_lin_fit. That particular approach used results from a single model fit via a Wald statistic (i.e., the parameter divided by its standard error). For that approach, the p-value was 0.63. We can tidy the results for the LRT to get the p-value:\n\nlog_lin_reduced &lt;- \n  log_lin_spec %&gt;% \n  fit(art ~ ment + kid5 + fem + mar, data = bioChemists)\n\nanova(\n  extract_fit_engine(log_lin_reduced),\n  extract_fit_engine(log_lin_fit),\n  test = \"LRT\"\n) %&gt;%\n  tidy()\n## # A tibble: 2 × 6\n##   term                          df.residual residual.deviance    df deviance p.value\n##   &lt;chr&gt;                               &lt;dbl&gt;             &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n## 1 art ~ ment + kid5 + fem + mar         910             1635.    NA   NA      NA    \n## 2 art ~ fem + mar + kid5 + phd…         909             1634.     1    0.236   0.627\n\nThe results are the same and, based on these and the confidence interval for this parameter, we’ll exclude phd from further analyses since it does not appear to be associated with the outcome."
  },
  {
    "objectID": "21-inferential-analysis.html#a-more-complex-model",
    "href": "21-inferential-analysis.html#a-more-complex-model",
    "title": "21  Inferential Analysis",
    "section": "\n21.4 A More Complex Model",
    "text": "21.4 A More Complex Model\nWe can move into even more complex models within our tidymodels approach. For count data, there are occasions where the number of zero counts is larger than what a simple Poisson distribution would prescribe. A more complex model appropriate for this situation is the zero-inflated Poisson (ZIP) model; see Mullahy (1986), Lambert (1992), and Zeileis, Kleiber, and Jackman (2008). Here, there are two sets of covariates: one for the count data and others that affect the probability (denoted as \\(\\pi\\)) of zeros. The equation for the mean \\(\\lambda\\) is:\n\\[\\lambda = 0 \\pi + (1 - \\pi) \\lambda_{nz}\\]\nwhere\n\\[\\begin{align}\n\\log(\\lambda_{nz}) &= \\beta_0 + \\beta_1x_1 + \\ldots + \\beta_px_p \\notag \\\\\n\\log\\left(\\frac{\\pi}{1-\\pi}\\right) &= \\gamma_0 + \\gamma_1z_1 + \\ldots + \\gamma_qz_q \\notag\n\\end{align}\\]\nand the \\(x\\) covariates affect the count values while the \\(z\\) covariates influence the probability of a zero. The two sets of predictors do not need to be mutually exclusive.\nWe’ll fit a model with a full set of \\(z\\) covariates:\n\nzero_inflated_spec &lt;- poisson_reg() %&gt;% set_engine(\"zeroinfl\")\n\nzero_inflated_fit &lt;- \n  zero_inflated_spec %&gt;% \n  fit(art ~ fem + mar + kid5 + ment | fem + mar + kid5 + phd + ment,\n      data = bioChemists)\n\nzero_inflated_fit\n## parsnip model object\n## \n## \n## Call:\n## pscl::zeroinfl(formula = art ~ fem + mar + kid5 + ment | fem + mar + kid5 + \n##     phd + ment, data = data)\n## \n## Count model coefficients (poisson with log link):\n## (Intercept)     femWomen   marMarried         kid5         ment  \n##       0.621       -0.209        0.105       -0.143        0.018  \n## \n## Zero-inflation model coefficients (binomial with logit link):\n## (Intercept)     femWomen   marMarried         kid5          phd         ment  \n##     -0.6086       0.1093      -0.3529       0.2195       0.0124      -0.1351\n\nSince the coefficients for this model are also estimated using maximum likelihood, let’s try to use another likelihood ratio test to understand if the new model terms are helpful. We will simultaneously test that:\n\\[\\begin{align}\nH_0&: \\gamma_1 = 0, \\gamma_2 = 0, \\cdots, \\gamma_5 = 0 \\notag \\\\\nH_a&: \\text{at least one } \\gamma \\ne 0  \\notag\n\\end{align}\\]\nLet’s try ANOVA again:\n\nanova(\n  extract_fit_engine(zero_inflated_fit),\n  extract_fit_engine(log_lin_reduced),\n  test = \"LRT\"\n) %&gt;%\n  tidy()\n## Error in UseMethod(\"anova\"): no applicable method for 'anova' applied to an object of class \"zeroinfl\"\n\nAn anova() method isn’t implemented for zeroinfl objects!\nAn alternative is to use an information criterion statistic, such as the Akaike information criterion (AIC) (Claeskens 2016). This computes the log-likelihood (from the training set) and penalizes that value based on the training set size and the number of model parameters. In R’s parameterization, smaller AIC values are better. In this case, we are not conducting a formal statistical test but estimating the ability of the data to fit the data.\nThe results indicate that the ZIP model is preferable:\n\nzero_inflated_fit %&gt;% extract_fit_engine() %&gt;% AIC()\n## [1] 3232\nlog_lin_reduced   %&gt;% extract_fit_engine() %&gt;% AIC()\n## [1] 3312\n\nHowever, it’s hard to contextualize this pair of single values and assess how different they actually are. To solve this problem, we’ll resample a large number of each of these two models. From these, we can compute the AIC values for each and determine how often the results favor the ZIP model. Basically, we will be characterizing the uncertainty of the AIC statistics to gauge their difference relative to the noise in the data.\nWe’ll also compute more bootstrap confidence intervals for the parameters in a bit so we specify the apparent = TRUE option when creating the bootstrap samples. This is required for some types of intervals.\nFirst, we create the 4,000 model fits:\n\nzip_form &lt;- art ~ fem + mar + kid5 + ment | fem + mar + kid5 + phd + ment\nglm_form &lt;- art ~ fem + mar + kid5 + ment\n\nset.seed(2104)\nbootstrap_models &lt;-\n  bootstraps(bioChemists, times = 2000, apparent = TRUE) %&gt;%\n  mutate(\n    glm = map(splits, ~ fit(log_lin_spec,       glm_form, data = analysis(.x))),\n    zip = map(splits, ~ fit(zero_inflated_spec, zip_form, data = analysis(.x)))\n  )\nbootstrap_models\n## # Bootstrap sampling with apparent sample \n## # A tibble: 2,001 × 4\n##   splits            id            glm      zip     \n##   &lt;list&gt;            &lt;chr&gt;         &lt;list&gt;   &lt;list&gt;  \n## 1 &lt;split [915/355]&gt; Bootstrap0001 &lt;fit[+]&gt; &lt;fit[+]&gt;\n## 2 &lt;split [915/333]&gt; Bootstrap0002 &lt;fit[+]&gt; &lt;fit[+]&gt;\n## 3 &lt;split [915/337]&gt; Bootstrap0003 &lt;fit[+]&gt; &lt;fit[+]&gt;\n## 4 &lt;split [915/344]&gt; Bootstrap0004 &lt;fit[+]&gt; &lt;fit[+]&gt;\n## 5 &lt;split [915/351]&gt; Bootstrap0005 &lt;fit[+]&gt; &lt;fit[+]&gt;\n## 6 &lt;split [915/354]&gt; Bootstrap0006 &lt;fit[+]&gt; &lt;fit[+]&gt;\n## # ℹ 1,995 more rows\n\nNow we can extract the model fits and their corresponding AIC values:\n\nbootstrap_models &lt;-\n  bootstrap_models %&gt;%\n  mutate(\n    glm_aic = map_dbl(glm, ~ extract_fit_engine(.x) %&gt;% AIC()),\n    zip_aic = map_dbl(zip, ~ extract_fit_engine(.x) %&gt;% AIC())\n  )\nmean(bootstrap_models$zip_aic &lt; bootstrap_models$glm_aic)\n## [1] 1\n\nIt seems definitive from these results that accounting for the excessive number of zero counts is a good idea.\n\nWe could have used fit_resamples() or a workflow set to conduct these computations. In this section, we used mutate() and map() to compute the models to demonstrate how one might use tidymodels tools for models that are not supported by one of the parsnip packages.\n\nSince we have computed the resampled model fits, let’s create bootstrap intervals for the zero probability model coefficients (i.e., the \\(\\gamma_j\\)). We can extract these with the tidy() method and use the type = \"zero\" option to obtain these estimates:\n\nbootstrap_models &lt;-\n  bootstrap_models %&gt;%\n  mutate(zero_coefs  = map(zip, ~ tidy(.x, type = \"zero\")))\n\n# One example:\nbootstrap_models$zero_coefs[[1]]\n## # A tibble: 6 × 6\n##   term        type  estimate std.error statistic   p.value\n##   &lt;chr&gt;       &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n## 1 (Intercept) zero   -0.128     0.497     -0.257 0.797    \n## 2 femWomen    zero   -0.0764    0.319     -0.240 0.811    \n## 3 marMarried  zero   -0.112     0.365     -0.307 0.759    \n## 4 kid5        zero    0.270     0.186      1.45  0.147    \n## 5 phd         zero   -0.178     0.132     -1.35  0.177    \n## 6 ment        zero   -0.123     0.0315    -3.91  0.0000935\n\nIt’s a good idea to visualize the bootstrap distributions of the coefficients, as in Figure 21.5.\n\nbootstrap_models %&gt;% \n  unnest(zero_coefs) %&gt;% \n  ggplot(aes(x = estimate)) +\n  geom_histogram(bins = 25, color = \"white\") + \n  facet_wrap(~ term, scales = \"free_x\") + \n  geom_vline(xintercept = 0, lty = 2, color = \"gray70\")\n\n\n\n\n\nFigure 21.5: Bootstrap distributions of the ZIP model coefficients. The vertical lines indicate the observed estimates.\n\n\n\nOne of the covariates (ment) that appears to be important has a very skewed distribution. The extra space in some of the facets indicates there are some outliers in the estimates. This might occur when models did not converge; those results probably should be excluded from the resamples. For the results visualized in Figure 21.5, the outliers are due only to extreme parameter estimates; all of the models converged.\nThe rsample package contains a set of functions named int_*() that compute different types of bootstrap intervals. Since the tidy() method contains standard error estimates, the bootstrap-t intervals can be computed. We’ll also compute the standard percentile intervals. By default, 90% confidence intervals are computed.\n\nbootstrap_models %&gt;% int_pctl(zero_coefs)\n## # A tibble: 6 × 6\n##   term        .lower .estimate  .upper .alpha .method   \n##   &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;     \n## 1 (Intercept) -1.75    -0.621   0.423    0.05 percentile\n## 2 femWomen    -0.521    0.115   0.818    0.05 percentile\n## 3 kid5        -0.327    0.218   0.677    0.05 percentile\n## 4 marMarried  -1.20    -0.381   0.362    0.05 percentile\n## 5 ment        -0.401   -0.162  -0.0513   0.05 percentile\n## 6 phd         -0.276    0.0220  0.327    0.05 percentile\nbootstrap_models %&gt;% int_t(zero_coefs)\n## # A tibble: 6 × 6\n##   term        .lower .estimate  .upper .alpha .method  \n##   &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    \n## 1 (Intercept) -1.61    -0.621   0.321    0.05 student-t\n## 2 femWomen    -0.482    0.115   0.671    0.05 student-t\n## 3 kid5        -0.211    0.218   0.599    0.05 student-t\n## 4 marMarried  -0.988   -0.381   0.290    0.05 student-t\n## 5 ment        -0.324   -0.162  -0.0275   0.05 student-t\n## 6 phd         -0.274    0.0220  0.291    0.05 student-t\n\nFrom these results, we can get a good idea of which predictor(s) to include in the zero count probability model. It may be sensible to refit a smaller model to assess if the bootstrap distribution for ment is still skewed."
  },
  {
    "objectID": "21-inferential-analysis.html#inference-options",
    "href": "21-inferential-analysis.html#inference-options",
    "title": "21  Inferential Analysis",
    "section": "\n21.5 More Inferential Analysis",
    "text": "21.5 More Inferential Analysis\nThis chapter demonstrated just a small subset of what is available for inferential analysis in tidymodels and has focused on resampling and frequentist methods. Arguably, Bayesian analysis is a very effective and often superior approach for inference. A variety of Bayesian models are available via parsnip. Additionally, the multilevelmod package enables users to fit hierarchical Bayesian and non-Bayesian models (e.g., mixed models). The broom.mixed and tidybayes packages are excellent tools for extracting data for plots and summaries. Finally, for data sets with a single hierarchy, such as simple longitudinal or repeated measures data, rsample’s group_vfold_cv() function facilitates straightforward out-of-sample characterizations of model performance."
  },
  {
    "objectID": "21-inferential-analysis.html#inference-summary",
    "href": "21-inferential-analysis.html#inference-summary",
    "title": "21  Inferential Analysis",
    "section": "\n21.6 Chapter Summary",
    "text": "21.6 Chapter Summary\nThe tidymodels framework is for more than predictive modeling alone. Packages and functions from tidymodels can be used for hypothesis testing, as well as fitting and assessing inferential models. The tidymodels framework provides support for working with non-tidymodels R models, and can help assess the statistical qualities of your models.\n\n\n\n\nClaeskens, G. 2016. “Statistical Model Choice.” Annual Review of Statistics and Its Application 3: 233–56.\n\n\nDavison, A, and D Hinkley. 1997. Bootstrap Methods and Their Application. Vol. 1. Cambridge university press.\n\n\nDobson, A. 1999. An Introduction to Generalized Linear Models. Chapman; Hall: Boca Raton.\n\n\nIsmay, C, and A Kim. 2021. Statistical Inference via Data Science: A ModernDive into r and the Tidyverse. Chapman; Hall/CRC. https://moderndive.com/.\n\n\nLambert, D. 1992. “Zero-Inflated Poisson Regression, with an Application to Defects in Manufacturing.” Technometrics 34 (1): 1–14.\n\n\nLong, J. 1992. “Measures of Sex Differences in Scientific Productivity*.” Social Forces 71 (1): 159–78.\n\n\nMcCullagh, P, and J Nelder. 1989. Generalized Linear Models. London: Chapman; Hall.\n\n\nMullahy, J. 1986. “Specification and Testing of Some Modified Count Data Models.” Journal of Econometrics 33 (3): 341–65.\n\n\nWasserstein, R, and N Lazar. 2016. “The ASA Statement on p-Values: Context, Process, and Purpose.” The American Statistician 70 (2): 129–33.\n\n\nZeileis, A, C Kleiber, and S Jackman. 2008. “Regression Models for Count Data in R.” Journal of Statistical Software 27 (8): 1–25. https://www.jstatsoft.org/v027/i08."
  },
  {
    "objectID": "21-inferential-analysis.html#footnotes",
    "href": "21-inferential-analysis.html#footnotes",
    "title": "21  Análisis inferencial",
    "section": "",
    "text": "El argumento T nos permite dar cuenta del tiempo en que se contaron los eventos (publicaciones), que fue de tres años tanto para hombres como para mujeres. Hay más hombres que mujeres en estos datos, pero poisson.test() tiene una funcionalidad limitada, por lo que se pueden utilizar análisis más sofisticados para explicar esta diferencia.↩︎"
  },
  {
    "objectID": "pre-proc-table.html",
    "href": "pre-proc-table.html",
    "title": "Apéndice A — Recommended Preprocessing",
    "section": "",
    "text": "The type of preprocessing needed depends on the type of model being fit. For example, models that use distance functions or dot products should have all of their predictors on the same scale so that distance is measured appropriately.\nTo learn more about each of these models, and others that might be available, see https://www.tidymodels.org/find/parsnip/.\nThis Appendix provides recommendations for baseline levels of preprocessing that are needed for various model functions. In Tabla A.1, the preprocessing methods are categorized as:\n\ndummy: Do qualitative predictors require a numeric encoding (e.g., via dummy variables or other methods)?\nzv: Should columns with a single unique value be removed?\nimpute: If some predictors are missing, should they be estimated via imputation?\ndecorrelate: If there are correlated predictors, should this correlation be mitigated? This might mean filtering out predictors, using principal component analysis, or a model-based technique (e.g., regularization).\nnormalize: Should predictors be centered and scaled?\ntransform: Is it helpful to transform predictors to be more symmetric?\n\nThe information in Tabla A.1 is not exhaustive and somewhat depends on the implementation. For example, as noted below the table, some models may not require a particular preprocessing operation but the implementation may require it. In the table, ✔ indicates that the method is required for the model and × indicates that it is not. The ◌ symbol means that the model may be helped by the technique but it is not required.\n\n\n\n\nTabla A.1: Preprocessing methods for different models.\n\nmodel\ndummy\nzv\nimpute\ndecorrelate\nnormalize\ntransform\n\n\n\nC5_rules()\n×\n×\n×\n×\n×\n×\n\n\nbag_mars()\n✔\n×\n✔\n◌\n×\n◌\n\n\nbag_tree()\n×\n×\n×\n◌¹\n×\n×\n\n\nbart()\n×\n×\n×\n◌¹\n×\n×\n\n\nboost_tree()\n×²\n◌\n✔²\n◌¹\n×\n×\n\n\ncubist_rules()\n×\n×\n×\n×\n×\n×\n\n\ndecision_tree()\n×\n×\n×\n◌¹\n×\n×\n\n\ndiscrim_flexible()\n✔\n×\n✔\n✔\n×\n◌\n\n\ndiscrim_linear()\n✔\n✔\n✔\n✔\n×\n◌\n\n\ndiscrim_regularized()\n✔\n✔\n✔\n✔\n×\n◌\n\n\ngen_additive_mod()\n✔\n✔\n✔\n✔\n×\n◌\n\n\nlinear_reg()\n✔\n✔\n✔\n✔\n×\n◌\n\n\nlogistic_reg()\n✔\n✔\n✔\n✔\n×\n◌\n\n\nmars()\n✔\n×\n✔\n◌\n×\n◌\n\n\nmlp()\n✔\n✔\n✔\n✔\n✔\n✔\n\n\nmultinom_reg()\n✔\n✔\n✔\n✔\n×²\n◌\n\n\nnaive_Bayes()\n×\n✔\n✔\n◌¹\n×\n×\n\n\nnearest_neighbor()\n✔\n✔\n✔\n◌\n✔\n✔\n\n\npls()\n✔\n✔\n✔\n×\n✔\n✔\n\n\npoisson_reg()\n✔\n✔\n✔\n✔\n×\n◌\n\n\nrand_forest()\n×\n◌\n✔²\n◌¹\n×\n×\n\n\nrule_fit()\n✔\n×\n✔\n◌¹\n✔\n×\n\n\nsvm_*()\n✔\n✔\n✔\n✔\n✔\n✔\n\n\n\n\n\n\n\n\nFootnotes:\n\nDecorrelating predictors may not help improve performance. However, fewer correlated predictors can improve the estimation of variance importance scores (see Fig. 11.4 of Kuhn y Johnson (2020)). Essentially, the selection of highly correlated predictors is almost random.\nThe needed preprocessing for these models depends on the implementation. Specifically:\n\n\n\nTheoretically, any tree-based model does not require imputation. However, many tree ensemble implementations require imputation.\nWhile tree-based boosting methods generally do not require the creation of dummy variables, models using the xgboost engine do.\n\n\n\n\n\nKuhn, M, y K Johnson. 2020. Feature engineering and selection: A practical approach for predictive models. CRC Press."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Abrams, B. 2003. “The Pit of Success.” https://blogs.msdn.microsoft.com/brada/2003/10/02/the-pit-of-success/.\n\n\nBaggerly, K, and K Coombes. 2009. “Deriving Chemosensitivity from\nCell Lines: Forensic Bioinformatics and Reproducible\nResearch in High-Throughput Biology.” The Annals of Applied\nStatistics 3 (4): 1309–34.\n\n\nBartley, E AND Schliep, M . AND Hanks. 2019. “Identifying and\nCharacterizing Extrapolation in Multivariate Response Data.”\nPLOS ONE 14 (December): 1–20.\n\n\nBiecek, Przemyslaw, and Tomasz Burzykowski. 2021. Explanatory\nModel Analysis. Chapman; Hall/CRC, New York. https://ema.drwhy.ai/.\n\n\nBohachevsky, I, M Johnson, and M Stein. 1986. “Generalized\nSimulated Annealing for Function Optimization.”\nTechnometrics 28 (3): 209–17.\n\n\nBolstad, B. 2004. Low-Level Analysis of High-Density Oligonucleotide\nArray Data: Background, Normalization and Summarization. University\nof California, Berkeley.\n\n\nBox, GEP, W Hunter, and J Hunter. 2005. Statistics for\nExperimenters: An Introduction to Design, Data Analysis, and Model\nBuilding. Wiley.\n\n\nBradley, R, and M Terry. 1952. “Rank Analysis of Incomplete Block\nDesigns: I. The Method of Paired Comparisons.”\nBiometrika 39 (3/4): 324–45.\n\n\nBreiman, L. 1996a. “Bagging Predictors.” Machine\nLearning 24 (2): 123–40.\n\n\n———. 1996b. “Stacked Regressions.” Machine\nLearning 24 (1): 49–64.\n\n\n———. 2001a. “Random Forests.” Machine Learning 45\n(1): 5–32.\n\n\n———. 2001b. “Statistical Modeling: The Two Cultures.”\nStatistical Science 16 (3): 199–231.\n\n\nCarlson, B. 2012. “Putting Oncology Patients at Risk.”\nBiotechnology Healthcare 9 (3): 17–21.\n\n\nChambers, J. 1998. Programming with Data: A Guide to the\nS Language. Berlin, Heidelberg: Springer-Verlag.\n\n\nChambers, J, and T Hastie, eds. 1992. Statistical Models in\nS. Boca Raton, FL: CRC Press, Inc.\n\n\nClaeskens, G. 2016. “Statistical Model Choice.” Annual\nReview of Statistics and Its Application 3: 233–56.\n\n\nCleveland, W. 1979. “Robust Locally Weighted Regression and\nSmoothing Scatterplots.” Journal of the American Statistical\nAssociation 74 (368): 829–36.\n\n\nCraig–Schapiro, R, M Kuhn, C Xiong, E Pickering, J Liu, T Misko, R\nPerrin, et al. 2011. “Multiplexed Immunoassay Panel Identifies\nNovel CSF Biomarkers for Alzheimer’s Disease Diagnosis and\nPrognosis.” PLoS ONE 6 (4): e18850.\n\n\nCybenko, G. 1989. “Approximation by Superpositions of a Sigmoidal\nFunction.” Mathematics of Control, Signals and Systems 2\n(4): 303–14.\n\n\nDanowski, T, J Aarons, J Hydovitz, and J Wingert. 1970. “Utility\nof Equivocal Glucose Tolerances.” Diabetes 19 (7):\n524–26.\n\n\nDavison, A, and D Hinkley. 1997. Bootstrap Methods and Their\nApplication. Vol. 1. Cambridge university press.\n\n\nDe Cock, D. 2011. “Ames, Iowa: Alternative to the\nBoston Housing Data as an End of Semester Regression\nProject.” Journal of Statistics Education 19 (3).\n\n\nDobson, A. 1999. An Introduction to Generalized Linear Models.\nChapman; Hall: Boca Raton.\n\n\nDurrleman, S, and R Simon. 1989. “Flexible Regression Models with\nCubic Splines.” Statistics in Medicine 8 (5): 551–61.\n\n\nFaraway, J. 2016. Extending the Linear Model with R:\nGeneralized Linear, Mixed Effects and Nonparametric Regression\nModels. CRC press.\n\n\nFox, J. 2008. Applied Regression Analysis and Generalized Linear\nModels. Second. Thousand Oaks, CA: Sage.\n\n\nFrazier, R. 2018. “A Tutorial on Bayesian Optimization.” https://arxiv.org/abs/1807.02811.\n\n\nFreund, Y, and R Schapire. 1997. “A Decision-Theoretic\nGeneralization of on-Line Learning and an Application to\nBoosting.” Journal of Computer and System Sciences 55\n(1): 119–39.\n\n\nFriedman, J. 1991. “Multivariate Adaptive Regression\nSplines.” The Annals of Statistics 19 (1): 1–141.\n\n\n———. 2001. “Greedy Function Approximation: A Gradient Boosting\nMachine.” Annals of Statistics 29 (5): 1189–1232.\n\n\nFriedman, J, T Hastie, and R Tibshirani. 2010. “Regularization\nPaths for Generalized Linear Models via Coordinate Descent.”\nJournal of Statistical Software 33 (1): 1.\n\n\nGeladi, P., and B Kowalski. 1986. “Partial Least-Squares\nRegression: A Tutorial.” Analytica Chimica Acta 185:\n1–17.\n\n\nGentleman, R, V Carey, W Huber, R Irizarry, and S Dudoit. 2005.\nBioinformatics and Computational Biology Solutions Using\nR and Bioconductor. Berlin, Heidelberg:\nSpringer-Verlag.\n\n\nGood, I. J. 1985. “Weight of Evidence: A Brief Survey.”\nBayesian Statistics 2: 249–70.\n\n\nGoodfellow, I, Y Bengio, and A Courville. 2016. Deep Learning.\nMIT Press.\n\n\nGuo, Cheng, and Felix Berkhahn. 2016. “Entity Embeddings of\nCategorical Variables.” http://arxiv.org/abs/1604.06737.\n\n\nHand, D, and R Till. 2001. “A Simple Generalisation of the Area\nUnder the ROC Curve for Multiple Class Classification\nProblems.” Machine Learning 45 (August): 171–86.\n\n\nHill, A, P LaPan, Y Li, and S Haney. 2007. “Impact of Image\nSegmentation on High-Content Screening Data Quality for\nSK-BR-3 Cells.” BMC\nBioinformatics 8 (1): 340.\n\n\nHo, T. 1995. “Random Decision Forests.” In Proceedings\nof 3rd International Conference on Document Analysis and\nRecognition, 1:278–82. IEEE.\n\n\nHosmer, D, and Sy Lemeshow. 2000. Applied Logistic Regression.\nNew York: John Wiley; Sons.\n\n\nHvitfeldt, E., and J. Silge. 2021. Supervised Machine Learning for\nText Analysis in r. A Chapman & Hall Book. CRC Press. https://smltar.com/.\n\n\nHyndman, R, and G Athanasopoulos. 2018. Forecasting: Principles and\nPractice. OTexts.\n\n\nIsmay, C, and A Kim. 2021. Statistical Inference via Data Science: A\nModernDive into r and the Tidyverse. Chapman; Hall/CRC. https://moderndive.com/.\n\n\nJaworska, J, N Nikolova-Jeliazkova, and T Aldenberg. 2005. “QSAR\nApplicability Domain Estimation by Projection of the Training Set in\nDescriptor Space: A Review.” Alternatives to Laboratory\nAnimals 33 (5): 445–59.\n\n\nJohnson, D, P Eckart, N Alsamadisi, H Noble, C Martin, and R Spicer.\n2018. “Polar Auxin Transport Is Implicated in Vessel\nDifferentiation and Spatial Patterning During Secondary Growth in\nPopulus.” American Journal of Botany 105 (2): 186–96.\n\n\nJoseph, V, E Gul, and S Ba. 2015. “Maximum Projection Designs for\nComputer Experiments.” Biometrika 102 (2): 371–80.\n\n\nJungsu, K, D Basak, and D Holtzman. 2009. “The Role of\nApolipoprotein E in Alzheimer’s\nDisease.” Neuron 63 (3): 287–303.\n\n\nKerleguer, A., J.-L. Koeck, M. Fabre, P. Gérôme, R. Teyssou, and V.\nHervé. 2003. “Use of Equivocal Zone in Interpretation of Results\nof the Amplified Mycobacterium Tuberculosis Direct Test for\nDiagnosis of Tuberculosis.” Journal of Clinical\nMicrobiology 41 (4): 1783–84.\n\n\nKirkpatrick, S, D Gelatt, and M Vecchi. 1983. “Optimization by\nSimulated Annealing.” Science 220 (4598): 671–80.\n\n\nKoklu, M, and IA Ozkan. 2020. “Multiclass Classification of Dry\nBeans Using Computer Vision and Machine Learning Techniques.”\nComputers and Electronics in Agriculture 174: 105507.\n\n\nKrueger, T, D Panknin, and M Braun. 2015. “Fast Cross-Validation\nvia Sequential Testing.” Journal of Machine Learning\nResearch 16 (33): 1103–55.\n\n\nKruschke, J, and T Liddell. 2018. “The Bayesian New\nStatistics: Hypothesis Testing, Estimation, Meta-Analysis, and Power\nAnalysis from a Bayesian Perspective.”\nPsychonomic Bulletin and Review 25 (1): 178–206.\n\n\nKuhn, Max. 2014. “Futility Analysis in the Cross-Validation of\nMachine Learning Models.” https://arxiv.org/abs/1405.6974.\n\n\nKuhn, M, and K Johnson. 2013. Applied Predictive Modeling.\nSpringer.\n\n\n———. 2020. Feature Engineering and Selection: A Practical Approach\nfor Predictive Models. CRC Press.\n\n\nLambert, D. 1992. “Zero-Inflated Poisson Regression, with an\nApplication to Defects in Manufacturing.” Technometrics\n34 (1): 1–14.\n\n\nLittell, R, J Pendergast, and R Natarajan. 2000. “Modelling\nCovariance Structure in the Analysis of Repeated Measures Data.”\nStatistics in Medicine 19 (13): 1793–1819.\n\n\nLong, J. 1992. “Measures of Sex Differences\nin Scientific Productivity*.” Social Forces 71\n(1): 159–78.\n\n\nLundberg, Scott M., and Su-In Lee. 2017. “A Unified Approach to\nInterpreting Model Predictions.” In Proceedings of the 31st\nInternational Conference on Neural Information Processing Systems,\n4768–77. NIPS’17. Red Hook, NY, USA: Curran Associates Inc.\n\n\nMangiafico, S. 2015. “An R Companion for the Handbook\nof Biological Statistics.” https://rcompanion.org/handbook/.\n\n\nMaron, O, and A Moore. 1994. “Hoeffding Races: Accelerating Model\nSelection Search for Classification and Function Approximation.”\nIn Advances in Neural Information Processing Systems, 59–66.\n\n\nMcCullagh, P, and J Nelder. 1989. Generalized Linear Models.\nLondon: Chapman; Hall.\n\n\nMcDonald, J. 2009. Handbook of Biological Statistics. Sparky\nHouse Publishing.\n\n\nMcElreath, R. 2020. Statistical Rethinking: A Bayesian\nCourse with Examples in R and Stan. CRC\npress.\n\n\nMcInnes, L, J Healy, and J Melville. 2020. “UMAP: Uniform Manifold\nApproximation and Projection for Dimension Reduction.”\n\n\nMcKay, M, R Beckman, and W Conover. 1979. “A Comparison of Three\nMethods for Selecting Values of Input Variables in the Analysis of\nOutput from a Computer Code.” Technometrics 21 (2):\n239–45.\n\n\nMicci-Barreca, Daniele. 2001. “A Preprocessing Scheme for\nHigh-Cardinality Categorical Attributes in Classification and Prediction\nProblems.” SIGKDD Explor. Newsl. 3 (1): 27–32. https://doi.org/10.1145/507533.507538.\n\n\nMingqiang, Y, K Kidiyo, and R Joseph. 2008. “A Survey of Shape\nFeature Extraction Techniques.” In Pattern Recognition,\nedited by PY Yin. Rijeka: IntechOpen. https://doi.org/10.5772/6237.\n\n\nMolnar, Christopher. 2020. Interpretable Machine\nLearning. lulu.com. https://christophm.github.io/interpretable-ml-book/.\n\n\nMullahy, J. 1986. “Specification and Testing of Some Modified\nCount Data Models.” Journal of Econometrics 33 (3):\n341–65.\n\n\nNetzeva, T, A Worth, T Aldenberg, R Benigni, M Cronin, P Gramatica, J\nJaworska, et al. 2005. “Current Status of Methods for Defining the\nApplicability Domain of (Quantitative) Structure-Activity Relationships:\nThe Report and Recommendations of ECVAM Workshop 52.”\nAlternatives to Laboratory Animals 33 (2): 155–73.\n\n\nOlsson, D, and L Nelson. 1975. “The\nNelder-Mead Simplex Procedure for Function\nMinimization.” Technometrics 17 (1): 45–51.\n\n\nOpitz, J, and S Burst. 2019. “Macro F1 and Macro F1.” https://arxiv.org/abs/1911.03347.\n\n\nR Core Team. 2014. R: A Language and Environment for Statistical\nComputing. Vienna, Austria: R Foundation for Statistical Computing.\nhttp://www.R-project.org/.\n\n\nRasmussen, C, and C Williams. 2006. Gaussian Processes for Machine\nLearning. Gaussian Processes for Machine Learning. MIT\nPress.\n\n\nSantner, T, B Williams, W Notz, and B Williams. 2003. The Design and\nAnalysis of Computer Experiments. Springer.\n\n\nSchmidberger, M, M Morgan, D Eddelbuettel, H Yu, L Tierney, and U\nMansmann. 2009. “State of the Art in Parallel Computing with\nR.” Journal of Statistical Software 31 (1):\n1–27. https://www.jstatsoft.org/v031/i01.\n\n\nSchulz, E, M Speekenbrink, and A Krause. 2018. “A Tutorial on\nGaussian Process Regression: Modelling, Exploring, and Exploiting\nFunctions.” Journal of Mathematical Psychology 85: 1–16.\n\n\nShahriari, B., K. Swersky, Z. Wang, R. P. Adams, and N. de Freitas.\n2016. “Taking the Human Out of the Loop: A Review of Bayesian\nOptimization.” Proceedings of the IEEE 104 (1): 148–75.\n\n\nShewry, M, and H Wynn. 1987. “Maximum Entropy Sampling.”\nJournal of Applied Statistics 14 (2): 165–70.\n\n\nShmueli, G. 2010. “To Explain or to Predict?”\nStatistical Science 25 (3): 289–310.\n\n\nSymons, S, and RG Fulcher. 1988. “Determination of Wheat Kernel\nMorphological Variation by Digital Image Analysis: I.\nVariation in Eastern Canadian Milling Quality\nWheats.” Journal of Cereal Science 8 (3): 211–18.\n\n\nThomas, R, and D Uminsky. 2020. “The Problem with Metrics Is a\nFundamental Problem for AI.” https://arxiv.org/abs/2002.08512.\n\n\nTibshirani, Robert. 1996. “Regression Shrinkage and Selection via\nthe Lasso.” Journal of the Royal Statistical Society. Series\nB (Methodological) 58 (1): 267–88. http://www.jstor.org/stable/2346178.\n\n\nVan Laarhoven, P, and E Aarts. 1987. “Simulated Annealing.”\nIn Simulated Annealing: Theory and Applications, 7–15.\nSpringer.\n\n\nWasserstein, R, and N Lazar. 2016. “The ASA Statement\non p-Values: Context, Process, and Purpose.” The American\nStatistician 70 (2): 129–33.\n\n\nWeinberger, K, A Dasgupta, J Langford, A Smola, and J Attenberg. 2009.\n“Feature Hashing for Large Scale Multitask Learning.” In\nProceedings of the 26th Annual International Conference on Machine\nLearning, 1113–20. ACM.\n\n\nWickham, H. 2019. Advanced r. 2nd ed. Chapman & Hall/CRC\nthe r Series. Taylor & Francis. https://doi.org/10.1201/9781351201315.\n\n\nWickham, H, M Averick, J Bryan, W Chang, L McGowan, R François, G\nGrolemund, et al. 2019. “Welcome to the\nTidyverse.” Journal of Open Source Software\n4 (43).\n\n\nWickham, H, and G Grolemund. 2016. R\nfor Data Science: Import, Tidy, Transform, Visualize, and\nModel Data. O’Reilly Media, Inc.\n\n\nWolpert, D. 1992. “Stacked Generalization.” Neural\nNetworks 5 (2): 241–59.\n\n\nWu, X, and Z Zhou. 2017. “A Unified View of Multi-Label\nPerformance Measures.” In International Conference on Machine\nLearning, 3780–88.\n\n\nWundervald, B, A Parnell, and K Domijan. 2020. “Generalizing Gain\nPenalization for Feature Selection in Tree-Based Models.” https://arxiv.org/abs/2006.07515.\n\n\nXu, Q, and Y Liang. 2001. “Monte Carlo Cross\nValidation.” Chemometrics and Intelligent Laboratory\nSystems 56 (1): 1–11.\n\n\nYeo, I-K, and R Johnson. 2000. “A New Family of Power\nTransformations to Improve Normality or Symmetry.”\nBiometrika 87 (4): 954–59.\n\n\nZeileis, A, C Kleiber, and S Jackman. 2008. “Regression Models for\nCount Data in R.” Journal of Statistical\nSoftware 27 (8): 1–25. https://www.jstatsoft.org/v027/i08.\n\n\nZumel, Nina, and John Mount. 2019. “Vtreat: A Data.frame Processor\nfor Predictive Modeling.” http://arxiv.org/abs/1611.09477."
  },
  {
    "objectID": "01-software-modeling.html#fundamentals-for-modeling-software",
    "href": "01-software-modeling.html#fundamentals-for-modeling-software",
    "title": "1  Software for modeling",
    "section": "\n1.1 Fundamentals for Modeling Software",
    "text": "1.1 Fundamentals for Modeling Software\nIt is important that the modeling software you use is easy to operate properly. The user interface should not be so poorly designed that the user would not know that they used it inappropriately. For example, Baggerly and Coombes (2009) report myriad problems in the data analyses from a high profile computational biology publication. One of the issues was related to how the users were required to add the names of the model inputs. The software user interface made it easy to offset the column names of the data from the actual data columns. This resulted in the wrong genes being identified as important for treating cancer patients and eventually contributed to the termination of several clinical trials (Carlson 2012).\nIf we need high quality models, software must facilitate proper usage. Abrams (2003) describes an interesting principle to guide us:\n\nThe Pit of Success: in stark contrast to a summit, a peak, or a journey across a desert to find victory through many trials and surprises, we want our customers to simply fall into winning practices by using our platform and frameworks.\n\nData analysis and modeling software should espouse this idea.\nSecond, modeling software should promote good scientific methodology. When working with complex predictive models, it can be easy to unknowingly commit errors related to logical fallacies or inappropriate assumptions. Many machine learning models are so adept at discovering patterns that they can effortlessly find empirical patterns in the data that fail to reproduce later. Some of methodological errors are insidious in that the issue can go undetected until a later time when new data that contain the true result are obtained.\n\nAs our models have become more powerful and complex, it has also become easier to commit latent errors.\n\nThis same principle also applies to programming. Whenever possible, the software should be able to protect users from committing mistakes. Software should make it easy for users to do the right thing.\nThese two aspects of model development – ease of proper use and good methodological practice – are crucial. Since tools for creating models are easily accessible and models can have such a profound impact, many more people are creating them. In terms of technical expertise and training, creators’ backgrounds will vary. It is important that their tools be robust to the user’s experience. Tools should be powerful enough to create high-performance models, but, on the other hand, should be easy to use appropriately. This book describes a suite of software for modeling that has been designed with these characteristics in mind.\nThe software is based on the R programming language (R Core Team 2014). R has been designed especially for data analysis and modeling. It is an implementation of the S language (with lexical scoping rules adapted from Scheme and Lisp) which was created in the 1970s to\n\n“turn ideas into software, quickly and faithfully” (Chambers 1998)\n\nR is open source and free. It is a powerful programming language that can be used for many different purposes but specializes in data analysis, modeling, visualization, and machine learning. R is easily extensible; it has a vast ecosystem of packages, mostly user-contributed modules that focus on a specific theme, such as modeling, visualization, and so on.\nOne collection of packages is called the tidyverse (Wickham et al. 2019). The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. Several of these design philosophies are directly informed by the aspects of software for modeling described in this chapter. If you’ve never used the tidyverse packages, Chapter 2 contains a review of basic concepts. Within the tidyverse, the subset of packages specifically focused on modeling are referred to as the tidymodels packages. This book is a practical guide for conducting modeling using the tidyverse and tidymodels packages. It shows how to use a set of packages, each with its own specific purpose, together to create high-quality models."
  },
  {
    "objectID": "01-software-modeling.html#model-types",
    "href": "01-software-modeling.html#model-types",
    "title": "1  Software for modeling",
    "section": "\n1.2 Types of Models",
    "text": "1.2 Types of Models\nBefore proceeding, let’s describe a taxonomy for types of models, grouped by purpose. This taxonomy informs both how a model is used and many aspects of how the model may be created or evaluated. While this list is not exhaustive, most models fall into at least one of these categories:\nDescriptive models\nThe purpose of a descriptive model is to describe or illustrate characteristics of some data. The analysis might have no other purpose than to visually emphasize some trend or artifact in the data.\nFor example, large scale measurements of RNA have been possible for some time using microarrays. Early laboratory methods placed a biological sample on a small microchip. Very small locations on the chip can measure a signal based on the abundance of a specific RNA sequence. The chip would contain thousands (or more) outcomes, each a quantification of the RNA related to a biological process. However, there could be quality issues on the chip that might lead to poor results. For example, a fingerprint accidentally left on a portion of the chip could cause inaccurate measurements when scanned.\nAn early method for evaluating such issues were probe-level models, or PLMs (Bolstad 2004). A statistical model would be created that accounted for the known differences in the data, such as the chip, the RNA sequence, the type of sequence, and so on. If there were other, unknown factors in the data, these effects would be captured in the model residuals. When the residuals were plotted by their location on the chip, a good quality chip would show no patterns. When a problem did occur, some sort of spatial pattern would be discernible. Often the type of pattern would suggest the underlying issue (e.g., a fingerprint) and a possible solution (wipe off the chip and rescan, repeat the sample, etc.). Figure 1.1 (a) shows an application of this method for two microarrays taken from Gentleman et al. (2005). The images show two different color values; areas that are darker are where the signal intensity was larger than the model expects while the lighter color shows lower than expected values. The left-hand panel demonstrates a fairly random pattern while the right-hand panel exhibits an undesirable artifact in the middle of the chip.\n\n\n\n\nFigure 1.1: Two examples of how descriptive models can be used to illustrate specific patterns\n\n\n\nAnother example of a descriptive model is the locally estimated scatterplot smoothing model, more commonly known as LOESS (Cleveland 1979). Here, a smooth and flexible regression model is fit to a data set, usually with a single independent variable, and the fitted regression line is used to elucidate some trend in the data. These types of smoothers are used to discover potential ways to represent a variable in a model. This is demonstrated in Figure 1.1 (b) where a nonlinear trend is illuminated by the flexible smoother. From this plot, it is clear that there is a highly nonlinear relationship between the sale price of a house and its latitude.\nInferential models\nThe goal of an inferential model is to produce a decision for a research question or to explore a specific hypothesis, similar to how statistical tests are used.1 An inferential model starts with a predefined conjecture or idea about a population and produces a statistical conclusion such as an interval estimate or the rejection of a hypothesis.\nFor example, the goal of a clinical trial might be to provide confirmation that a new therapy does a better job in prolonging life than an alternative, such as an existing therapy or no treatment at all. If the clinical endpoint related to survival of a patient, the null hypothesis might be that the new treatment has an equal or lower median survival time, with the alternative hypothesis being that the new therapy has higher median survival. If this trial were evaluated using traditional null hypothesis significance testing via modeling, the significance testing would produce a p-value using some pre-defined methodology based on a set of assumptions for the data. Small values for the p-value in the model results would indicate there is evidence that the new therapy helps patients live longer. Large values for the p-value in the model results would conclude there is a failure to show such a difference; this lack of evidence could be due to a number of reasons, including the therapy not working.\nWhat are the important aspects of this type of analysis? Inferential modeling techniques typically produce some type of probabilistic output, such as a p-value, confidence interval, or posterior probability. Generally, to compute such a quantity, formal probabilistic assumptions must be made about the data and the underlying processes that generated the data. The quality of the statistical modeling results are highly dependent on these pre-defined assumptions as well as how much the observed data appear to agree with them. The most critical factors here are theoretical: “If my data were independent and the residuals follow distribution X, then test statistic Y can be used to produce a p-value. Otherwise, the resulting p-value might be inaccurate.”\n\nOne aspect of inferential analyses is that there tends to be a delayed feedback loop in understanding how well the data match the model assumptions. In our clinical trial example, if statistical (and clinical) significance indicate that the new therapy should be available for patients to use, it still may be years before it is used in the field and enough data are generated for an independent assessment of whether the original statistical analysis led to the appropriate decision.\n\nPredictive models\nSometimes data are modeled to produce the most accurate prediction possible for new data. Here, the primary goal is that the predicted values have the highest possible fidelity to the true value of the new data.\nA simple example would be for a book buyer to predict how many copies of a particular book should be shipped to their store for the next month. An over-prediction wastes space and money due to excess books. If the prediction is smaller than it should be, there is opportunity loss and less profit.\nFor this type of model, the problem type is one of estimation rather than inference. For example, the buyer is usually not concerned with a question such as “Will I sell more than 100 copies of book X next month?” but rather “How many copies of book X will customers purchase next month?” Also, depending on the context, there may not be any interest in why the predicted value is X. In other words, there is more interest in the value itself than in evaluating a formal hypothesis related to the data. The prediction can also include measures of uncertainty. In the case of the book buyer, providing a forecasting error may be helpful in deciding how many books to purchase. It can also serve as a metric to gauge how well the prediction method worked.\nWhat are the most important factors affecting predictive models? There are many different ways that a predictive model can be created, so the important factors depend on how the model was developed.2\nA mechanistic model could be derived using first principles to produce a model equation that depends on assumptions. For example, when predicting the amount of a drug that is in a person’s body at a certain time, some formal assumptions are made on how the drug is administered, absorbed, metabolized, and eliminated. Based on this, a set of differential equations can be used to derive a specific model equation. Data are used to estimate the unknown parameters of this equation so that predictions can be generated. Like inferential models, mechanistic predictive models greatly depend on the assumptions that define their model equations. However, unlike inferential models, it is easy to make data-driven statements about how well the model performs based on how well it predicts the existing data. Here the feedback loop for the modeling practitioner is much faster than it would be for a hypothesis test.\nEmpirically driven models are created with more vague assumptions. These models tend to fall into the machine learning category. A good example is the K-nearest neighbor (KNN) model. Given a set of reference data, a new sample is predicted by using the values of the K most similar data in the reference set. For example, if a book buyer needs a prediction for a new book, historical data from existing books may be available. A 5-nearest neighbor model would estimate the number of the new books to purchase based on the sales numbers of the five books that are most similar to the new one (for some definition of “similar”). This model is defined only by the structure of the prediction (the average of five similar books). No theoretical or probabilistic assumptions are made about the sales numbers or the variables that are used to define similarity. In fact, the primary method of evaluating the appropriateness of the model is to assess its accuracy using existing data. If the structure of this type of model was a good choice, the predictions would be close to the actual values."
  },
  {
    "objectID": "01-software-modeling.html#connections-between-types-of-models",
    "href": "01-software-modeling.html#connections-between-types-of-models",
    "title": "1  Software for modeling",
    "section": "\n1.3 Connections Between Types of Models",
    "text": "1.3 Connections Between Types of Models\n\nNote that we have defined the type of a model by how it is used, rather than its mathematical qualities.\n\nAn ordinary linear regression model might fall into any of these three classes of model, depending on how it is used:\n\nA descriptive smoother, similar to LOESS, called restricted smoothing splines (Durrleman and Simon 1989) can be used to describe trends in data using ordinary linear regression with specialized terms.\nAn analysis of variance (ANOVA) model is a popular method for producing the p-values used for inference. ANOVA models are a special case of linear regression.\nIf a simple linear regression model produces accurate predictions, it can be used as a predictive model.\n\nThere are many examples of predictive models that cannot (or at least should not) be used for inference. Even if probabilistic assumptions were made for the data, the nature of the K-nearest neighbors model, for example, makes the math required for inference intractable.\nThere is an additional connection between the types of models. While the primary purpose of descriptive and inferential models might not be related to prediction, the predictive capacity of the model should not be ignored. For example, logistic regression is a popular model for data in which the outcome is qualitative with two possible values. It can model how variables are related to the probability of the outcomes. When used inferentially, an abundance of attention is paid to the statistical qualities of the model. For example, analysts tend to strongly focus on the selection of independent variables contained in the model. Many iterations of model building may be used to determine a minimal subset of independent variables that have a “statistically significant” relationship to the outcome variable. This is usually achieved when all of the p-values for the independent variables are below a certain value (e.g., 0.05). From here, the analyst may focus on making qualitative statements about the relative influence that the variables have on the outcome (e.g., “There is a statistically significant relationship between age and the odds of heart disease.”).\nHowever, this approach can be dangerous when statistical significance is used as the only measure of model quality. It is possible that this statistically optimized model has poor model accuracy, or it performs poorly on some other measure of predictive capacity. While the model might not be used for prediction, how much should inferences be trusted from a model that has significant p-values but dismal accuracy? Predictive performance tends to be related to how close the model’s fitted values are to the observed data.\n\nIf a model has limited fidelity to the data, the inferences generated by the model should be highly suspect. In other words, statistical significance may not be sufficient proof that a model is appropriate.\n\nThis may seem intuitively obvious, but it is often ignored in real-world data analysis."
  },
  {
    "objectID": "01-software-modeling.html#model-terminology",
    "href": "01-software-modeling.html#model-terminology",
    "title": "1  Software for modeling",
    "section": "\n1.4 Some Terminology",
    "text": "1.4 Some Terminology\nBefore proceeding, we will outline additional terminology related to modeling and data. These descriptions are intended to be helpful as you read this book, but they are not exhaustive.\nFirst, many models can be categorized as being supervised or unsupervised. Unsupervised models are those that learn patterns, clusters, or other characteristics of the data but lack an outcome, i.e., a dependent variable. Principal component analysis (PCA), clustering, and autoencoders are examples of unsupervised models; they are used to understand relationships between variables or sets of variables without an explicit relationship between predictors and an outcome. Supervised models are those that have an outcome variable. Linear regression, neural networks, and numerous other methodologies fall into this category.\nWithin supervised models, there are two main sub-categories:\n\nRegression predicts a numeric outcome.\nClassification predicts an outcome that is an ordered or unordered set of qualitative values.\n\nThese are imperfect definitions and do not account for all possible model types. In ?sec-models, we refer to this characteristic of supervised techniques as the model mode.\nDifferent variables can have different roles, especially in a supervised modeling analysis. Outcomes (otherwise known as the labels, endpoints, or dependent variables) are the value being predicted in supervised models. The independent variables, which are the substrate for making predictions of the outcome, are also referred to as predictors, features, or covariates (depending on the context). The terms outcomes and predictors are used most frequently in this book.\nIn terms of the data or variables themselves, whether used for supervised or unsupervised models, as predictors or outcomes, the two main categories are quantitative and qualitative. Examples of the former are real numbers like 3.14159 and integers like 42. Qualitative values, also known as nominal data, are those that represent some sort of discrete state that cannot be naturally placed on a numeric scale, like “red”, “green”, and “blue”."
  },
  {
    "objectID": "01-software-modeling.html#model-phases",
    "href": "01-software-modeling.html#model-phases",
    "title": "1  Software for modeling",
    "section": "\n1.5 How Does Modeling Fit into the Data Analysis Process?",
    "text": "1.5 How Does Modeling Fit into the Data Analysis Process?\nIn what circumstances are models created? Are there steps that precede such an undertaking? Is model creation the first step in data analysis?\n\nThere are a few critical phases of data analysis that always come before modeling.\n\nFirst, there is the chronically underestimated process of cleaning the data. No matter the circumstances, you should investigate the data to make sure that they are applicable to your project goals, accurate, and appropriate. These steps can easily take more time than the rest of the data analysis process (depending on the circumstances).\nData cleaning can also overlap with the second phase of understanding the data, often referred to as exploratory data analysis (EDA). EDA brings to light how the different variables are related to one another, their distributions, typical ranges, and other attributes. A good question to ask at this phase is, “How did I come by these data?” This question can help you understand how the data at hand have been sampled or filtered and if these operations were appropriate. For example, when merging database tables, a join may go awry that could accidentally eliminate one or more subpopulations. Another good idea is to ask if the data are relevant. For example, to predict whether patients have Alzheimer’s disease, it would be unwise to have a data set containing subjects with the disease and a random sample of healthy adults from the general population. Given the progressive nature of the disease, the model may simply predict who are the oldest patients.\nFinally, before starting a data analysis process, there should be clear expectations of the model’s goal and how performance (and success) will be judged. At least one performance metric should be identified with realistic goals of what can be achieved. Common statistical metrics, discussed in more detail in ?sec-performance, are classification accuracy, true and false positive rates, root mean squared error, and so on. The relative benefits and drawbacks of these metrics should be weighed. It is also important that the metric be germane; alignment with the broader data analysis goals is critical.\nThe process of investigating the data may not be simple. Wickham and Grolemund (2016) contains an excellent illustration of the general data analysis process, reproduced in Figure Figure 1.2. Data ingestion and cleaning/tidying are shown as the initial steps. When the analytical steps for understanding commence, they are a heuristic process; we cannot pre-determine how long they may take. The cycle of transformation, modeling, and visualization often requires multiple iterations.\n\n\n\n\nFigure 1.2: The data science process (from R for Data Science, used with permission)\n\n\n\nThis iterative process is especially true for modeling. Figure Figure 1.3 emulates the typical path to determining an appropriate model. The general phases are:\n\nExploratory data analysis (EDA): Initially there is a back and forth between numerical analysis and data visualization (represented in Figure 1.2) where different discoveries lead to more questions and data analysis side-quests to gain more understanding.\nFeature engineering: The understanding gained from EDA results in the creation of specific model terms that make it easier to accurately model the observed data. This can include complex methodologies (e.g., PCA) or simpler features (using the ratio of two predictors). ?sec-recipes focuses entirely on this important step.\nModel tuning and selection (large circles with alternating segments): A variety of models are generated and their performance is compared. Some models require parameter tuning in which some structural parameters must be specified or optimized. The alternating segments within the circles signify the repeated data splitting used during resampling (see ?sec-resampling).\nModel evaluation: During this phase of model development, we assess the model’s performance metrics, examine residual plots, and conduct other EDA-like analyses to understand how well the models work. In some cases, formal between-model comparisons (?sec-compare) help you understand whether any differences in models are within the experimental noise.\n\n\n\n\n\nFigure 1.3: A schematic for the typical modeling process\n\n\n\nAfter an initial sequence of these tasks, more understanding is gained regarding which models are superior as well as which data subpopulations are not being effectively estimated. This leads to additional EDA and feature engineering, another round of modeling, and so on. Once the data analysis goals are achieved, typically the last steps are to finalize, document, and communicate the model. For predictive models, it is common at the end to validate the model on an additional set of data reserved for this specific purpose.\nAs an example, Kuhn and Johnson (2020) use data to model the daily ridership of Chicago’s public train system using predictors such as the date, the previous ridership results, the weather, and other factors. Table 1.1 shows an approximation of these authors’ hypothetical inner monologue when analyzing these data and eventually selecting a model with sufficient performance.\n\n\nTable 1.1: ?(caption)\n\n\n\n\n(a) Hypothetical inner monologue of a model developer.\n\nThoughts\nActivity\n\n\n\nThe daily ridership values between stations are extremely correlated.\nEDA\n\n\nWeekday and weekend ridership look very different.\nEDA\n\n\nOne day in the summer of 2010 has an abnormally large number of riders.\nEDA\n\n\nWhich stations had the lowest daily ridership values?\nEDA\n\n\nDates should at least be encoded as day-of-the-week, and year.\nFeature Engineering\n\n\nMaybe PCA could be used on the correlated predictors to make it easier for the models to use them.\nFeature Engineering\n\n\nHourly weather records should probably be summarized into daily measurements.\nFeature Engineering\n\n\nLet’s start with simple linear regression, K-nearest neighbors, and a boosted decision tree.\nModel Fitting\n\n\nHow many neighbors should be used?\nModel Tuning\n\n\nShould we run a lot of boosting iterations or just a few?\nModel Tuning\n\n\nHow many neighbors seemed to be optimal for these data?\nModel Tuning\n\n\nWhich models have the lowest root mean squared errors?\nModel Evaluation\n\n\nWhich days were poorly predicted?\nEDA\n\n\nVariable importance scores indicate that the weather information is not predictive. We’ll drop them from the next set of models.\nModel Evaluation\n\n\nIt seems like we should focus on a lot of boosting iterations for that model.\nModel Evaluation\n\n\nWe need to encode holiday features to improve predictions on (and around) those dates.\nFeature Engineering\n\n\nLet’s drop KNN from the model list.\nModel Evaluation"
  },
  {
    "objectID": "01-software-modeling.html#software-summary",
    "href": "01-software-modeling.html#software-summary",
    "title": "1  Software for modeling",
    "section": "\n1.6 Chapter Summary",
    "text": "1.6 Chapter Summary\nThis chapter focused on how models describe relationships in data, and different types of models such as descriptive models, inferential models, and predictive models. The predictive capacity of a model can be used to evaluate it, even when its main goal is not prediction. Modeling itself sits within the broader data analysis process, and exploratory data analysis is a key part of building high-quality models.\n\n\n\n\nAbrams, B. 2003. “The Pit of Success.” https://blogs.msdn.microsoft.com/brada/2003/10/02/the-pit-of-success/.\n\n\nBaggerly, K, and K Coombes. 2009. “Deriving Chemosensitivity from Cell Lines: Forensic Bioinformatics and Reproducible Research in High-Throughput Biology.” The Annals of Applied Statistics 3 (4): 1309–34.\n\n\nBolstad, B. 2004. Low-Level Analysis of High-Density Oligonucleotide Array Data: Background, Normalization and Summarization. University of California, Berkeley.\n\n\nBreiman, L. 2001. “Statistical Modeling: The Two Cultures.” Statistical Science 16 (3): 199–231.\n\n\nCarlson, B. 2012. “Putting Oncology Patients at Risk.” Biotechnology Healthcare 9 (3): 17–21.\n\n\nChambers, J. 1998. Programming with Data: A Guide to the S Language. Berlin, Heidelberg: Springer-Verlag.\n\n\nCleveland, W. 1979. “Robust Locally Weighted Regression and Smoothing Scatterplots.” Journal of the American Statistical Association 74 (368): 829–36.\n\n\nDurrleman, S, and R Simon. 1989. “Flexible Regression Models with Cubic Splines.” Statistics in Medicine 8 (5): 551–61.\n\n\nGentleman, R, V Carey, W Huber, R Irizarry, and S Dudoit. 2005. Bioinformatics and Computational Biology Solutions Using R and Bioconductor. Berlin, Heidelberg: Springer-Verlag.\n\n\nKuhn, M, and K Johnson. 2020. Feature Engineering and Selection: A Practical Approach for Predictive Models. CRC Press.\n\n\nR Core Team. 2014. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. http://www.R-project.org/.\n\n\nShmueli, G. 2010. “To Explain or to Predict?” Statistical Science 25 (3): 289–310.\n\n\nWickham, H, M Averick, J Bryan, W Chang, L McGowan, R François, G Grolemund, et al. 2019. “Welcome to the Tidyverse.” Journal of Open Source Software 4 (43).\n\n\nWickham, H, and G Grolemund. 2016. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. O’Reilly Media, Inc."
  },
  {
    "objectID": "01-software-modeling.html#footnotes",
    "href": "01-software-modeling.html#footnotes",
    "title": "1  Software para modelar",
    "section": "",
    "text": "De hecho, muchas pruebas estadísticas específicas son equivalentes a modelos. Por ejemplo, las pruebas t y los métodos de análisis de varianza (ANOVA) son casos particulares del modelo lineal generalizado.↩︎\nSe pueden encontrar discusiones más amplias sobre estas distinciones en Breiman (2001) y Shmueli (2010).↩︎"
  },
  {
    "objectID": "01-software-modeling.html#sec-software-summary",
    "href": "01-software-modeling.html#sec-software-summary",
    "title": "1  Software para modelar",
    "section": "\n1.6 Resumen del capítulo",
    "text": "1.6 Resumen del capítulo\nEste capítulo se centró en cómo los modelos describen relaciones en los datos y en diferentes tipos de modelos, como modelos descriptivos, modelos inferenciales y modelos predictivos. La capacidad predictiva de un modelo puede utilizarse para evaluarlo, incluso cuando su objetivo principal no sea la predicción. El modelado en sí forma parte del proceso más amplio de análisis de datos, y el análisis de datos exploratorio es una parte clave de la construcción de modelos de alta calidad.\n\n\n\n\nAbrams, B. 2003. «The Pit of Success». https://blogs.msdn.microsoft.com/brada/2003/10/02/the-pit-of-success/.\n\n\nBaggerly, K, y K Coombes. 2009. «Deriving chemosensitivity from cell lines: Forensic bioinformatics and reproducible research in high-throughput biology». The Annals of Applied Statistics 3 (4): 1309-34.\n\n\nBolstad, B. 2004. Low-level analysis of high-density oligonucleotide array data: Background, normalization and summarization. University of California, Berkeley.\n\n\nBreiman, L. 2001. «Statistical modeling: The two cultures». Statistical Science 16 (3): 199-231.\n\n\nCarlson, B. 2012. «Putting oncology patients at risk». Biotechnology Healthcare 9 (3): 17-21.\n\n\nChambers, J. 1998. Programming with Data: A Guide to the S Language. Berlin, Heidelberg: Springer-Verlag.\n\n\nCleveland, W. 1979. «Robust locally weighted regression and smoothing scatterplots». Journal of the American Statistical Association 74 (368): 829-36.\n\n\nDurrleman, S, y R Simon. 1989. «Flexible regression models with cubic splines». Statistics in Medicine 8 (5): 551-61.\n\n\nGentleman, R, V Carey, W Huber, R Irizarry, y S Dudoit. 2005. Bioinformatics and Computational Biology Solutions Using R and Bioconductor. Berlin, Heidelberg: Springer-Verlag.\n\n\nKuhn, M, y K Johnson. 2020. Feature engineering and selection: A practical approach for predictive models. CRC Press.\n\n\nR Core Team. 2014. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. http://www.R-project.org/.\n\n\nShmueli, G. 2010. «To explain or to predict?» Statistical science 25 (3): 289-310.\n\n\nWickham, H, M Averick, J Bryan, W Chang, L McGowan, R François, G Grolemund, et al. 2019. «Welcome to the Tidyverse». Journal of Open Source Software 4 (43).\n\n\nWickham, H, y G Grolemund. 2016. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. O’Reilly Media, Inc."
  },
  {
    "objectID": "01-software-modeling.html#sec-model-types",
    "href": "01-software-modeling.html#sec-model-types",
    "title": "1  Software para modelar",
    "section": "\n1.2 Tipos de modelos",
    "text": "1.2 Tipos de modelos\nAntes de continuar, describamos una taxonomía de tipos de modelos, agrupados por propósito. Esta taxonomía informa tanto cómo se utiliza un modelo como muchos aspectos de cómo se puede crear o evaluar el modelo. Si bien esta lista no es exhaustiva, la mayoría de los modelos caen en al menos una de estas categorías:\nModelos descriptivos\nEl propósito de un modelo descriptivo es describir o ilustrar las características de algunos datos. Es posible que el análisis no tenga otro propósito que enfatizar visualmente alguna tendencia o artefacto en los datos.\nPor ejemplo, desde hace algún tiempo es posible realizar mediciones de ARN a gran escala utilizando microarrays. Los primeros métodos de laboratorio colocaban una muestra biológica en un pequeño microchip. Ubicaciones muy pequeñas en el chip pueden medir una señal basada en la abundancia de una secuencia de ARN específica. El chip contendría miles (o más) de resultados, cada uno de los cuales sería una cuantificación del ARN relacionado con un proceso biológico. Sin embargo, podría haber problemas de calidad en el chip que podrían provocar malos resultados. Por ejemplo, una huella digital dejada accidentalmente en una parte del chip podría provocar mediciones inexactas al escanearla.\nUno de los primeros métodos para evaluar estas cuestiones fueron los modelos a nivel de sonda, o PLM (Bolstad 2004). Se crearía un modelo estadístico que tuviera en cuenta las diferencias conocidas en los datos, como el chip, la secuencia de ARN, el tipo de secuencia, etc. Si hubiera otros factores desconocidos en los datos, estos efectos se capturarían en los residuos del modelo. Cuando los residuos se trazaron según su ubicación en el chip, un chip de buena calidad no mostraría patrones. Cuando ocurría un problema, se podía discernir algún tipo de patrón espacial. A menudo, el tipo de patrón sugeriría el problema subyacente (por ejemplo, una huella digital) y una posible solución (limpiar el chip y volver a escanear, repetir la muestra, etc.). Figura 1.1 (a) muestra una aplicación de este método para dos microarrays tomados de Gentleman et al. (2005). Las imágenes muestran dos valores de color diferentes; Las áreas más oscuras son aquellas donde la intensidad de la señal fue mayor de lo esperado por el modelo, mientras que el color más claro muestra valores inferiores a los esperados. El panel de la izquierda muestra un patrón bastante aleatorio, mientras que el panel de la derecha muestra un artefacto indeseable en el medio del chip.\n\n\n\n\nFigura 1.1: Dos ejemplos de cómo se pueden utilizar modelos descriptivos para ilustrar patrones específicos\n\n\n\nOtro ejemplo de modelo descriptivo es el modelo de suavizado de diagrama de dispersión estimado localmente, más comúnmente conocido como LOESS (Cleveland 1979). En este caso, se ajusta un modelo de regresión suave y flexible a un conjunto de datos, generalmente con una única variable independiente, y se utiliza la línea de regresión ajustada para dilucidar alguna tendencia en los datos. Estos tipos de suavizadores se utilizan para descubrir formas potenciales de representar una variable en un modelo. Esto se demuestra en Figura 1.1 (b), donde el suavizador flexible ilumina una tendencia no lineal. De este gráfico se desprende claramente que existe una relación altamente no lineal entre el precio de venta de una casa y su latitud.\nModelos inferenciales\nEl objetivo de un modelo inferencial es producir una decisión para una pregunta de investigación o explorar una hipótesis específica, de forma similar a cómo se utilizan las pruebas estadísticas.1 Un modelo inferencial comienza con una conjetura o idea predefinida sobre una población y produce una conclusión estadística como una estimación de intervalo o el rechazo de una hipótesis.\nPor ejemplo, el objetivo de un ensayo clínico podría ser confirmar que una nueva terapia logra prolongar la vida mejor que una alternativa, como una terapia existente o ningún tratamiento. Si el criterio de valoración clínico se relaciona con la supervivencia de un paciente, la hipótesis nula podría ser que el nuevo tratamiento tiene una mediana de supervivencia igual o menor, siendo la hipótesis alternativa que la nueva terapia tiene una mediana de supervivencia más alta. Si este ensayo se evaluara utilizando pruebas de significancia de hipótesis nulas tradicionales mediante modelado, la prueba de significancia produciría un valor p usando alguna metodología predefinida basada en un conjunto de suposiciones para los datos. Valores pequeños para el valor p en los resultados del modelo indicarían que hay evidencia de que la nueva terapia ayuda a los pacientes a vivir más tiempo. Valores grandes para el valor p en los resultados del modelo concluirían que no se puede mostrar tal diferencia; Esta falta de evidencia podría deberse a varias razones, incluida la terapia que no funciona.\n¿Cuáles son los aspectos importantes de este tipo de análisis? Las técnicas de modelado inferencial suelen producir algún tipo de resultado probabilístico, como un valor p, un intervalo de confianza o una probabilidad posterior. Generalmente, para calcular tal cantidad, se deben hacer supuestos probabilísticos formales sobre los datos y los procesos subyacentes que generaron los datos. La calidad de los resultados del modelado estadístico depende en gran medida de estos supuestos predefinidos, así como de hasta qué punto los datos observados parecen coincidir con ellos. Los factores más críticos aquí son teóricos: “Si mis datos fueran independientes y los residuos siguieran la distribución X, entonces el estadístico de prueba Y se puede utilizar para producir un valor p. De lo contrario, el valor p resultante podría ser inexacto.”\n\nUn aspecto de los análisis inferenciales es que tiende a haber un ciclo de retroalimentación retardada en la comprensión de qué tan bien coinciden los datos con los supuestos del modelo. En nuestro ejemplo de ensayo clínico, si la significación estadística (y clínica) indica que la nueva terapia debería estar disponible para que la utilicen los pacientes, aún pueden pasar años antes de que se utilice en el campo y se generen suficientes datos para una evaluación independiente de si el análisis estadístico original condujo a la decisión adecuada.\n\nModelos predictivos\nA veces, los datos se modelan para producir la predicción más precisa posible para datos nuevos. Aquí, el objetivo principal es que los valores predichos tengan la mayor fidelidad posible al valor real de los nuevos datos.\nUn ejemplo sencillo sería que un comprador de libros predijera cuántas copias de un libro en particular debería enviar a su tienda durante el próximo mes. Una predicción excesiva desperdicia espacio y dinero debido al exceso de libros. Si la predicción es menor de lo que debería ser, hay pérdida de oportunidades y menos ganancias.\nPara este tipo de modelo, el tipo de problema es de estimación más que de inferencia. Por ejemplo, al comprador normalmente no le preocupa una pregunta como “¿Venderé más de 100 copias del libro X el próximo mes?” sino “¿Cuántas copias del libro X comprarán los clientes el próximo mes?” Además, dependiendo del contexto, puede que no haya ningún interés en saber por qué el valor previsto es X. En otras palabras, hay más interés en el valor en sí que en evaluar una hipótesis formal relacionada con los datos. La predicción también puede incluir medidas de incertidumbre. En el caso del comprador de libros, proporcionar un error de pronóstico puede resultar útil para decidir cuántos libros comprar. También puede servir como métrica para evaluar qué tan bien funcionó el método de predicción.\n¿Cuáles son los factores más importantes que afectan los modelos predictivos? Hay muchas formas diferentes de crear un modelo predictivo, por lo que los factores importantes dependen de cómo se desarrolló el modelo.2\nSe podría derivar un modelo mecanicista utilizando primeros principios para producir una ecuación modelo que dependa de suposiciones. Por ejemplo, al predecir la cantidad de una droga que hay en el cuerpo de una persona en un momento determinado, se hacen algunas suposiciones formales sobre cómo se administra, absorbe, metaboliza y elimina la droga. En base a esto, se puede utilizar un conjunto de ecuaciones diferenciales para derivar una ecuación modelo específica. Los datos se utilizan para estimar los parámetros desconocidos de esta ecuación para poder generar predicciones. Al igual que los modelos inferenciales, los modelos predictivos mecanicistas dependen en gran medida de los supuestos que definen las ecuaciones de sus modelos. Sin embargo, a diferencia de los modelos inferenciales, es fácil hacer afirmaciones basadas en datos sobre qué tan bien se desempeña el modelo en función de qué tan bien predice los datos existentes. Aquí el ciclo de retroalimentación para el practicante de modelos es mucho más rápido de lo que sería para una prueba de hipótesis.\nModelos impulsados empíricamente se crean con suposiciones más vagas. Estos modelos tienden a caer en la categoría de aprendizaje automático. Un buen ejemplo es el modelo K-vecino más cercano (KNN). Dado un conjunto de datos de referencia, se predice una nueva muestra utilizando los valores de los K datos más similares en el conjunto de referencia. Por ejemplo, si un comprador de libros necesita una predicción para un libro nuevo, es posible que haya disponibles datos históricos de libros existentes. Un modelo de cinco vecinos más cercanos estimaría el número de libros nuevos a comprar basándose en las cifras de ventas de los cinco libros que son más similares al nuevo (para alguna definición de “similar”). Este modelo se define únicamente por la estructura de la predicción (el promedio de cinco libros similares). No se hacen suposiciones teóricas o probabilísticas sobre las cifras de ventas o las variables que se utilizan para definir la similitud. De hecho, el método principal para evaluar la idoneidad del modelo es evaluar su precisión utilizando datos existentes. Si la estructura de este tipo de modelo fuera una buena elección, las predicciones se aproximarían a los valores reales."
  },
  {
    "objectID": "01-software-modeling.html#sec-model-terminology",
    "href": "01-software-modeling.html#sec-model-terminology",
    "title": "1  Software para modelar",
    "section": "\n1.4 Terminología",
    "text": "1.4 Terminología\nAntes de continuar, describiremos terminología adicional relacionada con el modelado y los datos. Estas descripciones pretenden ser útiles a medida que lee este libro, pero no son exhaustivas.\nEn primer lugar, muchos modelos pueden clasificarse como supervisados o no supervisados. Los modelos no supervisados ​​son aquellos que aprenden patrones, grupos u otras características de los datos pero carecen de un resultado, es decir, una variable dependiente. El análisis de componentes principales (PCA), la agrupación en clústeres y los codificadores automáticos son ejemplos de modelos no supervisados; se utilizan para comprender las relaciones entre variables o conjuntos de variables sin una relación explícita entre los predictores y un resultado. Los modelos supervisados ​​son aquellos que tienen una variable de resultado. La regresión lineal, las redes neuronales y muchas otras metodologías entran en esta categoría.\nDentro de los modelos supervisados, hay dos subcategorías principales:\n\nRegresión predice un resultado numérico.\nClasificación predice un resultado que es un conjunto ordenado o desordenado de valores cualitativos.\n\nEstas son definiciones imperfectas y no tienen en cuenta todos los tipos de modelos posibles. En el Capítulo 6, nos referimos a esta característica de las técnicas supervisadas como modo modelo.\nDiferentes variables pueden tener diferentes roles, especialmente en un análisis de modelado supervisado. Los resultados (también conocidos como etiquetas, criterios de valoración o variables dependientes) son el valor que se predice en los modelos supervisados. Las variables independientes, que son el sustrato para hacer predicciones del resultado, también se denominan predictores, características o covariables (según el contexto). Los términos resultados y predictores se utilizan con mayor frecuencia en este libro.\nEn términos de los datos o variables en sí, ya sea que se utilicen para modelos supervisados ​​o no supervisados, como predictores o resultados, las dos categorías principales son cuantitativas y cualitativas. Ejemplos del primero son números reales como “3.14159” y números enteros como “42”. Los valores cualitativos, también conocidos como datos nominales, son aquellos que representan algún tipo de estado discreto que no se puede ubicar naturalmente en una escala numérica, como “rojo”, “verde” y “azul”."
  },
  {
    "objectID": "01-software-modeling.html#sec-model-phases",
    "href": "01-software-modeling.html#sec-model-phases",
    "title": "1  Software para modelar",
    "section": "\n1.5 ¿Cómo encaja el modelado en el proceso de análisis de datos?",
    "text": "1.5 ¿Cómo encaja el modelado en el proceso de análisis de datos?\n¿En qué circunstancias se crean los modelos? ¿Hay pasos que preceden a tal empresa? ¿Es la creación de modelos el primer paso en el análisis de datos?\n\nHay algunas fases críticas del análisis de datos que siempre vienen antes del modelado.\n\nEn primer lugar, está el proceso crónicamente subestimado de limpiar los datos. Independientemente de las circunstancias, debe investigar los datos para asegurarse de que sean aplicables a los objetivos de su proyecto, precisos y apropiados. Estos pasos fácilmente pueden llevar más tiempo que el resto del proceso de análisis de datos (según las circunstancias).\nLa limpieza de datos también puede superponerse con la segunda fase de comprensión de los datos, a menudo denominada análisis de datos exploratorios (EDA). EDA saca a la luz cómo se relacionan las diferentes variables entre sí, sus distribuciones, rangos típicos y otros atributos. Una buena pregunta para hacer en esta fase es: “¿Cómo obtuve estos datos?” Esta pregunta puede ayudarle a comprender cómo se muestrearon o filtraron los datos disponibles y si estas operaciones fueron apropiadas. Por ejemplo, al fusionar tablas de bases de datos, una unión puede salir mal y eliminar accidentalmente una o más subpoblaciones. Otra buena idea es preguntar si los datos son relevantes. Por ejemplo, para predecir si los pacientes tienen la enfermedad de Alzheimer, no sería prudente tener un conjunto de datos que contenga sujetos con la enfermedad y una muestra aleatoria de adultos sanos de la población general. Dada la naturaleza progresiva de la enfermedad, el modelo puede simplemente predecir quiénes son los pacientes de mayor edad.\nFinalmente, antes de iniciar un proceso de análisis de datos, deben existir expectativas claras sobre el objetivo del modelo y cómo se juzgará el desempeño (y el éxito). Se debe identificar al menos una métrica de desempeño con objetivos realistas de lo que se puede lograr. Las métricas estadísticas comunes, que se analizan con más detalle en el Capítulo 9, son la precisión de la clasificación, las tasas de verdaderos y falsos positivos, el error cuadrático medio, etc. Deben sopesarse los beneficios y desventajas relativos de estas métricas. También es importante que la métrica sea pertinente; la alineación con los objetivos más amplios del análisis de datos es fundamental.\nEl proceso de investigación de los datos puede no ser sencillo. Wickham y Grolemund (2016) contiene una excelente ilustración del proceso general de análisis de datos, reproducida en Figura 1.2. La ingesta de datos y la limpieza/ordenamiento se muestran como pasos iniciales. Cuando comienzan los pasos analíticos para la comprensión, son un proceso heurístico; No podemos predeterminar cuánto tiempo pueden tardar. El ciclo de transformación, modelado y visualización a menudo requiere múltiples iteraciones.\n\n\n\n\nFigura 1.2: El proceso de ciencia de datos (de R para Ciencia de Datos, usado con permiso)\n\n\n\nEste proceso iterativo es especialmente cierto para el modelado. Figura 1.3 emula la ruta típica para determinar un modelo apropiado. Las fases generales son:\n\nAnálisis de datos exploratorios (EDA): Inicialmente hay un vaivén entre el análisis numérico y la visualización de datos (representado en Figura 1.2) donde diferentes descubrimientos conducen a más preguntas y misiones secundarias de análisis de datos para comprender mejor los datos.\nIngeniería de características: La comprensión obtenida con EDA da como resultado la creación de términos de modelo específicos que facilitan el modelado preciso de los datos observados. Esto puede incluir metodologías complejas (por ejemplo, PCA) o características más simples (usando la proporción de dos predictores). Capítulo 8 se centra completamente en este importante paso.\nAjuste y selección de modelos (círculos grandes con segmentos alternos): Se genera una variedad de modelos y se compara su rendimiento. Algunos modelos requieren ajuste de parámetros en el que se deben especificar u optimizar algunos parámetros estructurales. Los segmentos alternos dentro de los círculos significan la división repetida de datos utilizada durante el remuestreo (consulte el Capítulo 10).\nEvaluación del modelo: Durante esta fase del desarrollo del modelo, evaluamos las métricas de rendimiento del modelo, examinamos gráficos residuales y realizamos otros análisis similares a EDA para comprender qué tan bien funcionan los modelos. En algunos casos, las comparaciones formales entre modelos (Capítulo 11) le ayudan a comprender si hay diferencias en los modelos dentro del ruido experimental.\n\n\n\n\n\nFigura 1.3: Un esquema para el proceso de modelado típico.\n\n\n\nDespués de una secuencia inicial de estas tareas, se obtiene una mayor comprensión sobre qué modelos son superiores y qué subpoblaciones de datos no se están estimando de manera efectiva. Esto conduce a EDA adicional y a ingeniería de características, otra ronda de modelado, etc. Una vez que se logran los objetivos del análisis de datos, normalmente los últimos pasos son finalizar, documentar y comunicar el modelo. Para los modelos predictivos, es común al final validar el modelo con un conjunto adicional de datos reservados para este propósito específico.\nComo ejemplo, Kuhn y Johnson (2020) utiliza datos para modelar el número de pasajeros diario del sistema de trenes públicos de Chicago utilizando predictores como la fecha, los resultados anteriores del número de pasajeros, el clima y otros factores. @ tbl-inner-monologue muestra una aproximación al hipotético monólogo interno de estos autores al analizar estos datos y eventualmente seleccionar un modelo con suficiente rendimiento.\n\n\n\n\nTabla 1.1: Monólogo interior hipotético de un desarrollador de modelos.\n\nPensamientos\nActividad\n\n\n\nLos valores de pasajeros diarios entre estaciones están extremadamente correlacionados.\nEDA\n\n\nEl número de pasajeros entre semana y los fines de semana se ve muy diferente.\nEDA\n\n\nUn día del verano de 2010 tiene un número anormalmente grande de ciclistas.\nEDA\n\n\n¿Qué estaciones tuvieron los valores más bajos de pasajeros diarios?\nEDA\n\n\nLas fechas deben codificarse al menos como día de la semana y año.\nIngeniería de características\n\n\nQuizás se podría utilizar PCA en los predictores correlacionados para facilitar su uso por parte de los modelos.\nIngeniería de características\n\n\nLos registros meteorológicos horarios probablemente deberían resumirse en mediciones diarias.\nIngeniería de características\n\n\nComencemos con una regresión lineal simple, K vecinos más cercanos y un árbol de decisión mejorado.\nEntrenamiento del modelo\n\n\n¿Cuántos vecinos se deben utilizar?\nAjuste del modelo\n\n\n¿Deberíamos ejecutar muchas iteraciones de impulso o solo unas pocas?\nAjuste del modelo\n\n\n¿Cuántos vecinos parecían óptimos para estos datos?\nAjuste del modelo\n\n\n¿Qué modelos tienen los errores cuadráticos medios más bajos?\nEvaluación del Modelo\n\n\n¿Qué días fueron mal predichos?\nEDA\n\n\nLas puntuaciones de importancia variable indican que la información meteorológica no es predictiva. Los eliminaremos del siguiente conjunto de modelos.\nEvaluación del Modelo\n\n\nParece que deberíamos centrarnos en muchas iteraciones de impulso para ese modelo.\nEvaluación del Modelo\n\n\nNecesitamos codificar funciones de vacaciones para mejorar las predicciones en (y alrededor de) esas fechas.\nIngeniería de características\n\n\nEliminemos a KNN de la lista de modelos.\nEvaluación del Modelo"
  },
  {
    "objectID": "02-tidyverse.html#tidyverse-principles",
    "href": "02-tidyverse.html#tidyverse-principles",
    "title": "2  A Tidyverse Primer",
    "section": "\n2.1 Tidyverse Principles",
    "text": "2.1 Tidyverse Principles\nThe full set of strategies and tactics for writing R code in the tidyverse style can be found at the website https://design.tidyverse.org. Here we can briefly describe several of the general tidyverse design principles, their motivation, and how we think about modeling as an application of these principles.\n\n2.1.1 Design for humans\nThe tidyverse focuses on designing R packages and functions that can be easily understood and used by a broad range of people. Both historically and today, a substantial percentage of R users are not people who create software or tools but instead people who create analyses or models. As such, R users do not typically have (or need) computer science backgrounds, and many are not interested in writing their own R packages.\nFor this reason, it is critical that R code be easy to work with to accomplish your goals. Documentation, training, accessibility, and other factors play an important part in achieving this. However, if the syntax itself is difficult for people to easily comprehend, documentation is a poor solution. The software itself must be intuitive.\nTo contrast the tidyverse approach with more traditional R semantics, consider sorting a data frame. Data frames can represent different types of data in each column, and multiple values in each row. Using only the core language, we can sort a data frame using one or more columns by reordering the rows via R’s subscripting rules in conjunction with order(); you cannot successfully use a function you might be tempted to try in such a situation because of its name, sort(). To sort the mtcars data by two of its columns, the call might look like:\n\nmtcars[order(mtcars$gear, mtcars$mpg), ]\n\nWhile very computationally efficient, it would be difficult to argue that this is an intuitive user interface. In dplyr by contrast, the tidyverse function arrange() takes a set of variable names as input arguments directly:\n\nlibrary(dplyr)\narrange(.data = mtcars, gear, mpg)\n\n\nThe variable names used here are “unquoted”; many traditional R functions require a character string to specify variables, but tidyverse functions take unquoted names or selector functions. The selectors allow for one or more readable rules that are applied to the column names. For example, ends_with(\"t\") would select the drat and wt columns of the mtcars data frame.\n\nAdditionally, naming is crucial. If you were new to R and were writing data analysis or modeling code involving linear algebra, you might be stymied when searching for a function that computes the matrix inverse. Using apropos(\"inv\") yields no candidates. It turns out that the base R function for this task is solve(), for solving systems of linear equations. For a matrix X, you would use solve(X) to invert X (with no vector for the right-hand side of the equation). This is only documented in the description of one of the arguments in the help file. In essence, you need to know the name of the solution to be able to find the solution.\nThe tidyverse approach is to use function names that are descriptive and explicit over those that are short and implicit. There is a focus on verbs (e.g., fit, arrange, etc.) for general methods. Verb-noun pairs are particularly effective; consider invert_matrix() as a hypothetical function name. In the context of modeling, it is also important to avoid highly technical jargon, such as Greek letters or obscure terms in terms. Names should be as self-documenting as possible.\nWhen there are similar functions in a package, function names are designed to be optimized for tab-completion. For example, the glue package has a collection of functions starting with a common prefix (glue_) that enables users to quickly find the function they are looking for.\n\n2.1.2 Reuse existing data structures\nWhenever possible, functions should avoid returning a novel data structure. If the results are conducive to an existing data structure, it should be used. This reduces the cognitive load when using software; no additional syntax or methods are required.\nThe data frame is the preferred data structure in tidyverse and tidymodels packages, because its structure is a good fit for such a broad swath of data science tasks. Specifically, the tidyverse and tidymodels favor the tibble, a modern reimagining of R’s data frame that we describe in the next section on example tidyverse syntax.\nAs an example, the rsample package can be used to create resamples of a data set, such as cross-validation or the bootstrap (described in Chapter 10). The resampling functions return a tibble with a column called splits of objects that define the resampled data sets. Three bootstrap samples of a data set might look like:\n\nboot_samp &lt;- rsample::bootstraps(mtcars, times = 3)\nboot_samp\n## # Bootstrap sampling \n## # A tibble: 3 × 2\n##   splits          id        \n##   &lt;list&gt;          &lt;chr&gt;     \n## 1 &lt;split [32/10]&gt; Bootstrap1\n## 2 &lt;split [32/10]&gt; Bootstrap2\n## 3 &lt;split [32/7]&gt;  Bootstrap3\nclass(boot_samp)\n## [1] \"bootstraps\" \"rset\"       \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nWith this approach, vector-based functions can be used with these columns, such as vapply() or purrr::map().1 This boot_samp object has multiple classes but inherits methods for data frames (\"data.frame\") and tibbles (\"tbl_df\"). Additionally, new columns can be added to the results without affecting the class of the data. This is much easier and more versatile for users to work with than a completely new object type that does not make its data structure obvious.\nOne downside to relying on common data structures is the potential loss of computational performance. In some situations, data can be encoded in specialized formats that are more efficient representations of the data. For example:\n\nIn computational chemistry, the structure-data file format (SDF) is a tool to take chemical structures and encode them in a format that is computationally efficient to work with.\nData that have a large number of values that are the same (such as zeros for binary data) can be stored in a sparse matrix format. This format can reduce the size of the data as well as enable more efficient computational techniques.\n\nThese formats are advantageous when the problem is well scoped and the potential data processing methods are both well defined and suited to such a format.2 However, once such constraints are violated, specialized data formats are less useful. For example, if we perform a transformation of the data that converts the data into fractional numbers, the output is no longer sparse; the sparse matrix representation is helpful for one specific algorithmic step in modeling, but this is often not true before or after that specific step.\n\nA specialized data structure is not flexible enough for an entire modeling workflow in the way that a common data structure is.\n\nOne important feature in the tibble produced by rsample is that the splits column is a list. In this instance, each element of the list has the same type of object: an rsplit object that contains the information about which rows of mtcars belong in the bootstrap sample. List columns can be very useful in data analysis and, as will be seen throughout this book, are important to tidymodels.\n\n2.1.3 Design for the pipe and functional programming\nThe magrittr pipe operator (%&gt;%) is a tool for chaining together a sequence of R functions.3 To demonstrate, consider the following commands that sort a data frame and then retain the first 10 rows:\n\nsmall_mtcars &lt;- arrange(mtcars, gear)\nsmall_mtcars &lt;- slice(small_mtcars, 1:10)\n\n# or more compactly: \nsmall_mtcars &lt;- slice(arrange(mtcars, gear), 1:10)\n\nThe pipe operator substitutes the value of the left-hand side of the operator as the first argument to the right-hand side, so we can implement the same result as before with:\n\nsmall_mtcars &lt;- \n  mtcars %&gt;% \n  arrange(gear) %&gt;% \n  slice(1:10)\n\nThe piped version of this sequence is more readable; this readability increases as more operations are added to a sequence. This approach to programming works in this example because all of the functions we used return the same data structure (a data frame) that is then the first argument to the next function. This is by design. When possible, create functions that can be incorporated into a pipeline of operations.\nIf you have used ggplot2, this is not unlike the layering of plot components into a ggplot object with the + operator. To make a scatter plot with a regression line, the initial ggplot() call is augmented with two additional operations:\n\nlibrary(ggplot2)\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point() + \n  geom_smooth(method = lm)\n\nWhile similar to the dplyr pipeline, note that the first argument to this pipeline is a data set (mtcars) and that each function call returns a ggplot object. Not all pipelines need to keep the returned values (plot objects) the same as the initial value (a data frame). Using the pipe operator with dplyr operations has acclimated many R users to expect to return a data frame when pipelines are used; as shown with ggplot2, this does not need to be the case. Pipelines are incredibly useful in modeling workflows but modeling pipelines can return, instead of a data frame, objects such as model components.\nR has excellent tools for creating, changing, and operating on functions, making it a great language for functional programming. This approach can replace iterative loops in many situations, such as when a function returns a value without other side effects.4\nLet’s look at an example. Suppose you are interested in the logarithm of the ratio of the fuel efficiency to the car weight. To those new to R and/or coming from other programming languages, a loop might seem like a good option:\n\nn &lt;- nrow(mtcars)\nratios &lt;- rep(NA_real_, n)\nfor (car in 1:n) {\n  ratios[car] &lt;- log(mtcars$mpg[car]/mtcars$wt[car])\n}\nhead(ratios)\n## [1] 2.081 1.988 2.285 1.896 1.693 1.655\n\nThose with more experience in R may know that there is a much simpler and faster vectorized version that can be computed by:\n\nratios &lt;- log(mtcars$mpg/mtcars$wt)\n\nHowever, in many real-world cases, the element-wise operation of interest is too complex for a vectorized solution. In such a case, a good approach is to write a function to do the computations. When we design for functional programming, it is important that the output depends only on the inputs and that the function has no side effects. Violations of these ideas in the following function are shown with comments:\n\ncompute_log_ratio &lt;- function(mpg, wt) {\n  log_base &lt;- getOption(\"log_base\", default = exp(1)) # gets external data\n  results &lt;- log(mpg/wt, base = log_base)\n  print(mean(results))                                # prints to the console\n  done &lt;&lt;- TRUE                                       # sets external data\n  results\n}\n\nA better version would be:\n\ncompute_log_ratio &lt;- function(mpg, wt, log_base = exp(1)) {\n  log(mpg/wt, base = log_base)\n}\n\nThe purrr package contains tools for functional programming. Let’s focus on the map() family of functions, which operates on vectors and always returns the same type of output. The most basic function, map(), always returns a list and uses the basic syntax of map(vector, function). For example, to take the square root of our data, we could:\n\nmap(head(mtcars$mpg, 3), sqrt)\n## [[1]]\n## [1] 4.583\n## \n## [[2]]\n## [1] 4.583\n## \n## [[3]]\n## [1] 4.775\n\nThere are specialized variants of map() that return values when we know or expect that the function will generate one of the basic vector types. For example, since the square root returns a double-precision number:\n\nmap_dbl(head(mtcars$mpg, 3), sqrt)\n## [1] 4.583 4.583 4.775\n\nThere are also mapping functions that operate across multiple vectors:\n\nlog_ratios &lt;- map2_dbl(mtcars$mpg, mtcars$wt, compute_log_ratio)\nhead(log_ratios)\n## [1] 2.081 1.988 2.285 1.896 1.693 1.655\n\nThe map() functions also allow for temporary, anonymous functions defined using the tilde character. The argument values are .x and .y for map2():\n\nmap2_dbl(mtcars$mpg, mtcars$wt, ~ log(.x/.y)) %&gt;% \n  head()\n## [1] 2.081 1.988 2.285 1.896 1.693 1.655\n\nThese examples have been trivial but, in later sections, will be applied to more complex problems.\n\nFor functional programming in tidy modeling, functions should be defined so that functions like map() can be used for iterative computations."
  },
  {
    "objectID": "02-tidyverse.html#examples-of-tidyverse-syntax",
    "href": "02-tidyverse.html#examples-of-tidyverse-syntax",
    "title": "2  A Tidyverse Primer",
    "section": "\n2.2 Examples of Tidyverse Syntax",
    "text": "2.2 Examples of Tidyverse Syntax\nLet’s begin our discussion of tidyverse syntax by exploring more deeply what a tibble is, and how tibbles work. Tibbles have slightly different rules than basic data frames in R. For example, tibbles naturally work with column names that are not syntactically valid variable names:\n\n# Wants valid names:\ndata.frame(`variable 1` = 1:2, two = 3:4)\n##   variable.1 two\n## 1          1   3\n## 2          2   4\n# But can be coerced to use them with an extra option:\ndf &lt;- data.frame(`variable 1` = 1:2, two = 3:4, check.names = FALSE)\ndf\n##   variable 1 two\n## 1          1   3\n## 2          2   4\n\n# But tibbles just work:\ntbbl &lt;- tibble(`variable 1` = 1:2, two = 3:4)\ntbbl\n## # A tibble: 2 × 2\n##   `variable 1`   two\n##          &lt;int&gt; &lt;int&gt;\n## 1            1     3\n## 2            2     4\n\nStandard data frames enable partial matching of arguments so that code using only a portion of the column names still works. Tibbles prevent this from happening since it can lead to accidental errors.\n\ndf$tw\n## [1] 3 4\n\ntbbl$tw\n## Warning: Unknown or uninitialised column: `tw`.\n## NULL\n\nTibbles also prevent one of the most common R errors: dropping dimensions. If a standard data frame subsets the columns down to a single column, the object is converted to a vector. Tibbles never do this:\n\ndf[, \"two\"]\n## [1] 3 4\n\ntbbl[, \"two\"]\n## # A tibble: 2 × 1\n##     two\n##   &lt;int&gt;\n## 1     3\n## 2     4\n\nThere are other advantages to using tibbles instead of data frames, such as better printing and more.5\nTo demonstrate some syntax, let’s use tidyverse functions to read in data that could be used in modeling. The data set comes from the city of Chicago’s data portal and contains daily ridership data for the city’s elevated train stations. The data set has columns for:\n\nthe station identifier (numeric)\nthe station name (character)\nthe date (character in mm/dd/yyyy format)\nthe day of the week (character)\nthe number of riders (numeric)\n\nOur tidyverse pipeline will conduct the following tasks, in order:\n\nUse the tidyverse package readr to read the data from the source website and convert them into a tibble. To do this, the read_csv() function can determine the type of data by reading an initial number of rows. Alternatively, if the column names and types are already known, a column specification can be created in R and passed to read_csv().\nFilter the data to eliminate a few columns that are not needed (such as the station ID) and change the column stationname to station. The function select() is used for this. When filtering, use either the column names or a dplyr selector function. When selecting names, a new variable name can be declared using the argument format new_name = old_name.\nConvert the date field to the R date format using the mdy() function from the lubridate package. We also convert the ridership numbers to thousands. Both of these computations are executed using the dplyr::mutate() function.\nUse the maximum number of rides for each station and day combination. This mitigates the issue of a small number of days that have more than one record of ridership numbers at certain stations. We group the ridership data by station and day, and then summarize within each of the 1999 unique combinations with the maximum statistic.\n\nThe tidyverse code for these steps is:\n\nlibrary(tidyverse)\nlibrary(lubridate)\n\nurl &lt;- \"https://data.cityofchicago.org/api/views/5neh-572f/rows.csv?accessType=DOWNLOAD&bom=true&format=true\"\n\nall_stations &lt;- \n  # Step 1: Read in the data.\n  read_csv(url) %&gt;% \n  # Step 2: filter columns and rename stationname\n  dplyr::select(station = stationname, date, rides) %&gt;% \n  # Step 3: Convert the character date field to a date encoding.\n  # Also, put the data in units of 1K rides\n  mutate(date = mdy(date), rides = rides / 1000) %&gt;% \n  # Step 4: Summarize the multiple records using the maximum.\n  group_by(date, station) %&gt;% \n  summarize(rides = max(rides), .groups = \"drop\")\n\nThis pipeline of operations illustrates why the tidyverse is popular. A series of data manipulations is used that have simple and easy to understand functions for each transformation; the series is bundled in a streamlined, readable way. The focus is on how the user interacts with the software. This approach enables more people to learn R and achieve their analysis goals, and adopting these same principles for modeling in R has the same benefits."
  },
  {
    "objectID": "02-tidyverse.html#chapter-summary",
    "href": "02-tidyverse.html#chapter-summary",
    "title": "2  A Tidyverse Primer",
    "section": "\n2.3 Chapter Summary",
    "text": "2.3 Chapter Summary\nThis chapter introduced the tidyverse, with a focus on applications for modeling and how tidyverse design principles inform the tidymodels framework. Think of the tidymodels framework as applying tidyverse principles to the domain of building models. We described differences in conventions between the tidyverse and base R, and introduced two important components of the tidyverse system, tibbles and the pipe operator %&gt;%. Data cleaning and processing can feel mundane at times, but these tasks are important for modeling in the real world; we illustrated how to use tibbles, the pipe, and tidyverse functions in an example data import and processing exercise.\n\n\n\n\nWickham, H, M Averick, J Bryan, W Chang, L McGowan, R François, G Grolemund, et al. 2019. “Welcome to the Tidyverse.” Journal of Open Source Software 4 (43).\n\n\nWickham, H, and G Grolemund. 2016. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. O’Reilly Media, Inc."
  },
  {
    "objectID": "02-tidyverse.html#footnotes",
    "href": "02-tidyverse.html#footnotes",
    "title": "2  Una introducción tidyverse",
    "section": "",
    "text": "Si nunca antes ha visto :: en el código R, es un método explícito para llamar a una función. El valor del lado izquierdo es el espacio de nombres donde reside la función (normalmente un nombre de paquete). El lado derecho es el nombre de la función. En los casos en que dos paquetes usan el mismo nombre de función, esta sintaxis garantiza que se llame a la función correcta.↩︎\nNo todos los algoritmos pueden aprovechar representaciones dispersas de datos. En tales casos, una matriz dispersa se debe convertir a un formato más convencional antes de continuar.↩︎\nEn R 4.1.0, también se introdujo un operador de canalización nativo |&gt;. En este libro, utilizamos la canalización magrittr ya que los usuarios de versiones anteriores de R no tendrán la nueva canalización nativa.↩︎\nEjemplos de efectos secundarios de funciones podrían incluir cambiar datos globales o imprimir un valor.↩︎\nEl capítulo 10 de Wickham y Grolemund (2016) tiene más detalles sobre tibbles.↩︎"
  },
  {
    "objectID": "03-base-r.html#an-example",
    "href": "03-base-r.html#an-example",
    "title": "3  A Review of R Modeling Fundamentals",
    "section": "\n3.1 An Example",
    "text": "3.1 An Example\nTo demonstrate some fundamentals for modeling in base R, let’s use experimental data from McDonald (2009), by way of Mangiafico (2015), on the relationship between the ambient temperature and the rate of cricket chirps per minute. Data were collected for two species: O. exclamationis and O. niveus. The data are contained in a data frame called crickets with a total of 31 data points. These data are shown in Figure 3.1 using the following ggplot2 code.\n\nlibrary(tidyverse)\n\ndata(crickets, package = \"modeldata\")\nnames(crickets)\n\n# Plot the temperature on the x-axis, the chirp rate on the y-axis. The plot\n# elements will be colored differently for each species:\nggplot(crickets, \n       aes(x = temp, y = rate, color = species, pch = species, lty = species)) + \n  # Plot points for each data point and color by species\n  geom_point(size = 2) + \n  # Show a simple linear model fit created separately for each species:\n  geom_smooth(method = lm, se = FALSE, alpha = 0.5) + \n  scale_color_brewer(palette = \"Paired\") +\n  labs(x = \"Temperature (C)\", y = \"Chirp Rate (per minute)\")\n\n\n## [1] \"species\" \"temp\"    \"rate\"\n\n\n\nFigure 3.1: Relationship between chirp rate and temperature for two different species of crickets\n\n\n\nThe data exhibit fairly linear trends for each species. For a given temperature, O. exclamationis appears to chirp more per minute than the other species. For an inferential model, the researchers might have specified the following null hypotheses prior to seeing the data:\n\nTemperature has no effect on the chirp rate.\nThere are no differences between the species’ chirp rate.\n\nThere may be some scientific or practical value in predicting the chirp rate but in this example we will focus on inference.\nTo fit an ordinary linear model in R, the lm() function is commonly used. The important arguments to this function are a model formula and a data frame that contains the data. The formula is symbolic. For example, the simple formula:\nrate ~ temp\nspecifies that the chirp rate is the outcome (since it is on the left-hand side of the tilde ~) and that the temperature value is the predictor.1 Suppose the data contained the time of day in which the measurements were obtained in a column called time. The formula:\nrate ~ temp + time\nwould not add the time and temperature values together. This formula would symbolically represent that temperature and time should be added as separate main effects to the model. A main effect is a model term that contains a single predictor variable.\nThere are no time measurements in these data but the species can be added to the model in the same way:\nrate ~ temp + species\nSpecies is not a quantitative variable; in the data frame, it is represented as a factor column with levels \"O. exclamationis\" and \"O. niveus\". The vast majority of model functions cannot operate on nonnumeric data. For species, the model needs to encode the species data in a numeric format. The most common approach is to use indicator variables (also known as dummy variables) in place of the original qualitative values. In this instance, since species has two possible values, the model formula will automatically encode this column as numeric by adding a new column that has a value of zero when the species is \"O. exclamationis\" and a value of one when the data correspond to \"O. niveus\". The underlying formula machinery automatically converts these values for the data set used to create the model, as well as for any new data points (for example, when the model is used for prediction).\n\nSuppose there were five species instead of two. The model formula, in this case, would create four binary columns that are binary indicators for four of the species. The reference level of the factor (i.e., the first level) is always left out of the predictor set. The idea is that, if you know the values of the four indicator variables, the value of the species can be determined. We discuss binary indicator variables in more detail in Section 8.4.1.\n\nThe model formula rate ~ temp + species creates a model with different y-intercepts for each species; the slopes of the regression lines could be different for each species as well. To accommodate this structure, an interaction term can be added to the model. This can be specified in a few different ways, and the most basic uses the colon:\nrate ~ temp + species + temp:species\n\n# A shortcut can be used to expand all interactions containing\n# interactions with two variables:\nrate ~ (temp + species)^2\n\n# Another shortcut to expand factors to include all possible\n# interactions (equivalent for this example):\nrate ~ temp * species\nIn addition to the convenience of automatically creating indicator variables, the formula offers a few other niceties:\n\nIn-line functions can be used in the formula. For example, to use the natural log of the temperature, we can create the formula rate ~ log(temp). Since the formula is symbolic by default, literal math can also be applied to the predictors using the identity function I(). To use Fahrenheit units, the formula could be rate ~ I( (temp * 9/5) + 32 ) to convert from Celsius.\nR has many functions that are useful inside of formulas. For example, poly(x, 3) adds linear, quadratic, and cubic terms for x to the model as main effects. The splines package also has several functions to create nonlinear spline terms in the formula.\nFor data sets where there are many predictors, the period shortcut is available. The period represents main effects for all of the columns that are not on the left-hand side of the tilde. Using ~ (.)^3 would add main effects as well as all two- and three-variable interactions to the model.\n\nReturning to our chirping crickets, let’s use a two-way interaction model. In this book, we use the suffix _fit for R objects that are fitted models.\n\ninteraction_fit &lt;-  lm(rate ~ (temp + species)^2, data = crickets) \n\n# To print a short summary of the model:\ninteraction_fit\n## \n## Call:\n## lm(formula = rate ~ (temp + species)^2, data = crickets)\n## \n## Coefficients:\n##           (Intercept)                   temp       speciesO. niveus  \n##               -11.041                  3.751                 -4.348  \n## temp:speciesO. niveus  \n##                -0.234\n\nThis output is a little hard to read. For the species indicator variables, R mashes the variable name (species) together with the factor level (O. niveus) with no delimiter.\nBefore going into any inferential results for this model, the fit should be assessed using diagnostic plots. We can use the plot() method for lm objects. This method produces a set of four plots for the object, each showing different aspects of the fit, as shown in Figure 3.2.\n\n# Place two plots next to one another:\npar(mfrow = c(1, 2))\n\n# Show residuals vs predicted values:\nplot(interaction_fit, which = 1)\n\n# A normal quantile plot on the residuals:\nplot(interaction_fit, which = 2)\n\n\n\n\n\nFigure 3.2: Residual diagnostic plots for the linear model with interactions, which appear reasonable enough to conduct inferential analysis\n\n\n\n\nWhen it comes to the technical details of evaluating expressions, R is lazy (as opposed to eager). This means that model fitting functions typically compute the minimum possible quantities at the last possible moment. For example, if you are interested in the coefficient table for each model term, this is not automatically computed with the model but is instead computed via the summary() method.\n\nOur next order of business with the crickets is to assess if the inclusion of the interaction term is necessary. The most appropriate approach for this model is to recompute the model without the interaction term and use the anova() method.\n\n# Fit a reduced model:\nmain_effect_fit &lt;-  lm(rate ~ temp + species, data = crickets) \n\n# Compare the two:\nanova(main_effect_fit, interaction_fit)\n## Analysis of Variance Table\n## \n## Model 1: rate ~ temp + species\n## Model 2: rate ~ (temp + species)^2\n##   Res.Df  RSS Df Sum of Sq    F Pr(&gt;F)\n## 1     28 89.3                         \n## 2     27 85.1  1      4.28 1.36   0.25\n\nThis statistical test generates a p-value of 0.25. This implies that there is a lack of evidence against the null hypothesis that the interaction term is not needed by the model. For this reason, we will conduct further analysis on the model without the interaction.\nResidual plots should be reassessed to make sure that our theoretical assumptions are valid enough to trust the p-values produced by the model (plots not shown here but spoiler alert: they are).\nWe can use the summary() method to inspect the coefficients, standard errors, and p-values of each model term:\n\nsummary(main_effect_fit)\n## \n## Call:\n## lm(formula = rate ~ temp + species, data = crickets)\n## \n## Residuals:\n##    Min     1Q Median     3Q    Max \n## -3.013 -1.130 -0.391  0.965  3.780 \n## \n## Coefficients:\n##                  Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)       -7.2109     2.5509   -2.83   0.0086 ** \n## temp               3.6028     0.0973   37.03  &lt; 2e-16 ***\n## speciesO. niveus -10.0653     0.7353  -13.69  6.3e-14 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 1.79 on 28 degrees of freedom\n## Multiple R-squared:  0.99,   Adjusted R-squared:  0.989 \n## F-statistic: 1.33e+03 on 2 and 28 DF,  p-value: &lt;2e-16\n\nThe chirp rate for each species increases by 3.6 chirps as the temperature increases by a single degree. This term shows strong statistical significance as evidenced by the p-value. The species term has a value of -10.07. This indicates that, across all temperature values, O. niveus has a chirp rate that is about 10 fewer chirps per minute than O. exclamationis. Similar to the temperature term, the species effect is associated with a very small p-value.\nThe only issue in this analysis is the intercept value. It indicates that at 0° C, there are negative chirps per minute for both species. While this doesn’t make sense, the data only go as low as 17.2° C and interpreting the model at 0° C would be an extrapolation. This would be a bad idea. That being said, the model fit is good within the applicable range of the temperature values; the conclusions should be limited to the observed temperature range.\nIf we needed to estimate the chirp rate at a temperature that was not observed in the experiment, we could use the predict() method. It takes the model object and a data frame of new values for prediction. For example, the model estimates the chirp rate for O. exclamationis for temperatures between 15° C and 20° C can be computed via:\n\nnew_values &lt;- data.frame(species = \"O. exclamationis\", temp = 15:20)\npredict(main_effect_fit, new_values)\n##     1     2     3     4     5     6 \n## 46.83 50.43 54.04 57.64 61.24 64.84\n\n\nNote that the non-numeric value of species is passed to the predict method, as opposed to the numeric, binary indicator variable.\n\nWhile this analysis has obviously not been an exhaustive demonstration of R’s modeling capabilities, it does highlight some major features important for the rest of this book:\n\nThe language has an expressive syntax for specifying model terms for both simple and quite complex models.\nThe R formula method has many conveniences for modeling that are also applied to new data when predictions are generated.\nThere are numerous helper functions (e.g., anova(), summary() and predict()) that you can use to conduct specific calculations after the fitted model is created.\n\nFinally, as previously mentioned, this framework was first published in 1992. Most of these ideas and methods were developed in that period but have remained remarkably relevant to this day. It highlights that the S language and, by extension R, has been designed for data analysis since its inception."
  },
  {
    "objectID": "03-base-r.html#formula",
    "href": "03-base-r.html#formula",
    "title": "3  A Review of R Modeling Fundamentals",
    "section": "\n3.2 What Does the R Formula Do?",
    "text": "3.2 What Does the R Formula Do?\nThe R model formula is used by many modeling packages. It usually serves multiple purposes:\n\nThe formula defines the columns that the model uses.\nThe standard R machinery uses the formula to encode the columns into an appropriate format.\nThe roles of the columns are defined by the formula.\n\nFor the most part, practitioners’ understanding of what the formula does is dominated by the last purpose. Our focus when typing out a formula is often to declare how the columns should be used. For example, the previous specification we discussed sets up predictors to be used in a specific way:\n(temp + species)^2\nOur focus, when seeing this, is that there are two predictors and the model should contain their main effects and the two-way interactions. However, this formula also implies that, since species is a factor, it should also create indicator variable columns for this predictor (see ?sec-dummies) and multiply those columns by the temp column to create the interactions. This transformation represents our second bullet point on encoding; the formula also defines how each column is encoded and can create additional columns that are not in the original data.\n\nThis is an important point that will come up multiple times in this text, especially when we discuss more complex feature engineering in ?sec-recipes and beyond. The formula in R has some limitations, and our approaches to overcoming them contend with all three aspects."
  },
  {
    "objectID": "03-base-r.html#tidiness-modeling",
    "href": "03-base-r.html#tidiness-modeling",
    "title": "3  A Review of R Modeling Fundamentals",
    "section": "\n3.3 Why Tidiness Is Important for Modeling",
    "text": "3.3 Why Tidiness Is Important for Modeling\nOne of the strengths of R is that it encourages developers to create a user interface that fits their needs. As an example, here are three common methods for creating a scatter plot of two numeric variables in a data frame called plot_data:\n\nplot(plot_data$x, plot_data$y)\n\nlibrary(lattice)\nxyplot(y ~ x, data = plot_data)\n\nlibrary(ggplot2)\nggplot(plot_data, aes(x = x, y = y)) + geom_point()\n\nIn these three cases, separate groups of developers devised three distinct interfaces for the same task. Each has advantages and disadvantages.\nIn comparison, the Python Developer’s Guide espouses the notion that, when approaching a problem:\n\n“There should be one – and preferably only one – obvious way to do it.”\n\nR is quite different from Python in this respect. An advantage of R’s diversity of interfaces is that it can evolve over time and fit different needs for different users.\nUnfortunately, some of the syntactical diversity is due to a focus on the needs of the person developing the code instead of the needs of the person using the code. Inconsistencies among packages can be a stumbling block for R users.\nSuppose your modeling project has an outcome with two classes. There are a variety of statistical and machine learning models you could choose from. In order to produce a class probability estimate for each sample, it is common for a model function to have a corresponding predict() method. However, there is significant heterogeneity in the argument values used by those methods to make class probability predictions; this heterogeneity can be difficult for even experienced users to navigate. A sampling of these argument values for different models is shown in Table 3.1.\n\n\n\n\nTable 3.1: Heterogeneous argument names for different modeling functions.\n\nFunction\nPackage\nCode\n\n\n\nlda()\nMASS\npredict(object)\n\n\nglm()\nstats\npredict(object, type = \"response\")\n\n\ngbm()\ngbm\npredict(object, type = \"response\", n.trees)\n\n\nmda()\nmda\npredict(object, type = \"posterior\")\n\n\nrpart()\nrpart\npredict(object, type = \"prob\")\n\n\nvarious\nRWeka\npredict(object, type = \"probability\")\n\n\nlogitboost()\nLogitBoost\npredict(object, type = \"raw\", nIter)\n\n\npamr.train()\npamr\npamr.predict(object, type = \"posterior\")\n\n\n\n\n\n\n\n\nNote that the last example has a custom function to make predictions instead of using the more common predict() interface (the generic predict() method). This lack of consistency is a barrier to day-to-day usage of R for modeling.\nAs another example of unpredictability, the R language has conventions for missing data that are handled inconsistently. The general rule is that missing data propagate more missing data; the average of a set of values with a missing data point is itself missing and so on. When models make predictions, the vast majority require all of the predictors to have complete values. There are several options baked in to R at this point with the generic function na.action(). This sets the policy for how a function should behave if there are missing values. The two most common policies are na.fail() and na.omit(). The former produces an error if missing data are present while the latter removes the missing data prior to calculations by case-wise deletion. From our previous example:\n\n# Add a missing value to the prediction set\nnew_values$temp[1] &lt;- NA\n\n# The predict method for `lm` defaults to `na.pass`:\npredict(main_effect_fit, new_values)\n##     1     2     3     4     5     6 \n##    NA 50.43 54.04 57.64 61.24 64.84\n\n# Alternatively \npredict(main_effect_fit, new_values, na.action = na.fail)\n## Error in na.fail.default(structure(list(temp = c(NA, 16L, 17L, 18L, 19L, : missing values in object\n\npredict(main_effect_fit, new_values, na.action = na.omit)\n##     2     3     4     5     6 \n## 50.43 54.04 57.64 61.24 64.84\n\nFrom a user’s point of view, na.omit() can be problematic. In our example, new_values has 6 rows but only 5 would be returned with na.omit(). To adjust for this, the user would have to determine which row had the missing value and interleave a missing value in the appropriate place if the predictions were merged into new_values.2 While it is rare that a prediction function uses na.omit() as its missing data policy, this does occur. Users who have determined this as the cause of an error in their code find it quite memorable.\nTo resolve the usage issues described here, the tidymodels packages have a set of design goals. Most of the tidymodels design goals fall under the existing rubric of “Design for Humans” from the tidyverse (Wickham et al. 2019), but with specific applications for modeling code. There are a few additional tidymodels design goals that complement those of the tidyverse. Some examples:\n\nR has excellent capabilities for object-oriented programming, and we use this in lieu of creating new function names (such as a hypothetical new predict_samples() function).\nSensible defaults are very important. Also, functions should have no default for arguments when it is more appropriate to force the user to make a choice (e.g., the file name argument for read_csv()).\nSimilarly, argument values whose default can be derived from the data should be. For example, for glm() the family argument could check the type of data in the outcome and, if no family was given, a default could be determined internally.\nFunctions should take the data structures that users have as opposed to the data structure that developers want. For example, a model function’s only interface should not be constrained to matrices. Frequently, users will have non-numeric predictors such as factors.\n\nMany of these ideas are described in the tidymodels guidelines for model implementation.3 In subsequent chapters, we will illustrate examples of existing issues, along with their solutions.\n\nA few existing R packages provide a unified interface to harmonize these heterogeneous modeling APIs, such as caret and mlr. The tidymodels framework is similar to these in adopting a unification of the function interface, as well as enforcing consistency in the function names and return values. It is different in its opinionated design goals and modeling implementation, discussed in detail throughout this book.\n\nThe broom::tidy() function, which we use throughout this book, is another tool for standardizing the structure of R objects. It can return many types of R objects in a more usable format. For example, suppose that predictors are being screened based on their correlation to the outcome column. Using purrr::map(), the results from cor.test() can be returned in a list for each predictor:\n\ncorr_res &lt;- map(mtcars %&gt;% select(-mpg), cor.test, y = mtcars$mpg)\n\n# The first of ten results in the vector: \ncorr_res[[1]]\n## \n##  Pearson's product-moment correlation\n## \n## data:  .x[[i]] and mtcars$mpg\n## t = -8.9, df = 30, p-value = 6e-10\n## alternative hypothesis: true correlation is not equal to 0\n## 95 percent confidence interval:\n##  -0.9258 -0.7163\n## sample estimates:\n##     cor \n## -0.8522\n\nIf we want to use these results in a plot, the standard format of hypothesis test results are not very useful. The tidy() method can return this as a tibble with standardized names:\n\nlibrary(broom)\n\ntidy(corr_res[[1]])\n## # A tibble: 1 × 8\n##   estimate statistic  p.value parameter conf.low conf.high method        alternative\n##      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;int&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;      \n## 1   -0.852     -8.92 6.11e-10        30   -0.926    -0.716 Pearson's pr… two.sided\n\nThese results can be “stacked” and added to a ggplot(), as shown in Figure 3.3.\n\ncorr_res %&gt;% \n  # Convert each to a tidy format; `map_dfr()` stacks the data frames \n  map_dfr(tidy, .id = \"predictor\") %&gt;% \n  ggplot(aes(x = fct_reorder(predictor, estimate))) + \n  geom_point(aes(y = estimate)) + \n  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = .1) +\n  labs(x = NULL, y = \"Correlation with mpg\")\n\n\n\n\n\nFigure 3.3: Correlations (and 95% confidence intervals) between predictors and the outcome in the mtcars data set\n\n\n\nCreating such a plot is possible using core R language functions, but automatically reformatting the results makes for more concise code with less potential for errors."
  },
  {
    "objectID": "03-base-r.html#combining-base-r-models-and-the-tidyverse",
    "href": "03-base-r.html#combining-base-r-models-and-the-tidyverse",
    "title": "3  A Review of R Modeling Fundamentals",
    "section": "\n3.4 Combining Base R Models and the Tidyverse",
    "text": "3.4 Combining Base R Models and the Tidyverse\nR modeling functions from the core language or other R packages can be used in conjunction with the tidyverse, especially with the dplyr, purrr, and tidyr packages. For example, if we wanted to fit separate models for each cricket species, we can first break out the cricket data by this column using dplyr::group_nest():\n\nsplit_by_species &lt;- \n  crickets %&gt;% \n  group_nest(species) \nsplit_by_species\n## # A tibble: 2 × 2\n##   species                        data\n##   &lt;fct&gt;            &lt;list&lt;tibble[,2]&gt;&gt;\n## 1 O. exclamationis           [14 × 2]\n## 2 O. niveus                  [17 × 2]\n\nThe data column contains the rate and temp columns from crickets in a list column. From this, the purrr::map() function can create individual models for each species:\n\nmodel_by_species &lt;- \n  split_by_species %&gt;% \n  mutate(model = map(data, ~ lm(rate ~ temp, data = .x)))\nmodel_by_species\n## # A tibble: 2 × 3\n##   species                        data model \n##   &lt;fct&gt;            &lt;list&lt;tibble[,2]&gt;&gt; &lt;list&gt;\n## 1 O. exclamationis           [14 × 2] &lt;lm&gt;  \n## 2 O. niveus                  [17 × 2] &lt;lm&gt;\n\nTo collect the coefficients for each of these models, use broom::tidy() to convert them to a consistent data frame format so that they can be unnested:\n\nmodel_by_species %&gt;% \n  mutate(coef = map(model, tidy)) %&gt;% \n  select(species, coef) %&gt;% \n  unnest(cols = c(coef))\n## # A tibble: 4 × 6\n##   species          term        estimate std.error statistic  p.value\n##   &lt;fct&gt;            &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n## 1 O. exclamationis (Intercept)   -11.0      4.77      -2.32 3.90e- 2\n## 2 O. exclamationis temp            3.75     0.184     20.4  1.10e-10\n## 3 O. niveus        (Intercept)   -15.4      2.35      -6.56 9.07e- 6\n## 4 O. niveus        temp            3.52     0.105     33.6  1.57e-15\n\n\nList columns can be very powerful in modeling projects. List columns provide containers for any type of R objects, from a fitted model itself to the important data frame structure."
  },
  {
    "objectID": "03-base-r.html#the-tidymodels-metapackage",
    "href": "03-base-r.html#the-tidymodels-metapackage",
    "title": "3  A Review of R Modeling Fundamentals",
    "section": "\n3.5 The tidymodels Metapackage",
    "text": "3.5 The tidymodels Metapackage\nThe tidyverse (Chapter 2) is designed as a set of modular R packages, each with a fairly narrow scope. The tidymodels framework follows a similar design. For example, the rsample package focuses on data splitting and resampling. Although resampling methods are critical to other activities of modeling (e.g., measuring performance), they reside in a single package, and performance metrics are contained in a different, separate package, yardstick. There are many benefits to adopting this philosophy of modular packages, from less bloated model deployment to smoother package maintenance.\nThe downside to this philosophy is that there are a lot of packages in the tidymodels framework. To compensate for this, the tidymodels package (which you can think of as a metapackage like the tidyverse package) loads a core set of tidymodels and tidyverse packages. Loading the package shows which packages are attached:\n\nlibrary(tidymodels)\n## ── Attaching packages ─────────────────────────────────────────── tidymodels 1.1.1 ──\n## ✔ broom        1.0.5     ✔ recipes      1.0.8\n## ✔ dials        1.2.0     ✔ rsample      1.2.0\n## ✔ dplyr        1.1.3     ✔ tibble       3.2.1\n## ✔ ggplot2      3.4.3     ✔ tidyr        1.3.0\n## ✔ infer        1.0.5     ✔ tune         1.1.2\n## ✔ modeldata    1.2.0     ✔ workflows    1.1.3\n## ✔ parsnip      1.1.1     ✔ workflowsets 1.0.1\n## ✔ purrr        1.0.2     ✔ yardstick    1.2.0\n## ── Conflicts ────────────────────────────────────────────── tidymodels_conflicts() ──\n## ✖ purrr::discard() masks scales::discard()\n## ✖ dplyr::filter()  masks stats::filter()\n## ✖ dplyr::lag()     masks stats::lag()\n## ✖ recipes::step()  masks stats::step()\n## • Use suppressPackageStartupMessages() to eliminate package startup messages\n\nIf you have used the tidyverse, you’ll notice some familiar names as a few tidyverse packages, such as dplyr and ggplot2, are loaded together with the tidymodels packages. We’ve already said that the tidymodels framework applies tidyverse principles to modeling, but the tidymodels framework also literally builds on some of the most fundamental tidyverse packages such as these.\nLoading the metapackage also shows if there are function naming conflicts with previously loaded packages. As an example of a naming conflict, before loading tidymodels, invoking the filter() function will execute the function in the stats package. After loading tidymodels, it will execute the dplyr function of the same name.\nThere are a few ways to handle naming conflicts. The function can be called with its namespace (e.g., stats::filter()). This is not bad practice, but it does make the code less readable.\nAnother option is to use the conflicted package. We can set a rule that remains in effect until the end of the R session to ensure that one specific function will always run if no namespace is given in the code. As an example, if we prefer the dplyr version of the previous function:\n\nlibrary(conflicted)\nconflict_prefer(\"filter\", winner = \"dplyr\")\n\nFor convenience, tidymodels contains a function that captures most of the common naming conflicts that we might encounter:\n\ntidymodels_prefer(quiet = FALSE)\n## [conflicted] Will prefer agua::refit over any other package.\n## [conflicted] Will prefer dials::Laplace over any other package.\n## [conflicted] Will prefer dials::max_rules over any other package.\n## [conflicted] Will prefer dials::neighbors over any other package.\n## [conflicted] Will prefer dials::prune over any other package.\n## [conflicted] Will prefer dials::smoothness over any other package.\n## [conflicted] Will prefer dplyr::collapse over any other package.\n## [conflicted] Will prefer dplyr::combine over any other package.\n## [conflicted] Will prefer dplyr::filter over any other package.\n## [conflicted] Will prefer dplyr::rename over any other package.\n## [conflicted] Will prefer dplyr::select over any other package.\n## [conflicted] Will prefer dplyr::slice over any other package.\n## [conflicted] Will prefer ggplot2::`%+%` over any other package.\n## [conflicted] Will prefer ggplot2::margin over any other package.\n## [conflicted] Will prefer parsnip::bart over any other package.\n## [conflicted] Will prefer parsnip::fit over any other package.\n## [conflicted] Will prefer parsnip::mars over any other package.\n## [conflicted] Will prefer parsnip::pls over any other package.\n## [conflicted] Will prefer purrr::cross over any other package.\n## [conflicted] Will prefer purrr::invoke over any other package.\n## [conflicted] Will prefer purrr::map over any other package.\n## [conflicted] Will prefer recipes::discretize over any other package.\n## [conflicted] Will prefer recipes::step over any other package.\n## [conflicted] Will prefer rsample::populate over any other package.\n## [conflicted] Will prefer scales::rescale over any other package.\n## [conflicted] Will prefer themis::step_downsample over any other package.\n## [conflicted] Will prefer themis::step_upsample over any other package.\n## [conflicted] Will prefer tidyr::expand over any other package.\n## [conflicted] Will prefer tidyr::extract over any other package.\n## [conflicted] Will prefer tidyr::pack over any other package.\n## [conflicted] Will prefer tidyr::unpack over any other package.\n## [conflicted] Will prefer tune::parameters over any other package.\n## [conflicted] Will prefer tune::tune over any other package.\n## [conflicted] Will prefer yardstick::get_weights over any other package.\n## [conflicted] Will prefer yardstick::precision over any other package.\n## [conflicted] Will prefer yardstick::recall over any other package.\n## [conflicted] Will prefer yardstick::spec over any other package.\n## [conflicted] Will prefer recipes::update over Matrix::update.\n## ── Conflicts ───────────────────────────────────────────────── tidymodels_prefer() ──\n\n\nBe aware that using this function opts you in to using conflicted::conflict_prefer() for all namespace conflicts, making every conflict an error and forcing you to choose which function to use. The function tidymodels::tidymodels_prefer() handles the most common conflicts from tidymodels functions, but you will need to handle other conflicts in your R session yourself."
  },
  {
    "objectID": "03-base-r.html#chapter-summary",
    "href": "03-base-r.html#chapter-summary",
    "title": "3  A Review of R Modeling Fundamentals",
    "section": "\n3.6 Chapter Summary",
    "text": "3.6 Chapter Summary\nThis chapter reviewed core R language conventions for creating and using models that are an important foundation for the rest of this book. The formula operator is an expressive and important aspect of fitting models in R and often serves multiple purposes in non-tidymodels functions. Traditional R approaches to modeling have some limitations, especially when it comes to fluently handling and visualizing model output. The tidymodels metapackage applies tidyverse design philosophy to modeling packages.\n\n\n\n\nChambers, J, and T Hastie, eds. 1992. Statistical Models in S. Boca Raton, FL: CRC Press, Inc.\n\n\nMangiafico, S. 2015. “An R Companion for the Handbook of Biological Statistics.” https://rcompanion.org/handbook/.\n\n\nMcDonald, J. 2009. Handbook of Biological Statistics. Sparky House Publishing.\n\n\nWickham, H, M Averick, J Bryan, W Chang, L McGowan, R François, G Grolemund, et al. 2019. “Welcome to the Tidyverse.” Journal of Open Source Software 4 (43)."
  },
  {
    "objectID": "03-base-r.html#footnotes",
    "href": "03-base-r.html#footnotes",
    "title": "3  Una revisión de los fundamentos del modelado con R",
    "section": "",
    "text": "La mayoría de las funciones del modelo agregan implícitamente una columna de intersección.↩︎\nUna política base R llamada na.exclude() hace exactamente esto.↩︎\nhttps://tidymodels.github.io/model-implementation-principles↩︎"
  },
  {
    "objectID": "04-ames.html#exploring-features-of-homes-in-ames",
    "href": "04-ames.html#exploring-features-of-homes-in-ames",
    "title": "4  The Ames Housing Data",
    "section": "\n4.1 Exploring Features of Homes in Ames",
    "text": "4.1 Exploring Features of Homes in Ames\nLet’s start our exploratory data analysis by focusing on the outcome we want to predict: the last sale price of the house (in USD). We can create a histogram to see the distribution of sale prices in Figure 4.1.\n\nlibrary(tidymodels)\ntidymodels_prefer()\n\nggplot(ames, aes(x = Sale_Price)) + \n  geom_histogram(bins = 50, col= \"white\")\n\n\n\n\n\nFigure 4.1: Sale prices of houses in Ames, Iowa\n\n\n\nThis plot shows us that the data are right-skewed; there are more inexpensive houses than expensive ones. The median sale price was $160,000, and the most expensive house was $755,000. When modeling this outcome, a strong argument can be made that the price should be log-transformed. The advantages of this type of transformation are that no houses would be predicted with negative sale prices and that errors in predicting expensive houses will not have an undue influence on the model. Also, from a statistical perspective, a logarithmic transform may also stabilize the variance in a way that makes inference more legitimate. We can use similar steps to now visualize the transformed data, shown in Figure 4.2.\n\nggplot(ames, aes(x = Sale_Price)) + \n  geom_histogram(bins = 50, col= \"white\") +\n  scale_x_log10()\n\n\n\n\n\nFigure 4.2: Sale prices of houses in Ames, Iowa after a log (base 10) transformation\n\n\n\nWhile not perfect, this will likely result in better models than using the untransformed data, for the reasons just outlined.\n\nThe disadvantages of transforming the outcome mostly relate to interpretation of model results.\n\nThe units of the model coefficients might be more difficult to interpret, as will measures of performance. For example, the root mean squared error (RMSE) is a common performance metric used in regression models. It uses the difference between the observed and predicted values in its calculations. If the sale price is on the log scale, these differences (i.e., the residuals) are also on the log scale. It can be difficult to understand the quality of a model whose RMSE is 0.15 on such a log scale.\nDespite these drawbacks, the models used in this book use the log transformation for this outcome. From this point on, the outcome column is prelogged in the ames data frame:\n\names &lt;- ames %&gt;% mutate(Sale_Price = log10(Sale_Price))\n\nAnother important aspect of these data for our modeling is their geographic locations. This spatial information is contained in the data in two ways: a qualitative Neighborhood label as well as quantitative longitude and latitude data. To visualize the spatial information, let’s use both together to plot the data on a map in Figure 4.3.\n\n\n\n\nFigure 4.3: Neighborhoods in Ames, IA\n\n\n\nWe can see a few noticeable patterns. First, there is a void of data points in the center of Ames. This corresponds to the campus of Iowa State University where there are no residential houses. Second, while there are a number of adjacent neighborhoods, others are geographically isolated. For example, as Figure 4.4 shows, Timberland is located apart from almost all other neighborhoods.\n\n\n\n\nFigure 4.4: Locations of homes in Timberland\n\n\n\nFigure 4.5 visualizes how the Meadow Village neighborhood in southwest Ames is like an island of properties inside the sea of properties that make up the Mitchell neighborhood.\n\n\n\n\nFigure 4.5: Locations of homes in Meadow Village and Mitchell\n\n\n\nA detailed inspection of the map also shows that the neighborhood labels are not completely reliable. For example, Figure 4.6 shows some properties labeled as being in Northridge are surrounded by homes in the adjacent Somerset neighborhood.\n\n\n\n\nFigure 4.6: Locations of homes in Somerset and Northridge\n\n\n\nAlso, there are ten isolated homes labeled as being in Crawford that, as you can see in Figure 4.7, are not close to the majority of the other homes in that neighborhood.\n\n\n\n\nFigure 4.7: Locations of homes in Crawford\n\n\n\nAlso notable is the “Iowa Department of Transportation (DOT) and Rail Road” neighborhood adjacent to the main road on the east side of Ames, shown in Figure 4.8. There are several clusters of homes within this neighborhood as well as some longitudinal outliers; the two homes farthest east are isolated from the other locations.\n\n\n\n\nFigure 4.8: Homes labeled as Iowa Department of Transportation (DOT) and Rail Road\n\n\n\nAs described in Chapter 1, it is critical to conduct exploratory data analysis prior to beginning any modeling. These housing data have characteristics that present interesting challenges about how the data should be processed and modeled. We describe many of these in later chapters. Some basic questions that could be examined during this exploratory stage include:\n\nIs there anything odd or noticeable about the distributions of the individual predictors? Is there much skewness or any pathological distributions?\nAre there high correlations between predictors? For example, there are multiple predictors related to house size. Are some redundant?\nAre there associations between predictors and the outcomes?\n\nMany of these questions will be revisited as these data are used throughout this book."
  },
  {
    "objectID": "04-ames.html#sec-ames-summary",
    "href": "04-ames.html#sec-ames-summary",
    "title": "4  Los datos de vivienda de Ames",
    "section": "\n4.2 Resumen del capítulo",
    "text": "4.2 Resumen del capítulo\nEste capítulo presentó el conjunto de datos de vivienda de Ames e investigó algunas de sus características. Este conjunto de datos se utilizará en capítulos posteriores para demostrar la sintaxis de tidymodels. El análisis de datos exploratorios como este es un componente esencial de cualquier proyecto de modelado; EDA descubre información que contribuye a una mejor práctica de modelado.\nEl código importante para preparar el conjunto de datos de Ames que llevaremos a los capítulos siguientes es:\n\nlibrary(tidymodels)\ndata(ames)\names &lt;- ames %&gt;% mutate(Sale_Price = log10(Sale_Price))\n\n\n\n\n\nDe Cock, D. 2011. «Ames, Iowa: Alternative to the Boston housing data as an end of semester regression project». Journal of Statistics Education 19 (3)."
  },
  {
    "objectID": "04-ames.html#footnotes",
    "href": "04-ames.html#footnotes",
    "title": "4  Los datos de vivienda de Ames",
    "section": "",
    "text": "Para obtener una descripción completa de las diferencias, consulte https://github.com/topepo/AmesHousing/blob/master/R/make_ames.R.↩︎"
  },
  {
    "objectID": "03-base-r.html#sec-formula",
    "href": "03-base-r.html#sec-formula",
    "title": "3  Una revisión de los fundamentos del modelado con R",
    "section": "\n3.2 ¿Qué hace la fórmula R?",
    "text": "3.2 ¿Qué hace la fórmula R?\nMuchos paquetes de modelado utilizan la fórmula del modelo R. Suele tener múltiples propósitos:\n\nLa fórmula define las columnas que utiliza el modelo.\nLa maquinaria R estándar utiliza la fórmula para codificar las columnas en un formato apropiado.\nLos roles de las columnas están definidos por la fórmula.\n\nEn su mayor parte, la comprensión de los profesionales sobre lo que hace la fórmula está dominada por el último propósito. Nuestro enfoque al escribir una fórmula suele ser declarar cómo se deben usar las columnas. Por ejemplo, la especificación anterior que analizamos configura predictores que se utilizarán de una manera específica:\n(temp + species)^2\nNuestro enfoque, al ver esto, es que hay dos predictores y el modelo debe contener sus efectos principales y las interacciones bidireccionales. Sin embargo, esta fórmula también implica que, dado que species es un factor, también se deben crear columnas de variables indicadoras para este predictor (ver Sección 8.4.1) y multiplicar esas columnas por la columna temp para crear el interacciones. Esta transformación representa nuestro segundo punto sobre codificación; la fórmula también define cómo se codifica cada columna y puede crear columnas adicionales que no están en los datos originales.\n\nEste es un punto importante que surgirá varias veces en este texto, especialmente cuando analicemos la ingeniería de funciones más compleja en el Capítulo 8 y más allá. La fórmula en R tiene algunas limitaciones y nuestros enfoques para superarlas se enfrentan a los tres aspectos."
  },
  {
    "objectID": "03-base-r.html#sec-tidiness-modeling",
    "href": "03-base-r.html#sec-tidiness-modeling",
    "title": "3  Una revisión de los fundamentos del modelado con R",
    "section": "\n3.3 Por qué el orden es importante para modelar",
    "text": "3.3 Por qué el orden es importante para modelar\nUno de los puntos fuertes de R es que anima a los desarrolladores a crear una interfaz de usuario que se ajuste a sus necesidades. A modo de ejemplo, aquí se muestran tres métodos comunes para crear un diagrama de dispersión de dos variables numéricas en un marco de datos llamado plot_data:\n\nplot(plot_data$x, plot_data$y)\n\nlibrary(lattice)\nxyplot(y ~ x, data = plot_data)\n\nlibrary(ggplot2)\nggplot(plot_data, aes(x = x, y = y)) + geom_point()\n\nEn estos tres casos, grupos separados de desarrolladores idearon tres interfaces distintas para la misma tarea. Cada uno tiene ventajas y desventajas.\nEn comparación, la Guía del desarrollador de Python defiende la noción de que, al abordar un problema:\n\n“Debería haber una, y preferiblemente sólo una, manera obvia de hacerlo.”\n\nR es bastante diferente de Python a este respecto. Una ventaja de la diversidad de interfaces de R es que puede evolucionar con el tiempo y adaptarse a diferentes necesidades de diferentes usuarios.\nDesafortunadamente, parte de la diversidad sintáctica se debe a un enfoque en las necesidades de la persona que desarrolla el código en lugar de las necesidades de la persona que usa el código. Las inconsistencias entre paquetes pueden ser un obstáculo para los usuarios de R.\nSuponga que su proyecto de modelado tiene un resultado con dos clases. Existe una variedad de modelos estadísticos y de aprendizaje automático entre los que puede elegir. Para producir una estimación de probabilidad de clase para cada muestra, es común que una función de modelo tenga un método predict() correspondiente. Sin embargo, existe una heterogeneidad significativa en los valores de los argumentos utilizados por esos métodos para hacer predicciones de probabilidad de clase; esta heterogeneidad puede resultar difícil de navegar incluso para los usuarios experimentados. En Tabla 3.1 se muestra una muestra de estos valores de argumentos para diferentes modelos.\n\n\n\n\nTabla 3.1: Nombres de argumentos heterogéneos para diferentes funciones de modelado.\n\nFunción\nPaquete\nCódigo\n\n\n\nlda()\nMASS\npredict(object)\n\n\nglm()\nstats\npredict(object, type = \"response\")\n\n\ngbm()\ngbm\npredict(object, type = \"response\", n.trees)\n\n\nmda()\nmda\npredict(object, type = \"posterior\")\n\n\nrpart()\nrpart\npredict(object, type = \"prob\")\n\n\nvarious\nRWeka\npredict(object, type = \"probability\")\n\n\nlogitboost()\nLogitBoost\npredict(object, type = \"raw\", nIter)\n\n\npamr.train()\npamr\npamr.predict(object, type = \"posterior\")\n\n\n\n\n\n\n\n\nTenga en cuenta que el último ejemplo tiene una función personalizada para hacer predicciones en lugar de utilizar la interfaz predict() más común (el método genérico predict()). Esta falta de coherencia es una barrera para el uso diario de R para modelado.\nComo otro ejemplo de imprevisibilidad, el lenguaje R tiene convenciones para datos faltantes que se manejan de manera inconsistente. La regla general es que los datos faltantes propagan más datos faltantes; el promedio de un conjunto de valores al que le falta un punto de datos también falta, y así sucesivamente. Cuando los modelos hacen predicciones, la gran mayoría requiere que todos los predictores tengan valores completos. Hay varias opciones integradas en R en este punto con la función genérica na.action(). Esto establece la política sobre cómo debe comportarse una función si faltan valores. Las dos políticas más comunes son na.fail() y na.omit(). El primero produce un error si hay datos faltantes, mientras que el segundo elimina los datos faltantes antes de los cálculos mediante eliminación entre mayúsculas y minúsculas. De nuestro ejemplo anterior:\n\n# Añade un valor faltante al conjunto de predicción\nnew_values$temp[1] &lt;- NA\n\n# El método de predicción para `lm` por defecto es `na.pass`:\npredict(main_effect_fit, new_values)\n##     1     2     3     4     5     6 \n##    NA 50.43 54.04 57.64 61.24 64.84\n\n# Alternativamente \npredict(main_effect_fit, new_values, na.action = na.fail)\n## Error in na.fail.default(structure(list(temp = c(NA, 16L, 17L, 18L, 19L, : missing values in object\n\npredict(main_effect_fit, new_values, na.action = na.omit)\n##     2     3     4     5     6 \n## 50.43 54.04 57.64 61.24 64.84\n\nDesde el punto de vista del usuario, na.omit() puede ser problemático. En nuestro ejemplo, new_values tiene filas 6 pero solo 5 se devolvería con na.omit(). Para ajustar esto, el usuario tendría que determinar qué fila tenía el valor faltante e intercalar un valor faltante en el lugar apropiado si las predicciones se fusionaran en new_values.2 Si bien es poco común que una función de predicción utiliza na.omit() como política de datos faltantes, esto ocurre. Los usuarios que han determinado esto como la causa de un error en su código lo encuentran bastante memorable.\nPara resolver los problemas de uso descritos aquí, los paquetes tidymodels tienen un conjunto de objetivos de diseño. La mayoría de los objetivos de diseño de tidymodels se incluyen en la rúbrica existente de “Diseño para humanos” de tidyverse (Wickham et al. 2019), pero con aplicaciones específicas para código de modelado. Hay algunos objetivos de diseño de tidymodels adicionales que complementan los del tidyverse. Algunos ejemplos:\n\nR tiene excelentes capacidades para la programación orientada a objetos, y las usamos en lugar de crear nuevos nombres de funciones (como una nueva función hipotética predict_samples()).\nLos valores predeterminados sensatos son muy importantes. Además, las funciones no deberían tener argumentos predeterminados cuando es más apropiado obligar al usuario a tomar una decisión (por ejemplo, el argumento del nombre del archivo para read_csv()).\nDe manera similar, los valores de los argumentos cuyo valor predeterminado pueda derivarse de los datos deberían serlo. Por ejemplo, para glm(), el argumento family podría verificar el tipo de datos en el resultado y, si no se proporcionó ninguna family, se podría determinar internamente un valor predeterminado.\nLas funciones deben tomar las estructuras de datos que tienen los usuarios en lugar de la estructura de datos que desean los desarrolladores. Por ejemplo, la única interfaz de una función modelo no debe limitarse a matrices. Con frecuencia, los usuarios tendrán predictores no numéricos, como factores.\n\nMuchas de estas ideas se describen en las pautas de tidymodels para la implementación de modelos.3 En los capítulos siguientes, ilustraremos ejemplos de problemas existentes, junto con sus soluciones.\n\nAlgunos paquetes R existentes proporcionan una interfaz unificada para armonizar estas API de modelado heterogéneas, como caret y mlr. El marco tidymodels es similar a estos en cuanto a que adopta una unificación de la interfaz de funciones, así como también exige coherencia en los nombres de las funciones y los valores de retorno. Se diferencia en sus obstinados objetivos de diseño y en su implementación de modelado, que se analizan en detalle a lo largo de este libro.\n\nLa función broom::tidy(), que utilizamos a lo largo de este libro, es otra herramienta para estandarizar la estructura de los objetos R. Puede devolver muchos tipos de objetos R en un formato más utilizable. Por ejemplo, supongamos que los predictores se seleccionan en función de su correlación con la columna de resultados. Usando purrr::map(), los resultados de cor.test() se pueden devolver en una lista para cada predictor:\n\ncorr_res &lt;- map(mtcars %&gt;% select(-mpg), cor.test, y = mtcars$mpg)\n\n# El primero de diez resultados en el vector:\ncorr_res[[1]]\n## \n##  Pearson's product-moment correlation\n## \n## data:  .x[[i]] and mtcars$mpg\n## t = -8.9, df = 30, p-value = 6e-10\n## alternative hypothesis: true correlation is not equal to 0\n## 95 percent confidence interval:\n##  -0.9258 -0.7163\n## sample estimates:\n##     cor \n## -0.8522\n\nSi queremos utilizar estos resultados en una gráfica, el formato estándar de los resultados de las pruebas de hipótesis no es muy útil. El método tidy() puede devolver esto como un tibble con nombres estandarizados:\n\nlibrary(broom)\n\ntidy(corr_res[[1]])\n## # A tibble: 1 × 8\n##   estimate statistic  p.value parameter conf.low conf.high method        alternative\n##      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;int&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;      \n## 1   -0.852     -8.92 6.11e-10        30   -0.926    -0.716 Pearson's pr… two.sided\n\nEstos resultados se pueden “apilar” y agregar a un ggplot(), como se muestra en Figura 3.3.\n\ncorr_res %&gt;% \n  # Convierte cada uno a un formato ordenado; `map_dfr()` apila los marcos de datos \n  map_dfr(tidy, .id = \"predictor\") %&gt;% \n  ggplot(aes(x = fct_reorder(predictor, estimate))) + \n  geom_point(aes(y = estimate)) + \n  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = .1) +\n  labs(x = NULL, y = \"Correlación con mpg\")\n\n\n\n\n\nFigura 3.3: Correlaciones (e intervalos de confianza del 95%) entre los predictores y el resultado en el conjunto de datos mtcars\n\n\n\nEs posible crear un gráfico de este tipo utilizando las funciones básicas del lenguaje R, pero reformatear automáticamente los resultados genera un código más conciso con menos posibilidades de errores."
  },
  {
    "objectID": "05-data-spending.html#sec-splitting-methods",
    "href": "05-data-spending.html#sec-splitting-methods",
    "title": "5  Gastar nuestros datos",
    "section": "\n5.1 Métodos comunes para dividir datos",
    "text": "5.1 Métodos comunes para dividir datos\nEl enfoque principal para la validación del modelo empírico es dividir el conjunto de datos existente en dos conjuntos distintos, el conjunto de entrenamiento y el conjunto de prueba. Una parte de los datos se utiliza para desarrollar y optimizar el modelo. Este conjunto de entrenamiento suele ser la mayoría de los datos. Estos datos son una zona de pruebas para la construcción de modelos donde se pueden ajustar diferentes modelos, se investigan estrategias de ingeniería de características, etc. Como profesionales del modelado, pasamos la gran mayor parte del proceso de modelado utilizando el conjunto de entrenamiento como sustrato para desarrollar el modelo.\nLa otra parte de los datos se coloca en el conjunto de prueba. Esto se mantiene en reserva hasta que se elijan uno o dos modelos como los métodos con mayor probabilidad de éxito. Luego, el conjunto de prueba se utiliza como árbitro final para determinar la eficacia del modelo. Es fundamental mirar el conjunto de prueba sólo una vez; de lo contrario, pasa a formar parte del proceso de modelado.\n\n¿Cómo deberíamos llevar a cabo esta división de los datos? La respuesta depende del contexto.\n\nSupongamos que asignamos el 80% de los datos al conjunto de entrenamiento y el 20% restante a las pruebas. El método más común es utilizar muestreo aleatorio simple. El paquete rsample tiene herramientas para realizar divisiones de datos como esta; la función initial_split() fue creada para este propósito. Toma el marco de datos como argumento, así como la proporción que se colocará en el entrenamiento. Usando el marco de datos producido por el fragmento de código del resumen en Sección 4.2 que preparó el conjunto de datos de Ames:\n\nlibrary(tidymodels)\ntidymodels_prefer()\n\n# Configure el flujo de números aleatorios usando `set.seed()` para que los resultados puedan ser\n# reproducido más tarde. \nset.seed(501)\n\n# Guarde la información dividida para una división 80/20 de los datos\names_split &lt;- initial_split(ames, prop = 0.80)\names_split\n## &lt;Training/Testing/Total&gt;\n## &lt;2344/586/2930&gt;\n\nLa información impresa denota la cantidad de datos en el conjunto de entrenamiento (\\(n = 2,344\\)), la cantidad en el conjunto de prueba (\\(n = 586\\)), y el tamaño del conjunto original de muestras. (\\(n = 2,930\\)).\nEl objeto ames_split es un objeto rsplit y contiene sólo la información de partición; Para obtener los conjuntos de datos resultantes, aplicamos dos funciones más:\n\names_train &lt;- training(ames_split)\names_test  &lt;-  testing(ames_split)\n\ndim(ames_train)\n## [1] 2344   74\n\nEstos objetos son marcos de datos con las mismas columnas que los datos originales pero solo las filas apropiadas para cada conjunto.\nEl muestreo aleatorio simple es apropiado en muchos casos, pero existen excepciones. Cuando hay un desequilibrio de clases dramático en los problemas de clasificación, una clase ocurre con mucha menos frecuencia que otra. El uso de una muestra aleatoria simple puede asignar al azar estas muestras poco frecuentes de manera desproporcionada al conjunto de entrenamiento o prueba. Para evitar esto, se puede utilizar muestreo estratificado. La división de entrenamiento/prueba se realiza por separado dentro de cada clase y luego estas submuestras se combinan en el conjunto general de entrenamiento y prueba. Para problemas de regresión, los datos de resultados se pueden agrupar artificialmente en cuartiles y luego se puede realizar un muestreo estratificado en cuatro ocasiones distintas. Este es un método eficaz para mantener similares las distribuciones del resultado entre el conjunto de entrenamiento y de prueba. La distribución del resultado del precio de venta para los datos de vivienda de Ames se muestra en Figura 5.1.\n\n\n\n\nFigura 5.1: La distribución del precio de venta (en unidades logarítmicas) de los datos de vivienda de Ames. Las líneas verticales indican los cuartiles de los datos. Algunos datos de vivienda de Ames se muestran en Figura 5.1.\n\n\n\nComo se analiza en el Capítulo 4, la distribución del precio de venta está sesgada hacia la derecha, con proporcionalmente más casas económicas que caras a ambos lados del centro de la distribución. La preocupación aquí con una simple división es que las casas más caras no estarían bien representadas en el conjunto de capacitación; esto aumentaría el riesgo de que nuestro modelo fuera ineficaz para predecir el precio de dichas propiedades. Las líneas verticales de puntos en Figura 5.1 indican los cuatro cuartiles de estos datos. Una muestra aleatoria estratificada realizaría la división 80/20 dentro de cada uno de estos subconjuntos de datos y luego agruparía los resultados. En rsample, esto se logra usando el argumento strata:\n\nset.seed(502)\names_split &lt;- initial_split(ames, prop = 0.80, strata = Sale_Price)\names_train &lt;- training(ames_split)\names_test  &lt;-  testing(ames_split)\n\ndim(ames_train)\n## [1] 2342   74\n\nSólo se puede utilizar una columna para la estratificación.\n\nEl uso del muestreo estratificado tiene muy pocas desventajas.\n\n¿Hay situaciones en las que el muestreo aleatorio no es la mejor opción? Un caso es cuando los datos tienen un componente temporal significativo, como los datos de series temporales. Aquí, es más común utilizar los datos más recientes como conjunto de prueba. El paquete rsample contiene una función llamada initial_time_split() que es muy similar a initial_split(). En lugar de utilizar muestreo aleatorio, el argumento “prop” denota qué proporción de la primera parte de los datos debe usarse como conjunto de entrenamiento; la función supone que los datos han sido preclasificados en un orden apropiado.\n\nLa proporción de datos que deben asignarse para la división depende en gran medida del contexto del problema en cuestión. Muy pocos datos en el conjunto de entrenamiento obstaculizan la capacidad del modelo para encontrar estimaciones de parámetros apropiadas. Por el contrario, muy pocos datos en el conjunto de pruebas reducen la calidad de las estimaciones de rendimiento. Partes de la comunidad estadística evitan los conjuntos de pruebas en general porque creen que todos los datos deben usarse para la estimación de parámetros. Si bien este argumento tiene sus méritos, es una buena práctica de modelado tener un conjunto imparcial de observaciones como árbitro final de la calidad del modelo. Se debe evitar un conjunto de pruebas sólo cuando los datos sean patológicamente pequeños."
  },
  {
    "objectID": "05-data-spending.html#what-about-a-validation-set",
    "href": "05-data-spending.html#what-about-a-validation-set",
    "title": "5  Spending our Data",
    "section": "\n5.2 What About a Validation Set?",
    "text": "5.2 What About a Validation Set?\nWhen describing the goals of data splitting, we singled out the test set as the data that should be used to properly evaluate of model performance on the final model(s). This begs the question: “How can we tell what is best if we don’t measure performance until the test set?”\nIt is common to hear about validation sets as an answer to this question, especially in the neural network and deep learning literature. During the early days of neural networks, researchers realized that measuring performance by re-predicting the training set samples led to results that were overly optimistic (significantly, unrealistically so). This led to models that overfit, meaning that they performed very well on the training set but poorly on the test set.1 To combat this issue, a small validation set of data were held back and used to measure performance as the network was trained. Once the validation set error rate began to rise, the training would be halted. In other words, the validation set was a means to get a rough sense of how well the model performed prior to the test set.\n\nWhether validation sets are a subset of the training set or a third allocation in the initial split of the data largely comes down to semantics.\n\nValidation sets are discussed more in Section 10.2.2 as a special case of resampling methods that are used on the training set. If you are going to use a validation set, you can start with a different splitting function2:\n\nset.seed(52)\n# To put 60% into training, 20% in validation, and 20% in testing:\names_val_split &lt;- initial_validation_split(ames, prop = c(0.6, 0.2))\names_val_split\n## &lt;Training/Validation/Testing/Total&gt;\n## &lt;1758/586/586/2930&gt;\n\nPrinting the split now shows the size of the training set (1,758), validation set (586), and test set ((586).\nTo get the training, validation, and testing data, the same syntax is used:\n\names_train &lt;- training(ames_val_split)\names_test &lt;- testing(ames_val_split)\names_val &lt;- validation(ames_val_split)\n\nSection 10.2.2 will demonstrate how to use the ames_val_split object for resampling and model optimization."
  },
  {
    "objectID": "05-data-spending.html#multilevel-data",
    "href": "05-data-spending.html#multilevel-data",
    "title": "5  Spending our Data",
    "section": "\n5.3 Multilevel Data",
    "text": "5.3 Multilevel Data\nWith the Ames housing data, a property is considered to be the independent experimental unit. It is safe to assume that, statistically, the data from a property are independent of other properties. For other applications, that is not always the case:\n\nFor longitudinal data, for example, the same independent experimental unit can be measured over multiple time points. An example would be a human subject in a medical trial.\nA batch of manufactured product might also be considered the independent experimental unit. In repeated measures designs, replicate data points from a batch are collected at multiple times.\nJohnson et al. (2018) report an experiment where different trees were sampled across the top and bottom portions of a stem. Here, the tree is the experimental unit and the data hierarchy is sample within stem position within tree.\n\nChapter 9 of Kuhn and Johnson (2020) contains other examples.\nIn these situations, the data set will have multiple rows per experimental unit. Simple resampling across rows would lead to some data within an experimental unit being in the training set and others in the test set. Data splitting should occur at the independent experimental unit level of the data. For example, to produce an 80/20 split of the Ames housing data set, 80% of the properties should be allocated for the training set."
  },
  {
    "objectID": "05-data-spending.html#other-considerations-for-a-data-budget",
    "href": "05-data-spending.html#other-considerations-for-a-data-budget",
    "title": "5  Spending our Data",
    "section": "\n5.4 Other Considerations for a Data Budget",
    "text": "5.4 Other Considerations for a Data Budget\nWhen deciding how to spend the data available to you, keep a few more things in mind. First, it is critical to quarantine the test set from any model building activities. As you read this book, notice which data are exposed to the model at any given time.\n\nThe problem of information leakage occurs when data outside of the training set are used in the modeling process.\n\nFor example, in a machine learning competition, the test set data might be provided without the true outcome values so that the model can be scored and ranked. One potential method for improving the score might be to fit the model using the training set points that are most similar to the test set values. While the test set isn’t directly used to fit the model, it still has a heavy influence. In general, this technique is highly problematic since it reduces the generalization error of the model to optimize performance on a specific data set. There are more subtle ways that the test set data can be used during training. Keeping the training data in a separate data frame from the test set is one small check to make sure that information leakage does not occur by accident.\nSecond, techniques to subsample the training set can mitigate specific issues (e.g., class imbalances). This is a valid and common technique that deliberately results in the training set data diverging from the population from which the data were drawn. It is critical that the test set continues to mirror what the model would encounter in the wild. In other words, the test set should always resemble new data that will be given to the model.\nNext, at the beginning of this chapter, we warned about using the same data for different tasks. Chapter 10 will discuss solid, data-driven methodologies for data usage that will reduce the risks related to bias, overfitting, and other issues. Many of these methods apply the data-splitting tools introduced in this chapter.\nFinally, the considerations in this chapter apply to developing and choosing a reliable model, the main topic of this book. When training a final chosen model for production, after ascertaining the expected performance on new data, practitioners often use all available data for better parameter estimation."
  },
  {
    "objectID": "05-data-spending.html#sec-splitting-summary",
    "href": "05-data-spending.html#sec-splitting-summary",
    "title": "5  Gastar nuestros datos",
    "section": "\n5.5 Resumen del capítulo",
    "text": "5.5 Resumen del capítulo\nLa división de datos es la estrategia fundamental para la validación empírica de modelos. Incluso en la era de la recopilación de datos desenfrenada, un proyecto de modelado típico tiene una cantidad limitada de datos apropiados, y es necesario gastar sabiamente los datos de un proyecto. En este capítulo, analizamos varias estrategias para dividir los datos en distintos grupos para modelado y evaluación.\nEn este punto de control, los fragmentos de código importantes para preparar y dividir son:\n\nlibrary(tidymodels)\ndata(ames)\names &lt;- ames %&gt;% mutate(Sale_Price = log10(Sale_Price))\n\nset.seed(502)\names_split &lt;- initial_split(ames, prop = 0.80, strata = Sale_Price)\names_train &lt;- training(ames_split)\names_test  &lt;-  testing(ames_split)\n\n\n\n\n\nJohnson, D, P Eckart, N Alsamadisi, H Noble, C Martin, y R Spicer. 2018. «Polar auxin transport is implicated in vessel differentiation and spatial patterning during secondary growth in Populus». American Journal of Botany 105 (2): 186-96.\n\n\nKuhn, M, y K Johnson. 2020. Feature engineering and selection: A practical approach for predictive models. CRC Press."
  },
  {
    "objectID": "05-data-spending.html#footnotes",
    "href": "05-data-spending.html#footnotes",
    "title": "5  Gastar nuestros datos",
    "section": "",
    "text": "Esta interfaz está disponible a partir de la versión 1.2.0 de rsample (alrededor de septiembre de 2023).↩︎"
  },
  {
    "objectID": "06-fitting-models.html#create-a-model",
    "href": "06-fitting-models.html#create-a-model",
    "title": "6  Fitting Models with parsnip",
    "section": "\n6.1 Create a Model",
    "text": "6.1 Create a Model\nOnce the data have been encoded in a format ready for a modeling algorithm, such as a numeric matrix, they can be used in the model building process.\nSuppose that a linear regression model was our initial choice. This is equivalent to specifying that the outcome data is numeric and that the predictors are related to the outcome in terms of simple slopes and intercepts:\n\\[y_i = \\beta_0 + \\beta_1 x_{1i} + \\ldots + \\beta_p x_{pi}\\]\nA variety of methods can be used to estimate the model parameters:\n\nOrdinary linear regression uses the traditional method of least squares to solve for the model parameters.\nRegularized linear regression adds a penalty to the least squares method to encourage simplicity by removing predictors and/or shrinking their coefficients towards zero. This can be executed using Bayesian or non-Bayesian techniques.\n\nIn R, the stats package can be used for the first case. The syntax for linear regression using the function lm() is:\nmodel &lt;- lm(formula, data, ...)\nwhere ... symbolizes other options to pass to lm(). The function does not have an x/y interface, where we might pass in our outcome as y and our predictors as x.\nTo estimate with regularization, the second case, a Bayesian model can be fit using the rstanarm package:\nmodel &lt;- stan_glm(formula, data, family = \"gaussian\", ...)\nIn this case, the other options passed via ... would include arguments for the prior distributions of the parameters as well as specifics about the numerical aspects of the model. As with lm(), only the formula interface is available.\nA popular non-Bayesian approach to regularized regression is the glmnet model (Friedman, Hastie, and Tibshirani 2010). Its syntax is:\nmodel &lt;- glmnet(x = matrix, y = vector, family = \"gaussian\", ...)\nIn this case, the predictor data must already be formatted into a numeric matrix; there is only an x/y method and no formula method.\nNote that these interfaces are heterogeneous in either how the data are passed to the model function or in terms of their arguments. The first issue is that, to fit models across different packages, the data must be formatted in different ways. lm() and stan_glm() only have formula interfaces while glmnet() does not. For other types of models, the interfaces may be even more disparate. For a person trying to do data analysis, these differences require the memorization of each package’s syntax and can be very frustrating.\nFor tidymodels, the approach to specifying a model is intended to be more unified:\n\nSpecify the type of model based on its mathematical structure (e.g., linear regression, random forest, KNN, etc).\nSpecify the engine for fitting the model. Most often this reflects the software package that should be used, like Stan or glmnet. These are models in their own right, and parsnip provides consistent interfaces by using these as engines for modeling.\nWhen required, declare the mode of the model. The mode reflects the type of prediction outcome. For numeric outcomes, the mode is regression; for qualitative outcomes, it is classification.1 If a model algorithm can only address one type of prediction outcome, such as linear regression, the mode is already set.\n\nThese specifications are built without referencing the data. For example, for the three cases we outlined:\n\nlibrary(tidymodels)\ntidymodels_prefer()\n\nlinear_reg() %&gt;% set_engine(\"lm\")\n## Linear Regression Model Specification (regression)\n## \n## Computational engine: lm\n\nlinear_reg() %&gt;% set_engine(\"glmnet\") \n## Linear Regression Model Specification (regression)\n## \n## Computational engine: glmnet\n\nlinear_reg() %&gt;% set_engine(\"stan\")\n## Linear Regression Model Specification (regression)\n## \n## Computational engine: stan\n\nOnce the details of the model have been specified, the model estimation can be done with either the fit() function (to use a formula) or the fit_xy() function (when your data are already pre-processed). The parsnip package allows the user to be indifferent to the interface of the underlying model; you can always use a formula even if the modeling package’s function only has the x/y interface.\nThe translate() function can provide details on how parsnip converts the user’s code to the package’s syntax:\n\nlinear_reg() %&gt;% set_engine(\"lm\") %&gt;% translate()\n## Linear Regression Model Specification (regression)\n## \n## Computational engine: lm \n## \n## Model fit template:\n## stats::lm(formula = missing_arg(), data = missing_arg(), weights = missing_arg())\n\nlinear_reg(penalty = 1) %&gt;% set_engine(\"glmnet\") %&gt;% translate()\n## Linear Regression Model Specification (regression)\n## \n## Main Arguments:\n##   penalty = 1\n## \n## Computational engine: glmnet \n## \n## Model fit template:\n## glmnet::glmnet(x = missing_arg(), y = missing_arg(), weights = missing_arg(), \n##     family = \"gaussian\")\n\nlinear_reg() %&gt;% set_engine(\"stan\") %&gt;% translate()\n## Linear Regression Model Specification (regression)\n## \n## Computational engine: stan \n## \n## Model fit template:\n## rstanarm::stan_glm(formula = missing_arg(), data = missing_arg(), \n##     weights = missing_arg(), family = stats::gaussian, refresh = 0)\n\nNote that missing_arg() is just a placeholder for the data that has yet to be provided.\n\nWe supplied a required penalty argument for the glmnet engine. Also, for the Stan and glmnet engines, the family argument was automatically added as a default. As will be shown later in this section, this option can be changed.\n\nLet’s walk through how to predict the sale price of houses in the Ames data as a function of only longitude and latitude:2\n\nlm_model &lt;- \n  linear_reg() %&gt;% \n  set_engine(\"lm\")\n\nlm_form_fit &lt;- \n  lm_model %&gt;% \n  # Recall that Sale_Price has been pre-logged\n  fit(Sale_Price ~ Longitude + Latitude, data = ames_train)\n\nlm_xy_fit &lt;- \n  lm_model %&gt;% \n  fit_xy(\n    x = ames_train %&gt;% select(Longitude, Latitude),\n    y = ames_train %&gt;% pull(Sale_Price)\n  )\n\nlm_form_fit\n## parsnip model object\n## \n## \n## Call:\n## stats::lm(formula = Sale_Price ~ Longitude + Latitude, data = data)\n## \n## Coefficients:\n## (Intercept)    Longitude     Latitude  \n##     -302.97        -2.07         2.71\nlm_xy_fit\n## parsnip model object\n## \n## \n## Call:\n## stats::lm(formula = ..y ~ ., data = data)\n## \n## Coefficients:\n## (Intercept)    Longitude     Latitude  \n##     -302.97        -2.07         2.71\n\nNot only does parsnip enable a consistent model interface for different packages, it also provides consistency in the model arguments. It is common for different functions that fit the same model to have different argument names. Random forest model functions are a good example. Three commonly used arguments are the number of trees in the ensemble, the number of predictors to randomly sample with each split within a tree, and the number of data points required to make a split. For three different R packages implementing this algorithm, those arguments are shown in Table 6.1.\n\n\n\n\nTable 6.1: Example argument names for different random forest functions.\n\nArgument Type\nranger\nrandomForest\nsparklyr\n\n\n\n# sampled predictors\nmtry\nmtry\nfeature_subset_strategy\n\n\n# trees\nnum.trees\nntree\nnum_trees\n\n\n# data points to split\nmin.node.size\nnodesize\nmin_instances_per_node\n\n\n\n\n\n\n\n\nIn an effort to make argument specification less painful, parsnip uses common argument names within and between packages. Table 6.2 shows, for random forests, what parsnip models use.\n\n\n\n\nTable 6.2: Random forest argument names used by parsnip.\n\nArgument Type\nparsnip\n\n\n\n# sampled predictors\nmtry\n\n\n# trees\ntrees\n\n\n# data points to split\nmin_n\n\n\n\n\n\n\n\n\nAdmittedly, this is one more set of arguments to memorize. However, when other types of models have the same argument types, these names still apply. For example, boosted tree ensembles also create a large number of tree-based models, so trees is also used there, as is min_n, and so on.\nSome of the original argument names can be fairly jargon-y. For example, to specify the amount of regularization to use in a glmnet model, the Greek letter lambda is used. While this mathematical notation is commonly used in the statistics literature, it is not obvious to many people what lambda represents (especially those who consume the model results). Since this is the penalty used in regularization, parsnip standardizes on the argument name penalty. Similarly, the number of neighbors in a KNN model is called neighbors instead of k. Our rule of thumb when standardizing argument names is:\n\nIf a practitioner were to include these names in a plot or table, would the people viewing those results understand the name?\n\nTo understand how the parsnip argument names map to the original names, use the help file for the model (available via ?rand_forest) as well as the translate() function:\n\nrand_forest(trees = 1000, min_n = 5) %&gt;% \n  set_engine(\"ranger\") %&gt;% \n  set_mode(\"regression\") %&gt;% \n  translate()\n## Random Forest Model Specification (regression)\n## \n## Main Arguments:\n##   trees = 1000\n##   min_n = 5\n## \n## Computational engine: ranger \n## \n## Model fit template:\n## ranger::ranger(x = missing_arg(), y = missing_arg(), weights = missing_arg(), \n##     num.trees = 1000, min.node.size = min_rows(~5, x), num.threads = 1, \n##     verbose = FALSE, seed = sample.int(10^5, 1))\n\nModeling functions in parsnip separate model arguments into two categories:\n\nMain arguments are more commonly used and tend to be available across engines.\nEngine arguments are either specific to a particular engine or used more rarely.\n\nFor example, in the translation of the previous random forest code, the arguments num.threads, verbose, and seed were added by default. These arguments are specific to the ranger implementation of random forest models and wouldn’t make sense as main arguments. Engine-specific arguments can be specified in set_engine(). For example, to have the ranger::ranger() function print out more information about the fit:\n\nrand_forest(trees = 1000, min_n = 5) %&gt;% \n  set_engine(\"ranger\", verbose = TRUE) %&gt;% \n  set_mode(\"regression\") \n## Random Forest Model Specification (regression)\n## \n## Main Arguments:\n##   trees = 1000\n##   min_n = 5\n## \n## Engine-Specific Arguments:\n##   verbose = TRUE\n## \n## Computational engine: ranger"
  },
  {
    "objectID": "06-fitting-models.html#use-the-model-results",
    "href": "06-fitting-models.html#use-the-model-results",
    "title": "6  Fitting Models with parsnip",
    "section": "\n6.2 Use the Model Results",
    "text": "6.2 Use the Model Results\nOnce the model is created and fit, we can use the results in a variety of ways; we might want to plot, print, or otherwise examine the model output. Several quantities are stored in a parsnip model object, including the fitted model. This can be found in an element called fit, which can be returned using the extract_fit_engine() function:\n\nlm_form_fit %&gt;% extract_fit_engine()\n## \n## Call:\n## stats::lm(formula = Sale_Price ~ Longitude + Latitude, data = data)\n## \n## Coefficients:\n## (Intercept)    Longitude     Latitude  \n##     -302.97        -2.07         2.71\n\nNormal methods can be applied to this object, such as printing and plotting:\n\nlm_form_fit %&gt;% extract_fit_engine() %&gt;% vcov()\n##             (Intercept) Longitude Latitude\n## (Intercept)     207.311   1.57466 -1.42397\n## Longitude         1.575   0.01655 -0.00060\n## Latitude         -1.424  -0.00060  0.03254\n\n\nNever pass the fit element of a parsnip model to a model prediction function, i.e., use predict(lm_form_fit) but do not use predict(lm_form_fit$fit). If the data were preprocessed in any way, incorrect predictions will be generated (sometimes, without errors). The underlying model’s prediction function has no idea if any transformations have been made to the data prior to running the model. See Section 6.3 for more on making predictions.\n\nOne issue with some existing methods in base R is that the results are stored in a manner that may not be the most useful. For example, the summary() method for lm objects can be used to print the results of the model fit, including a table with parameter values, their uncertainty estimates, and p-values. These particular results can also be saved:\n\nmodel_res &lt;- \n  lm_form_fit %&gt;% \n  extract_fit_engine() %&gt;% \n  summary()\n\n# The model coefficient table is accessible via the `coef` method.\nparam_est &lt;- coef(model_res)\nclass(param_est)\n## [1] \"matrix\" \"array\"\nparam_est\n##             Estimate Std. Error t value  Pr(&gt;|t|)\n## (Intercept) -302.974    14.3983  -21.04 3.640e-90\n## Longitude     -2.075     0.1286  -16.13 1.395e-55\n## Latitude       2.710     0.1804   15.02 9.289e-49\n\nThere are a few things to notice about this result. First, the object is a numeric matrix. This data structure was mostly likely chosen since all of the calculated results are numeric and a matrix object is stored more efficiently than a data frame. This choice was probably made in the late 1970s when computational efficiency was extremely critical. Second, the non-numeric data (the labels for the coefficients) are contained in the row names. Keeping the parameter labels as row names is very consistent with the conventions in the original S language.\nA reasonable next step might be to create a visualization of the parameter values. To do this, it would be sensible to convert the parameter matrix to a data frame. We could add the row names as a column so that they can be used in a plot. However, notice that several of the existing matrix column names would not be valid R column names for ordinary data frames (e.g., \"Pr(&gt;|t|)\"). Another complication is the consistency of the column names. For lm objects, the column for the p-value is \"Pr(&gt;|t|)\", but for other models, a different test might be used and, as a result, the column name would be different (e.g., \"Pr(&gt;|z|)\") and the type of test would be encoded in the column name.\nWhile these additional data formatting steps are not impossible to overcome, they are a hindrance, especially since they might be different for different types of models. The matrix is not a highly reusable data structure mostly because it constrains the data to be of a single type (e.g., numeric). Additionally, keeping some data in the dimension names is also problematic since those data must be extracted to be of general use.\nAs a solution, the broom package can convert many types of model objects to a tidy structure. For example, using the tidy() method on the linear model produces:\n\ntidy(lm_form_fit)\n## # A tibble: 3 × 5\n##   term        estimate std.error statistic  p.value\n##   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n## 1 (Intercept)  -303.      14.4       -21.0 3.64e-90\n## 2 Longitude      -2.07     0.129     -16.1 1.40e-55\n## 3 Latitude        2.71     0.180      15.0 9.29e-49\n\nThe column names are standardized across models and do not contain any additional data (such as the type of statistical test). The data previously contained in the row names are now in a column called term. One important principle in the tidymodels ecosystem is that a function should return values that are predictable, consistent, and unsurprising."
  },
  {
    "objectID": "06-fitting-models.html#sec-parsnip-predictions",
    "href": "06-fitting-models.html#sec-parsnip-predictions",
    "title": "6  Creando Modelos con parsnip",
    "section": "\n6.3 Hacer Predicciones",
    "text": "6.3 Hacer Predicciones\nOtra área donde parsnip difiere de las funciones de modelado R convencionales es el formato de los valores devueltos por predict(). Para las predicciones, parsnip siempre se ajusta a las siguientes reglas:\n\nLos resultados son siempre un tibble.\nLos nombres de las columnas del tibble siempre son predecibles.\nSiempre hay tantas filas en el tibble como en el conjunto de datos de entrada.\n\nPor ejemplo, cuando se predicen datos numéricos:\n\names_test_small &lt;- ames_test %&gt;% slice(1:5)\npredict(lm_form_fit, new_data = ames_test_small)\n## # A tibble: 5 × 1\n##   .pred\n##   &lt;dbl&gt;\n## 1  5.22\n## 2  5.21\n## 3  5.28\n## 4  5.27\n## 5  5.28\n\nEl orden de las filas de las predicciones es siempre el mismo que el de los datos originales.\n\n¿Por qué el punto inicial en algunos de los nombres de las columnas? Algunos argumentos y valores de retorno de tidyverse y tidymodels contienen puntos. Esto es para proteger contra la fusión de datos con nombres duplicados. ¡Hay algunos conjuntos de datos que contienen predictores llamados “pred”!\n\nEstas tres reglas facilitan la combinación de predicciones con los datos originales:\n\names_test_small %&gt;% \n  select(Sale_Price) %&gt;% \n  bind_cols(predict(lm_form_fit, ames_test_small)) %&gt;% \n  # Agregue intervalos de predicción del 95% a los resultados:\n  bind_cols(predict(lm_form_fit, ames_test_small, type = \"pred_int\")) \n## # A tibble: 5 × 4\n##   Sale_Price .pred .pred_lower .pred_upper\n##        &lt;dbl&gt; &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n## 1       5.02  5.22        4.91        5.54\n## 2       5.39  5.21        4.90        5.53\n## 3       5.28  5.28        4.97        5.60\n## 4       5.28  5.27        4.96        5.59\n## 5       5.28  5.28        4.97        5.60\n\nLa motivación para la primera regla proviene de algunos paquetes de R que producen tipos de datos diferentes a partir de funciones de predicción. Por ejemplo, el paquete ranger es una excelente herramienta para calcular modelos forestales aleatorios. Sin embargo, en lugar de devolver un marco de datos o un vector como salida, devuelve un objeto especializado que tiene múltiples valores incrustados (incluidos los valores predichos). Este es solo un paso más que el analista de datos debe solucionar en sus scripts. Como otro ejemplo, el modelo nativo glmnet puede devolver al menos cuatro tipos de salida diferentes para predicciones, dependiendo de los detalles del modelo y las características de los datos. Estos se muestran en Tabla 6.3.\n\n\n\n\nTabla 6.3: Diferentes valores de retorno para tipos de predicción glmnet.\n\nTipo de Predicción\nDevuelve:\n\n\n\nnumérica\nmatriz numérica\n\n\nclase\nmatriz de texto\n\n\nprobabilidad (2 classes)\nmatriz numérica (solo 2do nivel)\n\n\nprobabilidad (3+ classes)\narreglo numérico 3D (todos los niveles)\n\n\n\n\n\n\n\n\nAdemás, los nombres de las columnas de los resultados contienen valores codificados que se asignan a un vector llamado lambda dentro del objeto del modelo glmnet. Este excelente método estadístico puede resultar desalentador en la práctica debido a todos los casos especiales que un analista puede encontrar y que requieren código adicional para ser útil.\nPara la segunda regla de predicción de tidymodels, los nombres de columnas predecibles para diferentes tipos de predicciones se muestran en Tabla 6.4.\n\n\n\n\nTabla 6.4: El mapeo de tidymodels de tipos de predicción y nombres de columnas.\n\ntipo de valor\nnombre(s) de columna(s)\n\n\n\nnumeric\n.pred\n\n\nclass\n.pred_class\n\n\nprob\n.pred_{class levels}\n\n\nconf_int\n.pred_lower, .pred_upper\n\n\npred_int\n.pred_lower, .pred_upper\n\n\n\n\n\n\n\n\nLa tercera regla con respecto al número de filas en la salida es crítica. Por ejemplo, si alguna fila de los datos nuevos contiene valores faltantes, la salida se completará con los resultados faltantes para esas filas. Una ventaja principal de estandarizar la interfaz del modelo y los tipos de predicción en parsnip es que, cuando se utilizan diferentes modelos, la sintaxis es idéntica. Supongamos que utilizamos un árbol de decisión para modelar los datos de Ames. Fuera de la especificación del modelo, no hay diferencias significativas en la canalización del código:\n\ntree_model &lt;- \n  decision_tree(min_n = 2) %&gt;% \n  set_engine(\"rpart\") %&gt;% \n  set_mode(\"regression\")\n\ntree_fit &lt;- \n  tree_model %&gt;% \n  fit(Sale_Price ~ Longitude + Latitude, data = ames_train)\n\names_test_small %&gt;% \n  select(Sale_Price) %&gt;% \n  bind_cols(predict(tree_fit, ames_test_small))\n## # A tibble: 5 × 2\n##   Sale_Price .pred\n##        &lt;dbl&gt; &lt;dbl&gt;\n## 1       5.02  5.15\n## 2       5.39  5.15\n## 3       5.28  5.32\n## 4       5.28  5.32\n## 5       5.28  5.32\n\nEsto demuestra el beneficio de homogeneizar el proceso de análisis de datos y la sintaxis en diferentes modelos. Permite a los usuarios dedicar su tiempo a los resultados y la interpretación en lugar de tener que centrarse en las diferencias sintácticas entre los paquetes de R."
  },
  {
    "objectID": "06-fitting-models.html#parsnip-extension-packages",
    "href": "06-fitting-models.html#parsnip-extension-packages",
    "title": "6  Fitting Models with parsnip",
    "section": "\n6.4 parsnip-Extension Packages",
    "text": "6.4 parsnip-Extension Packages\nThe parsnip package itself contains interfaces to a number of models. However, for ease of package installation and maintenance, there are other tidymodels packages that have parsnip model definitions for other sets of models. The discrim package has model definitions for the set of classification techniques called discriminant analysis methods (such as linear or quadratic discriminant analysis). In this way, the package dependencies required for installing parsnip are reduced. A list of all of the models that can be used with parsnip (across different packages that are on CRAN) can be found at https://www.tidymodels.org/find/."
  },
  {
    "objectID": "06-fitting-models.html#sec-parsnip-addin",
    "href": "06-fitting-models.html#sec-parsnip-addin",
    "title": "6  Creando Modelos con parsnip",
    "section": "\n6.5 Crear especificaciones de modelo",
    "text": "6.5 Crear especificaciones de modelo\nPuede resultar tedioso escribir muchas especificaciones de modelos o recordar cómo escribir el código para generarlas. El paquete parsnip incluye un complemento RStudio3 que puede ayudar. Ya sea eligiendo este complemento en el menú de la barra de herramientas Addins o ejecutando el código:\n\nparsnip_addin()\n\nabrirá una ventana en el panel Viewer de RStudio IDE con una lista de posibles modelos para cada modo de modelo. Estos se pueden escribir en el panel de código fuente.\nLa lista de modelos incluye modelos de los paquetes de extensión parsnip y parsnip que están en CRAN."
  },
  {
    "objectID": "06-fitting-models.html#sec-models-summary",
    "href": "06-fitting-models.html#sec-models-summary",
    "title": "6  Creando Modelos con parsnip",
    "section": "\n6.6 Resumen del capítulo",
    "text": "6.6 Resumen del capítulo\nEste capítulo presentó el paquete parsnip, que proporciona una interfaz común para modelos en todos los paquetes R utilizando una sintaxis estándar. La interfaz y los objetos resultantes tienen una estructura predecible.\nEl código para modelar los datos de Ames que usaremos en el futuro es:\n\nlibrary(tidymodels)\ndata(ames)\names &lt;- mutate(ames, Sale_Price = log10(Sale_Price))\n\nset.seed(502)\names_split &lt;- initial_split(ames, prop = 0.80, strata = Sale_Price)\names_train &lt;- training(ames_split)\names_test  &lt;-  testing(ames_split)\n\nlm_model &lt;- linear_reg() %&gt;% set_engine(\"lm\")\n\n\n\n\n\nFriedman, J, T Hastie, y R Tibshirani. 2010. «Regularization paths for generalized linear models via coordinate descent». Journal of statistical Software 33 (1): 1."
  },
  {
    "objectID": "06-fitting-models.html#footnotes",
    "href": "06-fitting-models.html#footnotes",
    "title": "6  Creando Modelos con parsnip",
    "section": "",
    "text": "Tenga en cuenta que parsnip restringe la columna de resultados de un modelo de clasificación para que se codifique como un factor; el uso de valores numéricos binarios generará un error.↩︎\n¿Cuáles son las diferencias entre fit() y fit_xy()? La función fit_xy() siempre pasa los datos tal cual a la función del modelo subyacente. No creará variables ficticias/indicadoras antes de hacerlo. Cuando se usa fit() con una especificación de modelo, esto casi siempre significa que se crearán variables ficticias a partir de predictores cualitativos. Si la función subyacente requiere una matriz (como glmnet), creará la matriz. Sin embargo, si la función subyacente usa una fórmula, fit() simplemente pasa la fórmula a esa función. Estimamos que el 99% de las funciones de modelado que utilizan fórmulas generan variables ficticias. El otro 1% incluye métodos basados ​​en árboles que no requieren predictores puramente numéricos. Consulte Sección 7.4 para obtener más información sobre el uso de fórmulas en tidymodels.↩︎\nhttps://rstudio.github.io/rstudioaddins/↩︎"
  },
  {
    "objectID": "07-the-model-workflow.html#begin-model-end",
    "href": "07-the-model-workflow.html#begin-model-end",
    "title": "7  A Model Workflow",
    "section": "\n7.1 Where Does the Model Begin and End?",
    "text": "7.1 Where Does the Model Begin and End?\nSo far, when we have used the term “the model,” we have meant a structural equation that relates some predictors to one or more outcomes. Let’s consider again linear regression as an example. The outcome data are denoted as \\(y_i\\), where there are \\(i = 1 \\ldots n\\) samples in the training set. Suppose that there are \\(p\\) predictors \\(x_{i1}, \\ldots, x_{ip}\\) that are used in the model. Linear regression produces a model equation of\n\\[ \\hat{y}_i = \\hat{\\beta}_0 + \\hat{\\beta}_1x_{i1} + \\ldots + \\hat{\\beta}_px_{ip} \\]\nWhile this is a linear model, it is linear only in the parameters. The predictors could be nonlinear terms (such as the \\(\\log(x_i)\\)).\n\nThe conventional way of thinking about the modeling process is that it only includes the model fit.\n\nFor some straightforward data sets, fitting the model itself may be the entire process. However, a variety of choices and additional steps often occur before the model is fit:\n\nWhile our example model has \\(p\\) predictors, it is common to start with more than \\(p\\) candidate predictors. Through exploratory data analysis or using domain knowledge, some of the predictors may be excluded from the analysis. In other cases, a feature selection algorithm may be used to make a data-driven choice for the minimum predictor set for the model.\nThere are times when the value of an important predictor is missing. Rather than eliminating this sample from the data set, the missing value could be imputed using other values in the data. For example, if \\(x_1\\) were missing but was correlated with predictors \\(x_2\\) and \\(x_3\\), an imputation method could estimate the missing \\(x_1\\) observation from the values of \\(x_2\\) and \\(x_3\\).\nIt may be beneficial to transform the scale of a predictor. If there is not a priori information on what the new scale should be, we can estimate the proper scale using a statistical transformation technique, the existing data, and some optimization criterion. Other transformations, such as PCA, take groups of predictors and transform them into new features that are used as the predictors.\n\nWhile these examples are related to steps that occur before the model fit, there may also be operations that occur after the model is created. When a classification model is created where the outcome is binary (e.g., event and non-event), it is customary to use a 50% probability cutoff to create a discrete class prediction, also known as a hard prediction. For example, a classification model might estimate that the probability of an event was 62%. Using the typical default, the hard prediction would be event. However, the model may need to be more focused on reducing false positive results (i.e., where true nonevents are classified as events). One way to do this is to raise the cutoff from 50% to some greater value. This increases the level of evidence required to call a new sample an event. While this reduces the true positive rate (which is bad), it may have a more dramatic effect on reducing false positives. The choice of the cutoff value should be optimized using data. This is an example of a post-processing step that has a significant effect on how well the model works, even though it is not contained in the model fitting step.\nIt is important to focus on the broader modeling process, instead of only fitting the specific model used to estimate parameters. This broader process includes any preprocessing steps, the model fit itself, as well as potential post-processing activities. In this book, we will refer to this more comprehensive concept as the model workflow and highlight how to handle all its components to produce a final model equation.\n\nIn other software, such as Python or Spark, similar collections of steps are called pipelines. In tidymodels, the term “pipeline” already connotes a sequence of operations chained together with a pipe operator (such as %&gt;% from magrittr or the newer native |&gt;). Rather than using ambiguous terminology in this context, we call the sequence of computational operations related to modeling workflows.\n\nBinding together the analytical components of data analysis is important for another reason. Future chapters will demonstrate how to accurately measure performance, as well as how to optimize structural parameters (i.e., model tuning). To correctly quantify model performance on the training set, ?sec-resampling advocates using resampling methods. To do this properly, no data-driven parts of the analysis should be excluded from validation. To this end, the workflow must include all significant estimation steps.\nTo illustrate, consider principal component analysis (PCA) signal extraction. We’ll talk about this more in ?sec-example-steps as well as ?sec-dimensionality; PCA is a way to replace correlated predictors with new artificial features that are uncorrelated and capture most of the information in the original set. The new features could be used as the predictors, and least squares regression could be used to estimate the model parameters.\nThere are two ways of thinking about the model workflow. Figure 7.1 illustrates the incorrect method: to think of the PCA preprocessing step, as not being part of the modeling workflow.\n\n\n\n\nFigure 7.1: Incorrect mental model of where model estimation occurs in the data analysis process\n\n\n\nThe fallacy here is that, although PCA does significant computations to produce the components, its operations are assumed to have no uncertainty associated with them. The PCA components are treated as known and, if not included in the model workflow, the effect of PCA could not be adequately measured.\nFigure 7.2 shows an appropriate approach.\n\n\n\n\nFigure 7.2: Correct mental model of where model estimation occurs in the data analysis process\n\n\n\nIn this way, the PCA preprocessing is considered part of the modeling process."
  },
  {
    "objectID": "07-the-model-workflow.html#workflow-basics",
    "href": "07-the-model-workflow.html#workflow-basics",
    "title": "7  A Model Workflow",
    "section": "\n7.2 Workflow Basics",
    "text": "7.2 Workflow Basics\nThe workflows package allows the user to bind modeling and preprocessing objects together. Let’s start again with the Ames data and a simple linear model:\n\nlibrary(tidymodels)  # Includes the workflows package\ntidymodels_prefer()\n\nlm_model &lt;- \n  linear_reg() %&gt;% \n  set_engine(\"lm\")\n\nA workflow always requires a parsnip model object:\n\nlm_wflow &lt;- \n  workflow() %&gt;% \n  add_model(lm_model)\n\nlm_wflow\n## ══ Workflow ═════════════════════════════════════════════════════════════════════════\n## Preprocessor: None\n## Model: linear_reg()\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## Linear Regression Model Specification (regression)\n## \n## Computational engine: lm\n\nNotice that we have not yet specified how this workflow should preprocess the data: Preprocessor: None.\nIf our model is very simple, a standard R formula can be used as a preprocessor:\n\nlm_wflow &lt;- \n  lm_wflow %&gt;% \n  add_formula(Sale_Price ~ Longitude + Latitude)\n\nlm_wflow\n## ══ Workflow ═════════════════════════════════════════════════════════════════════════\n## Preprocessor: Formula\n## Model: linear_reg()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## Sale_Price ~ Longitude + Latitude\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## Linear Regression Model Specification (regression)\n## \n## Computational engine: lm\n\nWorkflows have a fit() method that can be used to create the model. Using the objects created in Sección 6.6:\n\nlm_fit &lt;- fit(lm_wflow, ames_train)\nlm_fit\n## ══ Workflow [trained] ═══════════════════════════════════════════════════════════════\n## Preprocessor: Formula\n## Model: linear_reg()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## Sale_Price ~ Longitude + Latitude\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## \n## Call:\n## stats::lm(formula = ..y ~ ., data = data)\n## \n## Coefficients:\n## (Intercept)    Longitude     Latitude  \n##     -302.97        -2.07         2.71\n\nWe can also predict() on the fitted workflow:\n\npredict(lm_fit, ames_test %&gt;% slice(1:3))\n## # A tibble: 3 × 1\n##   .pred\n##   &lt;dbl&gt;\n## 1  5.22\n## 2  5.21\n## 3  5.28\n\nThe predict() method follows all of the same rules and naming conventions that we described for the parsnip package in Sección 6.3.\nBoth the model and preprocessor can be removed or updated:\n\nlm_fit %&gt;% update_formula(Sale_Price ~ Longitude)\n## ══ Workflow ═════════════════════════════════════════════════════════════════════════\n## Preprocessor: Formula\n## Model: linear_reg()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## Sale_Price ~ Longitude\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## Linear Regression Model Specification (regression)\n## \n## Computational engine: lm\n\nNote that, in this new object, the output shows that the previous fitted model was removed since the new formula is inconsistent with the previous model fit."
  },
  {
    "objectID": "07-the-model-workflow.html#adding-raw-variables-to-the-workflow",
    "href": "07-the-model-workflow.html#adding-raw-variables-to-the-workflow",
    "title": "7  A Model Workflow",
    "section": "\n7.3 Adding Raw Variables to the workflow()\n",
    "text": "7.3 Adding Raw Variables to the workflow()\n\nThere is another interface for passing data to the model, the add_variables() function, which uses a dplyr-like syntax for choosing variables. The function has two primary arguments: outcomes and predictors. These use a selection approach similar to the tidyselect backend of tidyverse packages to capture multiple selectors using c().\n\nlm_wflow &lt;- \n  lm_wflow %&gt;% \n  remove_formula() %&gt;% \n  add_variables(outcome = Sale_Price, predictors = c(Longitude, Latitude))\nlm_wflow\n## ══ Workflow ═════════════════════════════════════════════════════════════════════════\n## Preprocessor: Variables\n## Model: linear_reg()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## Outcomes: Sale_Price\n## Predictors: c(Longitude, Latitude)\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## Linear Regression Model Specification (regression)\n## \n## Computational engine: lm\n\nThe predictors could also have been specified using a more general selector, such as\n\npredictors = c(ends_with(\"tude\"))\n\nOne nicety is that any outcome columns accidentally specified in the predictors argument will be quietly removed. This facilitates the use of:\n\npredictors = everything()\n\nWhen the model is fit, the specification assembles these data, unaltered, into a data frame and passes it to the underlying function:\n\nfit(lm_wflow, ames_train)\n## ══ Workflow [trained] ═══════════════════════════════════════════════════════════════\n## Preprocessor: Variables\n## Model: linear_reg()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## Outcomes: Sale_Price\n## Predictors: c(Longitude, Latitude)\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## \n## Call:\n## stats::lm(formula = ..y ~ ., data = data)\n## \n## Coefficients:\n## (Intercept)    Longitude     Latitude  \n##     -302.97        -2.07         2.71\n\nIf you would like the underlying modeling method to do what it would normally do with the data, add_variables() can be a helpful interface. As we will see in Sección 7.4.1, it also facilitates more complex modeling specifications. However, as we mention in the next section, models such as glmnet and xgboost expect the user to make indicator variables from factor predictors. In these cases, a recipe or formula interface will typically be a better choice.\nIn the next chapter, we will look at a more powerful preprocessor (called a recipe) that can also be added to a workflow."
  },
  {
    "objectID": "07-the-model-workflow.html#workflow-encoding",
    "href": "07-the-model-workflow.html#workflow-encoding",
    "title": "7  A Model Workflow",
    "section": "\n7.4 How Does a workflow() Use the Formula?",
    "text": "7.4 How Does a workflow() Use the Formula?\nRecall from Section 3.2 that the formula method in R has multiple purposes (we will discuss this further in ?sec-recipes). One of these is to properly encode the original data into an analysis-ready format. This can involve executing inline transformations (e.g., log(x)), creating dummy variable columns, creating interactions or other column expansions, and so on. However, many statistical methods require different types of encodings:\n\nMost packages for tree-based models use the formula interface but do not encode the categorical predictors as dummy variables.\nPackages can use special inline functions that tell the model function how to treat the predictor in the analysis. For example, in survival analysis models, a formula term such as strata(site) would indicate that the column site is a stratification variable. This means it should not be treated as a regular predictor and does not have a corresponding location parameter estimate in the model.\nA few R packages have extended the formula in ways that base R functions cannot parse or execute. In multilevel models (e.g., mixed models or hierarchical Bayesian models), a model term such as (week | subject) indicates that the column week is a random effect that has different slope parameter estimates for each value of the subject column.\n\nA workflow is a general purpose interface. When add_formula() is used, how should the workflow preprocess the data? Since the preprocessing is model dependent, workflows attempts to emulate what the underlying model would do whenever possible. If it is not possible, the formula processing should not do anything to the columns used in the formula. Let’s look at this in more detail.\nTree-based models\nWhen we fit a tree to the data, the parsnip package understands what the modeling function would do. For example, if a random forest model is fit using the ranger or randomForest packages, the workflow knows predictors columns that are factors should be left as is.\nAs a counterexample, a boosted tree created with the xgboost package requires the user to create dummy variables from factor predictors (since xgboost::xgb.train() will not). This requirement is embedded into the model specification object and a workflow using xgboost will create the indicator columns for this engine. Also note that a different engine for boosted trees, C5.0, does not require dummy variables so none are made by the workflow.\nThis determination is made for each model and engine combination.\n\n7.4.1 Special formulas and inline functions\nA number of multilevel models have standardized on a formula specification devised in the lme4 package. For example, to fit a regression model that has random effects for subjects, we would use the following formula:\nlibrary(lme4)\nlmer(distance ~ Sex + (age | Subject), data = Orthodont)\nThe effect of this is that each subject will have an estimated intercept and slope parameter for age.\nThe problem is that standard R methods can’t properly process this formula:\n\nmodel.matrix(distance ~ Sex + (age | Subject), data = Orthodont)\n## Warning in Ops.ordered(age, Subject): '|' is not meaningful for ordered factors\n##      (Intercept) SexFemale age | SubjectTRUE\n## attr(,\"assign\")\n## [1] 0 1 2\n## attr(,\"contrasts\")\n## attr(,\"contrasts\")$Sex\n## [1] \"contr.treatment\"\n## \n## attr(,\"contrasts\")$`age | Subject`\n## [1] \"contr.treatment\"\n\nThe result is a zero row data frame.\n\nThe issue is that the special formula has to be processed by the underlying package code, not the standard model.matrix() approach.\n\nEven if this formula could be used with model.matrix(), this would still present a problem since the formula also specifies the statistical attributes of the model.\nThe solution in workflows is an optional supplementary model formula that can be passed to add_model(). The add_variables() specification provides the bare column names, and then the actual formula given to the model is set within add_model():\n\nlibrary(multilevelmod)\n\nmultilevel_spec &lt;- linear_reg() %&gt;% set_engine(\"lmer\")\n\nmultilevel_workflow &lt;- \n  workflow() %&gt;% \n  # Pass the data along as-is: \n  add_variables(outcome = distance, predictors = c(Sex, age, Subject)) %&gt;% \n  add_model(multilevel_spec, \n            # This formula is given to the model\n            formula = distance ~ Sex + (age | Subject))\n\nmultilevel_fit &lt;- fit(multilevel_workflow, data = Orthodont)\nmultilevel_fit\n## ══ Workflow [trained] ═══════════════════════════════════════════════════════════════\n## Preprocessor: Variables\n## Model: linear_reg()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## Outcomes: distance\n## Predictors: c(Sex, age, Subject)\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## Linear mixed model fit by REML ['lmerMod']\n## Formula: distance ~ Sex + (age | Subject)\n##    Data: data\n## REML criterion at convergence: 471.2\n## Random effects:\n##  Groups   Name        Std.Dev. Corr \n##  Subject  (Intercept) 7.391         \n##           age         0.694    -0.97\n##  Residual             1.310         \n## Number of obs: 108, groups:  Subject, 27\n## Fixed Effects:\n## (Intercept)    SexFemale  \n##       24.52        -2.15\n\nWe can even use the previously mentioned strata() function from the survival package for survival analysis:\n\nlibrary(censored)\n\nparametric_spec &lt;- survival_reg()\n\nparametric_workflow &lt;- \n  workflow() %&gt;% \n  add_variables(outcome = c(fustat, futime), predictors = c(age, rx)) %&gt;% \n  add_model(parametric_spec, \n            formula = Surv(futime, fustat) ~ age + strata(rx))\n\nparametric_fit &lt;- fit(parametric_workflow, data = ovarian)\nparametric_fit\n## ══ Workflow [trained] ═══════════════════════════════════════════════════════════════\n## Preprocessor: Variables\n## Model: survival_reg()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## Outcomes: c(fustat, futime)\n## Predictors: c(age, rx)\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## Call:\n## survival::survreg(formula = Surv(futime, fustat) ~ age + strata(rx), \n##     data = data, model = TRUE)\n## \n## Coefficients:\n## (Intercept)         age \n##     12.8734     -0.1034 \n## \n## Scale:\n##   rx=1   rx=2 \n## 0.7696 0.4704 \n## \n## Loglik(model)= -89.4   Loglik(intercept only)= -97.1\n##  Chisq= 15.36 on 1 degrees of freedom, p= 9e-05 \n## n= 26\n\nNotice how in both of these calls the model-specific formula was used."
  },
  {
    "objectID": "07-the-model-workflow.html#workflow-sets-intro",
    "href": "07-the-model-workflow.html#workflow-sets-intro",
    "title": "7  A Model Workflow",
    "section": "\n7.5 Creating Multiple Workflows at Once",
    "text": "7.5 Creating Multiple Workflows at Once\nIn some situations, the data require numerous attempts to find an appropriate model. For example:\n\nFor predictive models, it is advisable to evaluate a variety of different model types. This requires the user to create multiple model specifications.\nSequential testing of models typically starts with an expanded set of predictors. This “full model” is compared to a sequence of the same model that removes each predictor in turn. Using basic hypothesis testing methods or empirical validation, the effect of each predictor can be isolated and assessed.\n\nIn these situations, as well as others, it can become tedious or onerous to create a lot of workflows from different sets of preprocessors and/or model specifications. To address this problem, the workflowset package creates combinations of workflow components. A list of preprocessors (e.g., formulas, dplyr selectors, or feature engineering recipe objects discussed in the next chapter) can be combined with a list of model specifications, resulting in a set of workflows.\nAs an example, let’s say that we want to focus on the different ways that house location is represented in the Ames data. We can create a set of formulas that capture these predictors:\n\nlocation &lt;- list(\n  longitude = Sale_Price ~ Longitude,\n  latitude = Sale_Price ~ Latitude,\n  coords = Sale_Price ~ Longitude + Latitude,\n  neighborhood = Sale_Price ~ Neighborhood\n)\n\nThese representations can be crossed with one or more models using the workflow_set() function. We’ll just use the previous linear model specification to demonstrate:\n\nlibrary(workflowsets)\nlocation_models &lt;- workflow_set(preproc = location, models = list(lm = lm_model))\nlocation_models\n## # A workflow set/tibble: 4 × 4\n##   wflow_id        info             option    result    \n##   &lt;chr&gt;           &lt;list&gt;           &lt;list&gt;    &lt;list&gt;    \n## 1 longitude_lm    &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 2 latitude_lm     &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 3 coords_lm       &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 4 neighborhood_lm &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\nlocation_models$info[[1]]\n## # A tibble: 1 × 4\n##   workflow   preproc model      comment\n##   &lt;list&gt;     &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;  \n## 1 &lt;workflow&gt; formula linear_reg \"\"\nextract_workflow(location_models, id = \"coords_lm\")\n## ══ Workflow ═════════════════════════════════════════════════════════════════════════\n## Preprocessor: Formula\n## Model: linear_reg()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## Sale_Price ~ Longitude + Latitude\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## Linear Regression Model Specification (regression)\n## \n## Computational engine: lm\n\nWorkflow sets are mostly designed to work with resampling, which is discussed in ?sec-resampling. The columns option and result must be populated with specific types of objects that result from resampling. We will demonstrate this in more detail in Chapters ?sec-compare and ?sec-workflow-sets.\nIn the meantime, let’s create model fits for each formula and save them in a new column called fit. We’ll use basic dplyr and purrr operations:\n\nlocation_models &lt;-\n   location_models %&gt;%\n   mutate(fit = map(info, ~ fit(.x$workflow[[1]], ames_train)))\nlocation_models\n## # A workflow set/tibble: 4 × 5\n##   wflow_id        info             option    result     fit       \n##   &lt;chr&gt;           &lt;list&gt;           &lt;list&gt;    &lt;list&gt;     &lt;list&gt;    \n## 1 longitude_lm    &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt; &lt;workflow&gt;\n## 2 latitude_lm     &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt; &lt;workflow&gt;\n## 3 coords_lm       &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt; &lt;workflow&gt;\n## 4 neighborhood_lm &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt; &lt;workflow&gt;\nlocation_models$fit[[1]]\n## ══ Workflow [trained] ═══════════════════════════════════════════════════════════════\n## Preprocessor: Formula\n## Model: linear_reg()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## Sale_Price ~ Longitude\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## \n## Call:\n## stats::lm(formula = ..y ~ ., data = data)\n## \n## Coefficients:\n## (Intercept)    Longitude  \n##     -184.40        -2.02\n\nWe use a purrr function here to map through our models, but there is an easier, better approach to fit workflow sets that will be introduced in ?sec-workflow-set.\n\nIn general, there’s a lot more to workflow sets! While we’ve covered the basics here, the nuances and advantages of workflow sets won’t be illustrated until ?sec-workflow-sets."
  },
  {
    "objectID": "07-the-model-workflow.html#evaluating-the-test-set",
    "href": "07-the-model-workflow.html#evaluating-the-test-set",
    "title": "7  A Model Workflow",
    "section": "\n7.6 Evaluating the Test Set",
    "text": "7.6 Evaluating the Test Set\nLet’s say that we’ve concluded our model development and have settled on a final model. There is a convenience function called last_fit() that will fit the model to the entire training set and evaluate it with the testing set.\nUsing lm_wflow as an example, we can pass the model and the initial training/testing split to the function:\n\nfinal_lm_res &lt;- last_fit(lm_wflow, ames_split)\nfinal_lm_res\n## # Resampling results\n## # Manual resampling \n## # A tibble: 1 × 6\n##   splits             id               .metrics .notes   .predictions .workflow \n##   &lt;list&gt;             &lt;chr&gt;            &lt;list&gt;   &lt;list&gt;   &lt;list&gt;       &lt;list&gt;    \n## 1 &lt;split [2342/588]&gt; train/test split &lt;tibble&gt; &lt;tibble&gt; &lt;tibble&gt;     &lt;workflow&gt;\n\n\nNotice that last_fit() takes a data split as an input, not a dataframe. This function uses the split to generate the training and test sets for the final fitting and evaluation.\n\nThe .workflow column contains the fitted workflow and can be pulled out of the results using:\n\nfitted_lm_wflow &lt;- extract_workflow(final_lm_res)\n\nSimilarly, collect_metrics() and collect_predictions() provide access to the performance metrics and predictions, respectively.\n\ncollect_metrics(final_lm_res)\ncollect_predictions(final_lm_res) %&gt;% slice(1:5)\n\nWe’ll see more about last_fit() in action and how to use it again in Sección 16.6.\n\nWhen using validation sets, last_fit() has an argument called add_validation_set to specify if we should train the final model solely on the training set (the default) or the combination of the training and validation sets."
  },
  {
    "objectID": "07-the-model-workflow.html#workflows-summary",
    "href": "07-the-model-workflow.html#workflows-summary",
    "title": "7  A Model Workflow",
    "section": "\n7.7 Chapter Summary",
    "text": "7.7 Chapter Summary\nIn this chapter, you learned that the modeling process encompasses more than just estimating the parameters of an algorithm that connects predictors to an outcome. This process also includes preprocessing steps and operations taken after a model is fit. We introduced a concept called a model workflow that can capture the important components of the modeling process. Multiple workflows can also be created inside of a workflow set. The last_fit() function is convenient for fitting a final model to the training set and evaluating with the test set.\nFor the Ames data, the related code that we’ll see used again is:\n\nlibrary(tidymodels)\ndata(ames)\n\names &lt;- mutate(ames, Sale_Price = log10(Sale_Price))\n\nset.seed(502)\names_split &lt;- initial_split(ames, prop = 0.80, strata = Sale_Price)\names_train &lt;- training(ames_split)\names_test  &lt;-  testing(ames_split)\n\nlm_model &lt;- linear_reg() %&gt;% set_engine(\"lm\")\n\nlm_wflow &lt;- \n  workflow() %&gt;% \n  add_model(lm_model) %&gt;% \n  add_variables(outcome = Sale_Price, predictors = c(Longitude, Latitude))\n\nlm_fit &lt;- fit(lm_wflow, ames_train)"
  },
  {
    "objectID": "08-feature-engineering.html#a-simple-recipe-for-the-ames-housing-data",
    "href": "08-feature-engineering.html#a-simple-recipe-for-the-ames-housing-data",
    "title": "8  Feature Engineering with recipes",
    "section": "\n8.1 A Simple recipe() for the Ames Housing Data",
    "text": "8.1 A Simple recipe() for the Ames Housing Data\nIn this section, we will focus on a small subset of the predictors available in the Ames housing data:\n\nThe neighborhood (qualitative, with 29 neighborhoods in the training set)\nThe gross above-grade living area (continuous, named Gr_Liv_Area)\nThe year built (Year_Built)\nThe type of building (Bldg_Type with values OneFam (\\(n = 1,936\\)), TwoFmCon (\\(n = 50\\)), Duplex (\\(n = 88\\)), Twnhs (\\(n = 77\\)), and TwnhsE (\\(n = 191\\)))\n\nSuppose that an initial ordinary linear regression model were fit to these data. Recalling that, in Chapter 4, the sale prices were pre-logged, a standard call to lm() might look like:\n\nlm(Sale_Price ~ Neighborhood + log10(Gr_Liv_Area) + Year_Built + Bldg_Type, data = ames)\n\nWhen this function is executed, the data are converted from a data frame to a numeric design matrix (also called a model matrix) and then the least squares method is used to estimate parameters. In Section 3.2 we listed the multiple purposes of the R model formula; let’s focus only on the data manipulation aspects for now. What this formula does can be decomposed into a series of steps:\n\nSale price is defined as the outcome while neighborhood, gross living area, the year built, and building type variables are all defined as predictors.\nA log transformation is applied to the gross living area predictor.\nThe neighborhood and building type columns are converted from a non-numeric format to a numeric format (since least squares requires numeric predictors).\n\nAs mentioned in Chapter 3, the formula method will apply these data manipulations to any data, including new data, that are passed to the predict() function.\nA recipe is also an object that defines a series of steps for data processing. Unlike the formula method inside a modeling function, the recipe defines the steps via step_*() functions without immediately executing them; it is only a specification of what should be done. Here is a recipe equivalent to the previous formula that builds on the code summary in Section 5.5:\n\nlibrary(tidymodels) # Includes the recipes package\ntidymodels_prefer()\n\nsimple_ames &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type,\n         data = ames_train) %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_dummy(all_nominal_predictors())\nsimple_ames\n## \n## ── Recipe ───────────────────────────────────────────────────────────────────────────\n## \n## ── Inputs\n## Number of variables by role\n## outcome:   1\n## predictor: 4\n## \n## ── Operations\n## • Log transformation on: Gr_Liv_Area\n## • Dummy variables from: all_nominal_predictors()\n\nLet’s break this down:\n\nThe call to recipe() with a formula tells the recipe the roles of the “ingredients” or variables (e.g., predictor, outcome). It only uses the data ames_train to determine the data types for the columns.\nstep_log() declares that Gr_Liv_Area should be log transformed.\nstep_dummy() specifies which variables should be converted from a qualitative format to a quantitative format, in this case, using dummy or indicator variables. An indicator or dummy variable is a binary numeric variable (a column of ones and zeroes) that encodes qualitative information; we will dig deeper into these kinds of variables in Section 8.4.1.\n\nThe function all_nominal_predictors() captures the names of any predictor columns that are currently factor or character (i.e., nominal) in nature. This is a dplyr-like selector function similar to starts_with() or matches() but that can only be used inside of a recipe.\n\nOther selectors specific to the recipes package are: all_numeric_predictors(), all_numeric(), all_predictors(), and all_outcomes(). As with dplyr, one or more unquoted expressions, separated by commas, can be used to select which columns are affected by each step.\n\nWhat is the advantage to using a recipe, over a formula or raw predictors? There are a few, including:\n\nThese computations can be recycled across models since they are not tightly coupled to the modeling function.\nA recipe enables a broader set of data processing choices than formulas can offer.\nThe syntax can be very compact. For example, all_nominal_predictors() can be used to capture many variables for specific types of processing while a formula would require each to be explicitly listed.\nAll data processing can be captured in a single R object instead of in scripts that are repeated, or even spread across different files."
  },
  {
    "objectID": "08-feature-engineering.html#using-recipes",
    "href": "08-feature-engineering.html#using-recipes",
    "title": "8  Feature Engineering with recipes",
    "section": "\n8.2 Using Recipes",
    "text": "8.2 Using Recipes\nAs we discussed in Chapter 7, preprocessing choices and feature engineering should typically be considered part of a modeling workflow, not a separate task. The workflows package contains high level functions to handle different types of preprocessors. Our previous workflow (lm_wflow) used a simple set of dplyr selectors. To improve on that approach with more complex feature engineering, let’s use the simple_ames recipe to preprocess data for modeling.\nThis object can be attached to the workflow:\n\nlm_wflow %&gt;% \n  add_recipe(simple_ames)\n## Error in `add_recipe()`:\n## ! A recipe cannot be added when variables already exist.\n\nThat did not work! We can have only one preprocessing method at a time, so we need to remove the existing preprocessor before adding the recipe.\n\nlm_wflow &lt;- \n  lm_wflow %&gt;% \n  remove_variables() %&gt;% \n  add_recipe(simple_ames)\nlm_wflow\n## ══ Workflow ═════════════════════════════════════════════════════════════════════════\n## Preprocessor: Recipe\n## Model: linear_reg()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## 2 Recipe Steps\n## \n## • step_log()\n## • step_dummy()\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## Linear Regression Model Specification (regression)\n## \n## Computational engine: lm\n\nLet’s estimate both the recipe and model using a simple call to fit():\n\nlm_fit &lt;- fit(lm_wflow, ames_train)\n\nThe predict() method applies the same preprocessing that was used on the training set to the new data before passing them along to the model’s predict() method:\n\npredict(lm_fit, ames_test %&gt;% slice(1:3))\n## # A tibble: 3 × 1\n##   .pred\n##   &lt;dbl&gt;\n## 1  5.08\n## 2  5.32\n## 3  5.28\n\nIf we need the bare model object or recipe, there are extract_* functions that can retrieve them:\n\n# Get the recipe after it has been estimated:\nlm_fit %&gt;% \n  extract_recipe(estimated = TRUE)\n## \n## ── Recipe ───────────────────────────────────────────────────────────────────────────\n## \n## ── Inputs\n## Number of variables by role\n## outcome:   1\n## predictor: 4\n## \n## ── Training information\n## Training data contained 2342 data points and no incomplete rows.\n## \n## ── Operations\n## • Log transformation on: Gr_Liv_Area | Trained\n## • Dummy variables from: Neighborhood, Bldg_Type | Trained\n\n# To tidy the model fit: \nlm_fit %&gt;% \n  # This returns the parsnip object:\n  extract_fit_parsnip() %&gt;% \n  # Now tidy the linear model object:\n  tidy() %&gt;% \n  slice(1:5)\n## # A tibble: 5 × 5\n##   term                       estimate std.error statistic   p.value\n##   &lt;chr&gt;                         &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n## 1 (Intercept)                -0.669    0.231        -2.90 3.80e-  3\n## 2 Gr_Liv_Area                 0.620    0.0143       43.2  2.63e-299\n## 3 Year_Built                  0.00200  0.000117     17.1  6.16e- 62\n## 4 Neighborhood_College_Creek  0.0178   0.00819       2.17 3.02e-  2\n## 5 Neighborhood_Old_Town      -0.0330   0.00838      -3.93 8.66e-  5\n\n\nTools for using (and debugging) recipes outside of workflow objects are described in ?sec-recipe-functions."
  },
  {
    "objectID": "08-feature-engineering.html#how-data-are-used-by-the-recipe",
    "href": "08-feature-engineering.html#how-data-are-used-by-the-recipe",
    "title": "8  Feature Engineering with recipes",
    "section": "\n8.3 How Data Are Used by the recipe()\n",
    "text": "8.3 How Data Are Used by the recipe()\n\nData are passed to recipes at different stages.\nFirst, when calling recipe(..., data), the data set is used to determine the data types of each column so that selectors such as all_numeric() or all_numeric_predictors() can be used.\nSecond, when preparing the data using fit(workflow, data), the training data are used for all estimation operations including a recipe that may be part of the workflow, from determining factor levels to computing PCA components and everything in between.\n\nAll preprocessing and feature engineering steps use only the training data. Otherwise, information leakage can negatively impact the model’s performance when used with new data.\n\nFinally, when using predict(workflow, new_data), no model or preprocessor parameters like those from recipes are re-estimated using the values in new_data. Take centering and scaling using step_normalize() as an example. Using this step, the means and standard deviations from the appropriate columns are determined from the training set; new samples at prediction time are standardized using these values from training when predict() is invoked."
  },
  {
    "objectID": "08-feature-engineering.html#example-steps",
    "href": "08-feature-engineering.html#example-steps",
    "title": "8  Feature Engineering with recipes",
    "section": "\n8.4 Examples of Recipe Steps",
    "text": "8.4 Examples of Recipe Steps\nBefore proceeding, let’s take an extended tour of the capabilities of recipes and explore some of the most important step_*() functions. These recipe step functions each specify a specific possible step in a feature engineering process, and different recipe steps can have different effects on columns of data.\n\n8.4.1 Encoding qualitative data in a numeric format\nOne of the most common feature engineering tasks is transforming nominal or qualitative data (factors or characters) so that they can be encoded or represented numerically. Sometimes we can alter the factor levels of a qualitative column in helpful ways prior to such a transformation. For example, step_unknown() can be used to change missing values to a dedicated factor level. Similarly, if we anticipate that a new factor level may be encountered in future data, step_novel() can allot a new level for this purpose.\nAdditionally, step_other() can be used to analyze the frequencies of the factor levels in the training set and convert infrequently occurring values to a catch-all level of “other,” with a threshold that can be specified. A good example is the Neighborhood predictor in our data, shown in Figure 8.1.\n\n\n\n\nFigure 8.1: Frequencies of neighborhoods in the Ames training set\n\n\n\nHere we see that two neighborhoods have less than five properties in the training data (Landmark and Green Hills); in this case, no houses at all in the Landmark neighborhood were included in the testing set. For some models, it may be problematic to have dummy variables with a single nonzero entry in the column. At a minimum, it is highly improbable that these features would be important to a model. If we add step_other(Neighborhood, threshold = 0.01) to our recipe, the bottom 1% of the neighborhoods will be lumped into a new level called “other.” In this training set, this will catch seven neighborhoods.\nFor the Ames data, we can amend the recipe to use:\n\nsimple_ames &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type,\n         data = ames_train) %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_other(Neighborhood, threshold = 0.01) %&gt;% \n  step_dummy(all_nominal_predictors())\n\n\nMany, but not all, underlying model calculations require predictor values to be encoded as numbers. Notable exceptions include tree-based models, rule-based models, and naive Bayes models.\n\nThe most common method for converting a factor predictor to a numeric format is to create dummy or indicator variables. Let’s take the predictor in the Ames data for the building type, which is a factor variable with five levels (see Table 8.1). For dummy variables, the single Bldg_Type column would be replaced with four numeric columns whose values are either zero or one. These binary variables represent specific factor level values. In R, the convention is to exclude a column for the first factor level (OneFam, in this case). The Bldg_Type column would be replaced with a column called TwoFmCon that is one when the row has that value and zero otherwise. Three other columns are similarly created:\n\n\n\n\nTable 8.1: Illustration of binary encodings (i.e., dummy variables) for a qualitative predictor.\n\nRaw Data\nTwoFmCon\nDuplex\nTwnhs\nTwnhsE\n\n\n\nOneFam\n0\n0\n0\n0\n\n\nTwoFmCon\n1\n0\n0\n0\n\n\nDuplex\n0\n1\n0\n0\n\n\nTwnhs\n0\n0\n1\n0\n\n\nTwnhsE\n0\n0\n0\n1\n\n\n\n\n\n\n\n\nWhy not all five? The most basic reason is simplicity; if you know the value for these four columns, you can determine the last value because these are mutually exclusive categories. More technically, the classical justification is that a number of models, including ordinary linear regression, have numerical issues when there are linear dependencies between columns. If all five building type indicator columns are included, they would add up to the intercept column (if there is one). This would cause an issue, or perhaps an outright error, in the underlying matrix algebra.\nThe full set of encodings can be used for some models. This is traditionally called the one-hot encoding and can be achieved using the one_hot argument of step_dummy().\nOne helpful feature of step_dummy() is that there is more control over how the resulting dummy variables are named. In base R, dummy variable names mash the variable name with the level, resulting in names like NeighborhoodVeenker. Recipes, by default, use an underscore as the separator between the name and level (e.g., Neighborhood_Veenker) and there is an option to use custom formatting for the names. The default naming convention in recipes makes it easier to capture those new columns in future steps using a selector, such as starts_with(\"Neighborhood_\").\nTraditional dummy variables require that all of the possible categories be known to create a full set of numeric features. There are other methods for doing this transformation to a numeric format. Feature hashing methods only consider the value of the category to assign it to a predefined pool of dummy variables. Effect or likelihood encodings replace the original data with a single numeric column that measures the effect of those data. Both feature hashing and effect encoding can seamlessly handle situations where a novel factor level is encountered in the data. ?sec-categorical explores these and other methods for encoding categorical data, beyond straightforward dummy or indicator variables.\n\nDifferent recipe steps behave differently when applied to variables in the data. For example, step_log() modifies a column in place without changing the name. Other steps, such as step_dummy(), eliminate the original data column and replace it with one or more columns with different names. The effect of a recipe step depends on the type of feature engineering transformation being done.\n\n\n8.4.2 Interaction terms\nInteraction effects involve two or more predictors. Such an effect occurs when one predictor has an effect on the outcome that is contingent on one or more other predictors. For example, if you were trying to predict how much traffic there will be during your commute, two potential predictors could be the specific time of day you commute and the weather. However, the relationship between the amount of traffic and bad weather is different for different times of day. In this case, you could add an interaction term between the two predictors to the model along with the original two predictors (which are called the main effects). Numerically, an interaction term between predictors is encoded as their product. Interactions are defined in terms of their effect on the outcome and can be combinations of different types of data (e.g., numeric, categorical, etc). Chapter 7 of Kuhn and Johnson (2020) discusses interactions and how to detect them in greater detail.\nAfter exploring the Ames training set, we might find that the regression slopes for the gross living area differ for different building types, as shown in Figure 8.2.\n\nggplot(ames_train, aes(x = Gr_Liv_Area, y = 10^Sale_Price)) + \n  geom_point(alpha = .2) + \n  facet_wrap(~ Bldg_Type) + \n  geom_smooth(method = lm, formula = y ~ x, se = FALSE, color = \"lightblue\") + \n  scale_x_log10() + \n  scale_y_log10() + \n  labs(x = \"Gross Living Area\", y = \"Sale Price (USD)\")\n\n\n\n\n\nFigure 8.2: Gross living area (in log-10 units) versus sale price (also in log-10 units) for five different building types\n\n\n\nHow are interactions specified in a recipe? A base R formula would take an interaction using a :, so we would use:\nSale_Price ~ Neighborhood + log10(Gr_Liv_Area) + Bldg_Type + \n  log10(Gr_Liv_Area):Bldg_Type\n# or\nSale_Price ~ Neighborhood + log10(Gr_Liv_Area) * Bldg_Type \nwhere * expands those columns to the main effects and interaction term. Again, the formula method does many things simultaneously and understands that a factor variable (such as Bldg_Type) should be expanded into dummy variables first and that the interaction should involve all of the resulting binary columns.\nRecipes are more explicit and sequential, and they give you more control. With the current recipe, step_dummy() has already created dummy variables. How would we combine these for an interaction? The additional step would look like step_interact(~ interaction terms) where the terms on the right-hand side of the tilde are the interactions. These can include selectors, so it would be appropriate to use:\n\nsimple_ames &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type,\n         data = ames_train) %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_other(Neighborhood, threshold = 0.01) %&gt;% \n  step_dummy(all_nominal_predictors()) %&gt;% \n  # Gr_Liv_Area is on the log scale from a previous step\n  step_interact( ~ Gr_Liv_Area:starts_with(\"Bldg_Type_\") )\n\nAdditional interactions can be specified in this formula by separating them by +. Also note that the recipe will only use interactions between different variables; if the formula uses var_1:var_1, this term will be ignored.\nSuppose that, in a recipe, we had not yet made dummy variables for building types. It would be inappropriate to include a factor column in this step, such as:\n step_interact( ~ Gr_Liv_Area:Bldg_Type )\nThis is telling the underlying (base R) code used by step_interact() to make dummy variables and then form the interactions. In fact, if this occurs, a warning states that this might generate unexpected results.\n\n\n\nThis behavior gives you more control, but it is different from R’s standard model formula.\n\n\n\nAs with naming dummy variables, recipes provides more coherent names for interaction terms. In this case, the interaction is named Gr_Liv_Area_x_Bldg_Type_Duplex instead of Gr_Liv_Area:Bldg_TypeDuplex (which is not a valid column name for a data frame).\n\nRemember that order matters. The gross living area is log transformed prior to the interaction term. Subsequent interactions with this variable will also use the log scale.\n\n\n8.4.3 Spline functions\nWhen a predictor has a nonlinear relationship with the outcome, some types of predictive models can adaptively approximate this relationship during training. However, simpler is usually better and it is not uncommon to try to use a simple model, such as a linear fit, and add in specific nonlinear features for predictors that may need them, such as longitude and latitude for the Ames housing data. One common method for doing this is to use spline functions to represent the data. Splines replace the existing numeric predictor with a set of columns that allow a model to emulate a flexible, nonlinear relationship. As more spline terms are added to the data, the capacity to nonlinearly represent the relationship increases. Unfortunately, it may also increase the likelihood of picking up on data trends that occur by chance (i.e., overfitting).\nIf you have ever used geom_smooth() within a ggplot, you have probably used a spline representation of the data. For example, each panel in Figure 8.3 uses a different number of smooth splines for the latitude predictor:\n\nlibrary(patchwork)\nlibrary(splines)\n\nplot_smoother &lt;- function(deg_free) {\n  ggplot(ames_train, aes(x = Latitude, y = 10^Sale_Price)) + \n    geom_point(alpha = .2) + \n    scale_y_log10() +\n    geom_smooth(\n      method = lm,\n      formula = y ~ ns(x, df = deg_free),\n      color = \"lightblue\",\n      se = FALSE\n    ) +\n    labs(title = paste(deg_free, \"Spline Terms\"),\n         y = \"Sale Price (USD)\")\n}\n\n( plot_smoother(2) + plot_smoother(5) ) / ( plot_smoother(20) + plot_smoother(100) )\n\n\n\n\n\nFigure 8.3: Sale price versus latitude, with trend lines using natural splines with different degrees of freedom\n\n\n\nThe ns() function in the splines package generates feature columns using functions called natural splines.\nSome panels in Figure 8.3 clearly fit poorly; two terms underfit the data while 100 terms overfit. The panels with five and twenty terms seem like reasonably smooth fits that catch the main patterns of the data. This indicates that the proper amount of “nonlinear-ness” matters. The number of spline terms could then be considered a tuning parameter for this model. These types of parameters are explored in ?sec-tuning.\nIn recipes, multiple steps can create these types of terms. To add a natural spline representation for this predictor:\n\nrecipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + Latitude,\n         data = ames_train) %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_other(Neighborhood, threshold = 0.01) %&gt;% \n  step_dummy(all_nominal_predictors()) %&gt;% \n  step_interact( ~ Gr_Liv_Area:starts_with(\"Bldg_Type_\") ) %&gt;% \n  step_ns(Latitude, deg_free = 20)\n\nThe user would need to determine if both neighborhood and latitude should be in the model since they both represent the same underlying data in different ways.\n\n8.4.4 Feature extraction\nAnother common method for representing multiple features at once is called feature extraction. Most of these techniques create new features from the predictors that capture the information in the broader set as a whole. For example, principal component analysis (PCA) tries to extract as much of the original information in the predictor set as possible using a smaller number of features. PCA is a linear extraction method, meaning that each new feature is a linear combination of the original predictors. One nice aspect of PCA is that each of the new features, called the principal components or PCA scores, are uncorrelated with one another. Because of this, PCA can be very effective at reducing the correlation between predictors. Note that PCA is only aware of the predictors; the new PCA features might not be associated with the outcome.\nIn the Ames data, several predictors measure size of the property, such as the total basement size (Total_Bsmt_SF), size of the first floor (First_Flr_SF), the gross living area (Gr_Liv_Area), and so on. PCA might be an option to represent these potentially redundant variables as a smaller feature set. Apart from the gross living area, these predictors have the suffix SF in their names (for square feet) so a recipe step for PCA might look like:\n  # Use a regular expression to capture house size predictors: \n  step_pca(matches(\"(SF$)|(Gr_Liv)\"))\nNote that all of these columns are measured in square feet. PCA assumes that all of the predictors are on the same scale. That’s true in this case, but often this step can be preceded by step_normalize(), which will center and scale each column.\nThere are existing recipe steps for other extraction methods, such as: independent component analysis (ICA), non-negative matrix factorization (NNMF), multidimensional scaling (MDS), uniform manifold approximation and projection (UMAP), and others.\n\n8.4.5 Row sampling steps\nRecipe steps can affect the rows of a data set as well. For example, subsampling techniques for class imbalances change the class proportions in the data being given to the model; these techniques often don’t improve overall performance but can generate better behaved distributions of the predicted class probabilities. These are approaches to try when subsampling your data with class imbalance:\n\nDownsampling the data keeps the minority class and takes a random sample of the majority class so that class frequencies are balanced.\nUpsampling replicates samples from the minority class to balance the classes. Some techniques do this by synthesizing new samples that resemble the minority class data while other methods simply add the same minority samples repeatedly.\nHybrid methods do a combination of both.\n\nThe themis package has recipe steps that can be used to address class imbalance via subsampling. For simple downsampling, we would use:\n  step_downsample(outcome_column_name)\n\nOnly the training set should be affected by these techniques. The test set or other holdout samples should be left as-is when processed using the recipe. For this reason, all of the subsampling steps default the skip argument to have a value of TRUE (?sec-skip-equals-true).\n\nOther step functions are row-based as well: step_filter(), step_sample(), step_slice(), and step_arrange(). In almost all uses of these steps, the skip argument should be set to TRUE.\n\n8.4.6 General transformations\nMirroring the original dplyr operation, step_mutate() can be used to conduct a variety of basic operations to the data. It is best used for straightforward transformations like computing a ratio of two variables, such as Bedroom_AbvGr / Full_Bath, the ratio of bedrooms to bathrooms for the Ames housing data.\n\nWhen using this flexible step, use extra care to avoid data leakage in your preprocessing. Consider, for example, the transformation x = w &gt; mean(w). When applied to new data or testing data, this transformation would use the mean of w from the new data, not the mean of w from the training data.\n\n\n8.4.7 Natural language processing\nRecipes can also handle data that are not in the traditional structure where the columns are features. For example, the textrecipes package can apply natural language processing methods to the data. The input column is typically a string of text, and different steps can be used to tokenize the data (e.g., split the text into separate words), filter out tokens, and create new features appropriate for modeling."
  },
  {
    "objectID": "08-feature-engineering.html#skip-equals-true",
    "href": "08-feature-engineering.html#skip-equals-true",
    "title": "8  Feature Engineering with recipes",
    "section": "\n8.5 Skipping Steps for New Data",
    "text": "8.5 Skipping Steps for New Data\nThe sale price data are already log-transformed in the ames data frame. Why not use:\n step_log(Sale_Price, base = 10)\nThis will cause a failure when the recipe is applied to new properties with an unknown sale price. Since price is what we are trying to predict, there probably won’t be a column in the data for this variable. In fact, to avoid information leakage, many tidymodels packages isolate the data being used when making any predictions. This means that the training set and any outcome columns are not available for use at prediction time.\n\nFor simple transformations of the outcome column(s), we strongly suggest that those operations be conducted outside of the recipe.\n\nHowever, there are other circumstances where this is not an adequate solution. For example, in classification models where there is a severe class imbalance, it is common to conduct subsampling of the data that are given to the modeling function. For example, suppose that there were two classes and a 10% event rate. A simple, albeit controversial, approach would be to downsample the data so that the model is provided with all of the events and a random 10% of the nonevent samples.\nThe problem is that the same subsampling process should not be applied to the data being predicted. As a result, when using a recipe, we need a mechanism to ensure that some operations are applied only to the data that are given to the model. Each step function has an option called skip that, when set to TRUE, will be ignored by the predict() function. In this way, you can isolate the steps that affect the modeling data without causing errors when applied to new samples. However, all steps are applied when using fit().\nAt the time of this writing, the step functions in the recipes and themis packages that are only applied to the training data are: step_adasyn(), step_bsmote(), step_downsample(), step_filter(), step_naomit(), step_nearmiss(), step_rose(), step_sample(), step_slice(), step_smote(), step_smotenc(), step_tomek(), and step_upsample()."
  },
  {
    "objectID": "08-feature-engineering.html#tidy-a-recipe",
    "href": "08-feature-engineering.html#tidy-a-recipe",
    "title": "8  Feature Engineering with recipes",
    "section": "\n8.6 Tidy a recipe()\n",
    "text": "8.6 Tidy a recipe()\n\nIn Section 3.3, we introduced the tidy() verb for statistical objects. There is also a tidy() method for recipes, as well as individual recipe steps. Before proceeding, let’s create an extended recipe for the Ames data using some of the new steps we’ve discussed in this chapter:\n\names_rec &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n           Latitude + Longitude, data = ames_train) %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_other(Neighborhood, threshold = 0.01) %&gt;% \n  step_dummy(all_nominal_predictors()) %&gt;% \n  step_interact( ~ Gr_Liv_Area:starts_with(\"Bldg_Type_\") ) %&gt;% \n  step_ns(Latitude, Longitude, deg_free = 20)\n\nThe tidy() method, when called with the recipe object, gives a summary of the recipe steps:\n\ntidy(ames_rec)\n## # A tibble: 5 × 6\n##   number operation type     trained skip  id            \n##    &lt;int&gt; &lt;chr&gt;     &lt;chr&gt;    &lt;lgl&gt;   &lt;lgl&gt; &lt;chr&gt;         \n## 1      1 step      log      FALSE   FALSE log_66JTU     \n## 2      2 step      other    FALSE   FALSE other_ePfcw   \n## 3      3 step      dummy    FALSE   FALSE dummy_Z18Cl   \n## 4      4 step      interact FALSE   FALSE interact_JLU36\n## 5      5 step      ns       FALSE   FALSE ns_rvsqQ\n\nThis result can be helpful for identifying individual steps, perhaps to then be able to execute the tidy() method on one specific step.\nWe can specify the id argument in any step function call; otherwise it is generated using a random suffix. Setting this value can be helpful if the same type of step is added to the recipe more than once. Let’s specify the id ahead of time for step_other(), since we’ll want to tidy() it:\n\names_rec &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n           Latitude + Longitude, data = ames_train) %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_other(Neighborhood, threshold = 0.01, id = \"my_id\") %&gt;% \n  step_dummy(all_nominal_predictors()) %&gt;% \n  step_interact( ~ Gr_Liv_Area:starts_with(\"Bldg_Type_\") ) %&gt;% \n  step_ns(Latitude, Longitude, deg_free = 20)\n\nWe’ll refit the workflow with this new recipe:\n\nlm_wflow &lt;- \n  workflow() %&gt;% \n  add_model(lm_model) %&gt;% \n  add_recipe(ames_rec)\n\nlm_fit &lt;- fit(lm_wflow, ames_train)\n\nThe tidy() method can be called again along with the id identifier we specified to get our results for applying step_other():\n\nestimated_recipe &lt;- \n  lm_fit %&gt;% \n  extract_recipe(estimated = TRUE)\n\ntidy(estimated_recipe, id = \"my_id\")\n## # A tibble: 22 × 3\n##   terms        retained           id   \n##   &lt;chr&gt;        &lt;chr&gt;              &lt;chr&gt;\n## 1 Neighborhood North_Ames         my_id\n## 2 Neighborhood College_Creek      my_id\n## 3 Neighborhood Old_Town           my_id\n## 4 Neighborhood Edwards            my_id\n## 5 Neighborhood Somerset           my_id\n## 6 Neighborhood Northridge_Heights my_id\n## # ℹ 16 more rows\n\nThe tidy() results we see here for using step_other() show which factor levels were retained, i.e., not added to the new “other” category.\nThe tidy() method can be called with the number identifier as well, if we know which step in the recipe we need:\n\ntidy(estimated_recipe, number = 2)\n## # A tibble: 22 × 3\n##   terms        retained           id   \n##   &lt;chr&gt;        &lt;chr&gt;              &lt;chr&gt;\n## 1 Neighborhood North_Ames         my_id\n## 2 Neighborhood College_Creek      my_id\n## 3 Neighborhood Old_Town           my_id\n## 4 Neighborhood Edwards            my_id\n## 5 Neighborhood Somerset           my_id\n## 6 Neighborhood Northridge_Heights my_id\n## # ℹ 16 more rows\n\nEach tidy() method returns the relevant information about that step. For example, the tidy() method for step_dummy() returns a column with the variables that were converted to dummy variables and another column with all of the known levels for each column."
  },
  {
    "objectID": "08-feature-engineering.html#column-roles",
    "href": "08-feature-engineering.html#column-roles",
    "title": "8  Feature Engineering with recipes",
    "section": "\n8.7 Column Roles",
    "text": "8.7 Column Roles\nWhen a formula is used with the initial call to recipe() it assigns roles to each of the columns, depending on which side of the tilde they are on. Those roles are either \"predictor\" or \"outcome\". However, other roles can be assigned as needed.\nFor example, in our Ames data set, the original raw data contained a column for address.1 It may be useful to keep that column in the data so that, after predictions are made, problematic results can be investigated in detail. In other words, the column could be important even when it isn’t a predictor or outcome.\nTo solve this, the add_role(), remove_role(), and update_role() functions can be helpful. For example, for the house price data, the role of the street address column could be modified using:\names_rec %&gt;% update_role(address, new_role = \"street address\")\nAfter this change, the address column in the dataframe will no longer be a predictor but instead will be a \"street address\" according to the recipe. Any character string can be used as a role. Also, columns can have multiple roles (additional roles are added via add_role()) so that they can be selected under more than one context.\nThis can be helpful when the data are resampled. It helps to keep the columns that are not involved with the model fit in the same data frame (rather than in an external vector). Resampling, described in Chapter 10, creates alternate versions of the data mostly by row subsampling. If the street address were in another column, additional subsampling would be required and might lead to more complex code and a higher likelihood of errors.\nFinally, all step functions have a role field that can assign roles to the results of the step. In many cases, columns affected by a step retain their existing role. For example, the step_log() calls to our ames_rec object affected the Gr_Liv_Area column. For that step, the default behavior is to keep the existing role for this column since no new column is created. As a counter-example, the step to produce splines defaults new columns to have a role of \"predictor\" since that is usually how spline columns are used in a model. Most steps have sensible defaults but, since the defaults can be different, be sure to check the documentation page to understand which role(s) will be assigned."
  },
  {
    "objectID": "08-feature-engineering.html#recipes-summary",
    "href": "08-feature-engineering.html#recipes-summary",
    "title": "8  Feature Engineering with recipes",
    "section": "\n8.8 Chapter Summary",
    "text": "8.8 Chapter Summary\nIn this chapter, you learned about using recipes for flexible feature engineering and data preprocessing, from creating dummy variables to handling class imbalance and more. Feature engineering is an important part of the modeling process where information leakage can easily occur and good practices must be adopted. Between the recipes package and other packages that extend recipes, there are over 100 available steps. All possible recipe steps are enumerated at tidymodels.org/find. The recipes framework provides a rich data manipulation environment for preprocessing and transforming data prior to modeling. Additionally, tidymodels.org/learn/develop/recipes/ shows how custom steps can be created.\nOur work here has used recipes solely inside of a workflow object. For modeling, that is the recommended use because feature engineering should be estimated together with a model. However, for visualization and other activities, a workflow may not be appropriate; more recipe-specific functions may be required. ?sec-dimensionality discusses lower-level APIs for fitting, using, and troubleshooting recipes.\nThe code that we will use in later chapters is:\n\nlibrary(tidymodels)\ndata(ames)\names &lt;- mutate(ames, Sale_Price = log10(Sale_Price))\n\nset.seed(502)\names_split &lt;- initial_split(ames, prop = 0.80, strata = Sale_Price)\names_train &lt;- training(ames_split)\names_test  &lt;-  testing(ames_split)\n\names_rec &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n           Latitude + Longitude, data = ames_train) %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_other(Neighborhood, threshold = 0.01) %&gt;% \n  step_dummy(all_nominal_predictors()) %&gt;% \n  step_interact( ~ Gr_Liv_Area:starts_with(\"Bldg_Type_\") ) %&gt;% \n  step_ns(Latitude, Longitude, deg_free = 20)\n  \nlm_model &lt;- linear_reg() %&gt;% set_engine(\"lm\")\n\nlm_wflow &lt;- \n  workflow() %&gt;% \n  add_model(lm_model) %&gt;% \n  add_recipe(ames_rec)\n\nlm_fit &lt;- fit(lm_wflow, ames_train)\n\n\n\n\n\nKuhn, M, and K Johnson. 2020. Feature Engineering and Selection: A Practical Approach for Predictive Models. CRC Press."
  },
  {
    "objectID": "08-feature-engineering.html#footnotes",
    "href": "08-feature-engineering.html#footnotes",
    "title": "8  Ingeniería de Características con recipes",
    "section": "",
    "text": "Nuestra versión de estos datos no contiene esa columna.↩︎"
  },
  {
    "objectID": "09-judging-model-effectiveness.html#performance-metrics-and-inference",
    "href": "09-judging-model-effectiveness.html#performance-metrics-and-inference",
    "title": "9  Judging Model Effectiveness",
    "section": "\n9.1 Performance Metrics and Inference",
    "text": "9.1 Performance Metrics and Inference\nThe effectiveness of any given model depends on how the model will be used. An inferential model is used primarily to understand relationships, and typically emphasizes the choice (and validity) of probabilistic distributions and other generative qualities that define the model. For a model used primarily for prediction, by contrast, predictive strength is of primary importance and other concerns about underlying statistical qualities may be less important. Predictive strength is usually determined by how close our predictions come to the observed data, i.e., fidelity of the model predictions to the actual results. This chapter focuses on functions that can be used to measure predictive strength. However, our advice for those developing inferential models is to use these techniques even when the model will not be used with the primary goal of prediction.\nA longstanding issue with the practice of inferential statistics is that, with a focus purely on inference, it is difficult to assess the credibility of a model. For example, consider the Alzheimer’s disease data from Craig–Schapiro et al. (2011) when 333 patients were studied to determine the factors that influence cognitive impairment. An analysis might take the known risk factors and build a logistic regression model where the outcome is binary (impaired/non-impaired). Let’s consider predictors for age, sex, and the Apolipoprotein E genotype. The latter is a categorical variable with the six possible combinations of the three main variants of this gene. Apolipoprotein E is known to have an association with dementia (Jungsu, Basak, and Holtzman 2009).\nA superficial, but not uncommon, approach to this analysis would be to fit a large model with main effects and interactions, then use statistical tests to find the minimal set of model terms that are statistically significant at some pre-defined level. If a full model with the three factors and their two- and three-way interactions were used, an initial phase would be to test the interactions using sequential likelihood ratio tests (Hosmer and Lemeshow 2000). Let’s step through this kind of approach for the example Alzheimer’s disease data:\n\nWhen comparing the model with all two-way interactions to one with the additional three-way interaction, the likelihood ratio tests produces a p-value of 0.888. This implies that there is no evidence that the four additional model terms associated with the three-way interaction explain enough of the variation in the data to keep them in the model.\nNext, the two-way interactions are similarly evaluated against the model with no interactions. The p-value here is 0.0382. This is somewhat borderline, but, given the small sample size, it would be prudent to conclude that there is evidence that some of the 10 possible two-way interactions are important to the model.\nFrom here, we would build some explanation of the results. The interactions would be particularly important to discuss since they may spark interesting physiological or neurological hypotheses to be explored further.\n\nWhile shallow, this analysis strategy is common in practice as well as in the literature. This is especially true if the practitioner has limited formal training in data analysis.\nOne missing piece of information in this approach is how closely this model fits the actual data. Using resampling methods, discussed in Chapter 10, we can estimate the accuracy of this model to be about 73%. Accuracy is often a poor measure of model performance; we use it here because it is commonly understood. If the model has 73% fidelity to the data, should we trust conclusions it produces? We might think so until we realize that the baseline rate of nonimpaired patients in the data is 72.7%. This means that, despite our statistical analysis, the two-factor model appears to be only 0.3% better than a simple heuristic that always predicts patients to be unimpaired, regardless of the observed data.\n\nThe point of this analysis is to demonstrate the idea that optimization of statistical characteristics of the model does not imply that the model fits the data well. Even for purely inferential models, some measure of fidelity to the data should accompany the inferential results. Using this, the consumers of the analyses can calibrate their expectations of the results.\n\nIn the remainder of this chapter, we will discuss general approaches for evaluating models via empirical validation. These approaches are grouped by the nature of the outcome data: purely numeric, binary classes, and three or more class levels."
  },
  {
    "objectID": "09-judging-model-effectiveness.html#regression-metrics",
    "href": "09-judging-model-effectiveness.html#regression-metrics",
    "title": "9  Judging Model Effectiveness",
    "section": "\n9.2 Regression Metrics",
    "text": "9.2 Regression Metrics\nRecall from Section 6.3 that tidymodels prediction functions produce tibbles with columns for the predicted values. These columns have consistent names, and the functions in the yardstick package that produce performance metrics have consistent interfaces. The functions are data frame-based, as opposed to vector-based, with the general syntax of:\nfunction(data, truth, ...)\nwhere data is a data frame or tibble and truth is the column with the observed outcome values. The ellipses or other arguments are used to specify the column(s) containing the predictions.\nTo illustrate, let’s take the model from Section 8.8. This model lm_wflow_fit combines a linear regression model with a predictor set supplemented with an interaction and spline functions for longitude and latitude. It was created from a training set (named ames_train). Although we do not advise using the test set at this juncture of the modeling process, it will be used here to illustrate functionality and syntax. The data frame ames_test consists of 588 properties. To start, let’s produce predictions:\n\names_test_res &lt;- predict(lm_fit, new_data = ames_test %&gt;% select(-Sale_Price))\names_test_res\n## # A tibble: 588 × 1\n##   .pred\n##   &lt;dbl&gt;\n## 1  5.07\n## 2  5.31\n## 3  5.28\n## 4  5.33\n## 5  5.30\n## 6  5.24\n## # ℹ 582 more rows\n\nThe predicted numeric outcome from the regression model is named .pred. Let’s match the predicted values with their corresponding observed outcome values:\n\names_test_res &lt;- bind_cols(ames_test_res, ames_test %&gt;% select(Sale_Price))\names_test_res\n## # A tibble: 588 × 2\n##   .pred Sale_Price\n##   &lt;dbl&gt;      &lt;dbl&gt;\n## 1  5.07       5.02\n## 2  5.31       5.39\n## 3  5.28       5.28\n## 4  5.33       5.28\n## 5  5.30       5.28\n## 6  5.24       5.26\n## # ℹ 582 more rows\n\nWe see that these values mostly look close, but we don’t yet have a quantitative understanding of how the model is doing because we haven’t computed any performance metrics. Note that both the predicted and observed outcomes are in log-10 units. It is best practice to analyze the predictions on the transformed scale (if one were used) even if the predictions are reported using the original units.\nLet’s plot the data in Figure 9.2 before computing metrics:\n\nggplot(ames_test_res, aes(x = Sale_Price, y = .pred)) + \n  # Create a diagonal line:\n  geom_abline(lty = 2) + \n  geom_point(alpha = 0.5) + \n  labs(y = \"Predicted Sale Price (log10)\", x = \"Sale Price (log10)\") +\n  # Scale and size the x- and y-axis uniformly:\n  coord_obs_pred()\n\n\n\n\n\nFigure 9.2: Observed versus predicted values for an Ames regression model, with log-10 units on both axes\n\n\n\nThere is one low-price property that is substantially over-predicted, i.e., quite high above the dashed line.\nLet’s compute the root mean squared error for this model using the rmse() function:\n\nrmse(ames_test_res, truth = Sale_Price, estimate = .pred)\n## # A tibble: 1 × 3\n##   .metric .estimator .estimate\n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n## 1 rmse    standard      0.0736\n\nThis shows us the standard format of the output of yardstick functions. Metrics for numeric outcomes usually have a value of “standard” for the .estimator column. Examples with different values for this column are shown in the next sections.\nTo compute multiple metrics at once, we can create a metric set. Let’s add \\(R^2\\) and the mean absolute error:\n\names_metrics &lt;- metric_set(rmse, rsq, mae)\names_metrics(ames_test_res, truth = Sale_Price, estimate = .pred)\n## # A tibble: 3 × 3\n##   .metric .estimator .estimate\n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n## 1 rmse    standard      0.0736\n## 2 rsq     standard      0.836 \n## 3 mae     standard      0.0549\n\nThis tidy data format stacks the metrics vertically. The root mean squared error and mean absolute error metrics are both on the scale of the outcome (so log10(Sale_Price) for our example) and measure the difference between the predicted and observed values. The value for \\(R^2\\) measures the squared correlation between the predicted and observed values, so values closer to one are better.\n\nThe yardstick package does not contain a function for adjusted \\(R^2\\). This modification of the coefficient of determination is commonly used when the same data used to fit the model are used to evaluate the model. This metric is not fully supported in tidymodels because it is always a better approach to compute performance on a separate data set than the one used to fit the model."
  },
  {
    "objectID": "09-judging-model-effectiveness.html#binary-classification-metrics",
    "href": "09-judging-model-effectiveness.html#binary-classification-metrics",
    "title": "9  Judging Model Effectiveness",
    "section": "\n9.3 Binary Classification Metrics",
    "text": "9.3 Binary Classification Metrics\nTo illustrate other ways to measure model performance, we will switch to a different example. The modeldata package (another one of the tidymodels packages) contains example predictions from a test data set with two classes (“Class1” and “Class2”):\n\ndata(two_class_example)\ntibble(two_class_example)\n## # A tibble: 500 × 4\n##   truth   Class1   Class2 predicted\n##   &lt;fct&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;fct&gt;    \n## 1 Class2 0.00359 0.996    Class2   \n## 2 Class1 0.679   0.321    Class1   \n## 3 Class2 0.111   0.889    Class2   \n## 4 Class1 0.735   0.265    Class1   \n## 5 Class2 0.0162  0.984    Class2   \n## 6 Class1 0.999   0.000725 Class1   \n## # ℹ 494 more rows\n\nThe second and third columns are the predicted class probabilities for the test set while predicted are the discrete predictions.\nFor the hard class predictions, a variety of yardstick functions are helpful:\n\n# A confusion matrix: \nconf_mat(two_class_example, truth = truth, estimate = predicted)\n##           Truth\n## Prediction Class1 Class2\n##     Class1    227     50\n##     Class2     31    192\n\n# Accuracy:\naccuracy(two_class_example, truth, predicted)\n## # A tibble: 1 × 3\n##   .metric  .estimator .estimate\n##   &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n## 1 accuracy binary         0.838\n\n# Matthews correlation coefficient:\nmcc(two_class_example, truth, predicted)\n## # A tibble: 1 × 3\n##   .metric .estimator .estimate\n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n## 1 mcc     binary         0.677\n\n# F1 metric:\nf_meas(two_class_example, truth, predicted)\n## # A tibble: 1 × 3\n##   .metric .estimator .estimate\n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n## 1 f_meas  binary         0.849\n\n# Combining these three classification metrics together\nclassification_metrics &lt;- metric_set(accuracy, mcc, f_meas)\nclassification_metrics(two_class_example, truth = truth, estimate = predicted)\n## # A tibble: 3 × 3\n##   .metric  .estimator .estimate\n##   &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n## 1 accuracy binary         0.838\n## 2 mcc      binary         0.677\n## 3 f_meas   binary         0.849\n\nThe Matthews correlation coefficient and F1 score both summarize the confusion matrix, but compared to mcc(), which measures the quality of both positive and negative examples, the f_meas() metric emphasizes the positive class, i.e., the event of interest. For binary classification data sets like this example, yardstick functions have a standard argument called event_level to distinguish positive and negative levels. The default (which we used in this code) is that the first level of the outcome factor is the event of interest.\n\nThere is some heterogeneity in R functions in this regard; some use the first level and others the second to denote the event of interest. We consider it more intuitive that the first level is the most important. The second level logic is borne of encoding the outcome as 0/1 (in which case the second value is the event) and unfortunately remains in some packages. However, tidymodels (along with many other R packages) require a categorical outcome to be encoded as a factor and, for this reason, the legacy justification for the second level as the event becomes irrelevant.\n\nAs an example where the second level is the event:\n\nf_meas(two_class_example, truth, predicted, event_level = \"second\")\n## # A tibble: 1 × 3\n##   .metric .estimator .estimate\n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n## 1 f_meas  binary         0.826\n\nIn this output, the .estimator value of “binary” indicates that the standard formula for binary classes will be used.\nThere are numerous classification metrics that use the predicted probabilities as inputs rather than the hard class predictions. For example, the receiver operating characteristic (ROC) curve computes the sensitivity and specificity over a continuum of different event thresholds. The predicted class column is not used. There are two yardstick functions for this method: roc_curve() computes the data points that make up the ROC curve and roc_auc() computes the area under the curve.\nThe interfaces to these types of metric functions use the ... argument placeholder to pass in the appropriate class probability column. For two-class problems, the probability column for the event of interest is passed into the function:\n\ntwo_class_curve &lt;- roc_curve(two_class_example, truth, Class1)\ntwo_class_curve\n## # A tibble: 502 × 3\n##   .threshold specificity sensitivity\n##        &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n## 1 -Inf           0                 1\n## 2    1.79e-7     0                 1\n## 3    4.50e-6     0.00413           1\n## 4    5.81e-6     0.00826           1\n## 5    5.92e-6     0.0124            1\n## 6    1.22e-5     0.0165            1\n## # ℹ 496 more rows\n\nroc_auc(two_class_example, truth, Class1)\n## # A tibble: 1 × 3\n##   .metric .estimator .estimate\n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n## 1 roc_auc binary         0.939\n\nThe two_class_curve object can be used in a ggplot call to visualize the curve, as shown in Figure 9.3. There is an autoplot() method that will take care of the details:\n\nautoplot(two_class_curve)\n\n\n\n\n\nFigure 9.3: Example ROC curve\n\n\n\nIf the curve was close to the diagonal line, then the model’s predictions would be no better than random guessing. Since the curve is up in the top, left-hand corner, we see that our model performs well at different thresholds.\nThere are a number of other functions that use probability estimates, including gain_curve(), lift_curve(), and pr_curve()."
  },
  {
    "objectID": "09-judging-model-effectiveness.html#multiclass-classification-metrics",
    "href": "09-judging-model-effectiveness.html#multiclass-classification-metrics",
    "title": "9  Judging Model Effectiveness",
    "section": "\n9.4 Multiclass Classification Metrics",
    "text": "9.4 Multiclass Classification Metrics\nWhat about data with three or more classes? To demonstrate, let’s explore a different example data set that has four classes:\n\ndata(hpc_cv)\ntibble(hpc_cv)\n## # A tibble: 3,467 × 7\n##   obs   pred     VF      F       M          L Resample\n##   &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;   \n## 1 VF    VF    0.914 0.0779 0.00848 0.0000199  Fold01  \n## 2 VF    VF    0.938 0.0571 0.00482 0.0000101  Fold01  \n## 3 VF    VF    0.947 0.0495 0.00316 0.00000500 Fold01  \n## 4 VF    VF    0.929 0.0653 0.00579 0.0000156  Fold01  \n## 5 VF    VF    0.942 0.0543 0.00381 0.00000729 Fold01  \n## 6 VF    VF    0.951 0.0462 0.00272 0.00000384 Fold01  \n## # ℹ 3,461 more rows\n\nAs before, there are factors for the observed and predicted outcomes along with four other columns of predicted probabilities for each class. (These data also include a Resample column. These hpc_cv results are for out-of-sample predictions associated with 10-fold cross-validation. For the time being, this column will be ignored and we’ll discuss resampling in depth in Chapter 10.)\nThe functions for metrics that use the discrete class predictions are identical to their binary counterparts:\n\naccuracy(hpc_cv, obs, pred)\n## # A tibble: 1 × 3\n##   .metric  .estimator .estimate\n##   &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n## 1 accuracy multiclass     0.709\n\nmcc(hpc_cv, obs, pred)\n## # A tibble: 1 × 3\n##   .metric .estimator .estimate\n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n## 1 mcc     multiclass     0.515\n\nNote that, in these results, a “multiclass” .estimator is listed. Like “binary,” this indicates that the formula for outcomes with three or more class levels was used. The Matthews correlation coefficient was originally designed for two classes but has been extended to cases with more class levels.\nThere are methods for taking metrics designed to handle outcomes with only two classes and extend them for outcomes with more than two classes. For example, a metric such as sensitivity measures the true positive rate which, by definition, is specific to two classes (i.e., “event” and “nonevent”). How can this metric be used in our example data?\nThere are wrapper methods that can be used to apply sensitivity to our four-class outcome. These options are macro-averaging, macro-weighted averaging, and micro-averaging:\n\nMacro-averaging computes a set of one-versus-all metrics using the standard two-class statistics. These are averaged.\nMacro-weighted averaging does the same but the average is weighted by the number of samples in each class.\nMicro-averaging computes the contribution for each class, aggregates them, then computes a single metric from the aggregates.\n\nSee Wu and Zhou (2017) and Opitz and Burst (2019) for more on extending classification metrics to outcomes with more than two classes.\nUsing sensitivity as an example, the usual two-class calculation is the ratio of the number of correctly predicted events divided by the number of true events. The manual calculations for these averaging methods are:\n\nclass_totals &lt;- \n  count(hpc_cv, obs, name = \"totals\") %&gt;% \n  mutate(class_wts = totals / sum(totals))\nclass_totals\n##   obs totals class_wts\n## 1  VF   1769   0.51024\n## 2   F   1078   0.31093\n## 3   M    412   0.11883\n## 4   L    208   0.05999\n\ncell_counts &lt;- \n  hpc_cv %&gt;% \n  group_by(obs, pred) %&gt;% \n  count() %&gt;% \n  ungroup()\n\n# Compute the four sensitivities using 1-vs-all\none_versus_all &lt;- \n  cell_counts %&gt;% \n  filter(obs == pred) %&gt;% \n  full_join(class_totals, by = \"obs\") %&gt;% \n  mutate(sens = n / totals)\none_versus_all\n## # A tibble: 4 × 6\n##   obs   pred      n totals class_wts  sens\n##   &lt;fct&gt; &lt;fct&gt; &lt;int&gt;  &lt;int&gt;     &lt;dbl&gt; &lt;dbl&gt;\n## 1 VF    VF     1620   1769    0.510  0.916\n## 2 F     F       647   1078    0.311  0.600\n## 3 M     M        79    412    0.119  0.192\n## 4 L     L       111    208    0.0600 0.534\n\n# Three different estimates:\none_versus_all %&gt;% \n  summarize(\n    macro = mean(sens), \n    macro_wts = weighted.mean(sens, class_wts),\n    micro = sum(n) / sum(totals)\n  )\n## # A tibble: 1 × 3\n##   macro macro_wts micro\n##   &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;\n## 1 0.560     0.709 0.709\n\nThankfully, there is no need to manually implement these averaging methods. Instead, yardstick functions can automatically apply these methods via the estimator argument:\n\nsensitivity(hpc_cv, obs, pred, estimator = \"macro\")\n## # A tibble: 1 × 3\n##   .metric     .estimator .estimate\n##   &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt;\n## 1 sensitivity macro          0.560\nsensitivity(hpc_cv, obs, pred, estimator = \"macro_weighted\")\n## # A tibble: 1 × 3\n##   .metric     .estimator     .estimate\n##   &lt;chr&gt;       &lt;chr&gt;              &lt;dbl&gt;\n## 1 sensitivity macro_weighted     0.709\nsensitivity(hpc_cv, obs, pred, estimator = \"micro\")\n## # A tibble: 1 × 3\n##   .metric     .estimator .estimate\n##   &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt;\n## 1 sensitivity micro          0.709\n\nWhen dealing with probability estimates, there are some metrics with multiclass analogs. For example, Hand and Till (2001) determined a multiclass technique for ROC curves. In this case, all of the class probability columns must be given to the function:\n\nroc_auc(hpc_cv, obs, VF, F, M, L)\n## # A tibble: 1 × 3\n##   .metric .estimator .estimate\n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n## 1 roc_auc hand_till      0.829\n\nMacro-weighted averaging is also available as an option for applying this metric to a multiclass outcome:\n\nroc_auc(hpc_cv, obs, VF, F, M, L, estimator = \"macro_weighted\")\n## # A tibble: 1 × 3\n##   .metric .estimator     .estimate\n##   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;\n## 1 roc_auc macro_weighted     0.868\n\nFinally, all of these performance metrics can be computed using dplyr groupings. Recall that these data have a column for the resampling groups. We haven’t yet discussed resampling in detail, but notice how we can pass a grouped data frame to the metric function to compute the metrics for each group:\n\nhpc_cv %&gt;% \n  group_by(Resample) %&gt;% \n  accuracy(obs, pred)\n## # A tibble: 10 × 4\n##   Resample .metric  .estimator .estimate\n##   &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n## 1 Fold01   accuracy multiclass     0.726\n## 2 Fold02   accuracy multiclass     0.712\n## 3 Fold03   accuracy multiclass     0.758\n## 4 Fold04   accuracy multiclass     0.712\n## 5 Fold05   accuracy multiclass     0.712\n## 6 Fold06   accuracy multiclass     0.697\n## # ℹ 4 more rows\n\nThe groupings also translate to the autoplot() methods, with results shown in Figure 9.4.\n\n# Four 1-vs-all ROC curves for each fold\nhpc_cv %&gt;% \n  group_by(Resample) %&gt;% \n  roc_curve(obs, VF, F, M, L) %&gt;% \n  autoplot()\n\n\n\n\n\nFigure 9.4: Resampled ROC curves for each of the four outcome classes\n\n\n\nThis visualization shows us that the different groups all perform about the same, but that the VF class is predicted better than the F or M classes, since the VF ROC curves are more in the top-left corner. This example uses resamples as the groups, but any grouping in your data can be used. This autoplot() method can be a quick visualization method for model effectiveness across outcome classes and/or groups."
  },
  {
    "objectID": "09-judging-model-effectiveness.html#sec-performance-summary",
    "href": "09-judging-model-effectiveness.html#sec-performance-summary",
    "title": "9  Juzgar la Eficacia del Modelo",
    "section": "\n9.5 Resumen del capítulo",
    "text": "9.5 Resumen del capítulo\nDiferentes métricas miden diferentes aspectos del ajuste de un modelo, por ejemplo, RMSE mide la precisión mientras que \\(R^2\\) mide la correlación. Medir el rendimiento del modelo es importante incluso cuando un modelo determinado no se utilizará principalmente para predicción; el poder predictivo también es importante para los modelos inferenciales o descriptivos. Las funciones del paquete yardstick miden la efectividad de un modelo utilizando datos. La interfaz principal de tidymodels utiliza principios de tidyverse y marcos de datos (en lugar de tener argumentos vectoriales). Diferentes métricas son apropiadas para las métricas de regresión y clasificación y, dentro de ellas, a veces hay diferentes formas de estimar las estadísticas, como para resultados multiclase.\n\n\n\n\nCraig–Schapiro, R, M Kuhn, C Xiong, E Pickering, J Liu, T Misko, R Perrin, et al. 2011. «Multiplexed immunoassay panel identifies novel CSF biomarkers for Alzheimer’s disease diagnosis and prognosis». PLoS ONE 6 (4): e18850.\n\n\nHand, D, y R Till. 2001. «A simple generalisation of the area under the ROC curve for multiple class classification problems». Machine Learning 45 (agosto): 171-86.\n\n\nHosmer, D, y Sy Lemeshow. 2000. Applied Logistic Regression. New York: John Wiley; Sons.\n\n\nJungsu, K, D Basak, y D Holtzman. 2009. «The role of Apolipoprotein E in Alzheimer’s disease». Neuron 63 (3): 287-303.\n\n\nOpitz, J, y S Burst. 2019. «Macro F1 and Macro F1». https://arxiv.org/abs/1911.03347.\n\n\nWu, X, y Z Zhou. 2017. «A unified view of multi-label performance measures». En International Conference on Machine Learning, 3780-88."
  },
  {
    "objectID": "08-feature-engineering.html#sec-example-steps",
    "href": "08-feature-engineering.html#sec-example-steps",
    "title": "8  Ingeniería de Características con recipes",
    "section": "\n8.4 Ejemplos de Pasos de Recetas",
    "text": "8.4 Ejemplos de Pasos de Recetas\nAntes de continuar, hagamos un recorrido extenso por las capacidades de recipes y exploremos algunas de las funciones más importantes de step_*(). Cada una de estas funciones de pasos de recetas especifica un posible paso específico en un proceso de ingeniería de características, y diferentes pasos de recetas pueden tener diferentes efectos en las columnas de datos.\n\n8.4.1 Codificación de datos cualitativos en formato numérico\nUna de las tareas de ingeniería de características más comunes es transformar datos nominales o cualitativos (factores o caracteres) para que puedan codificarse o representarse numéricamente. A veces podemos alterar los niveles de factores de una columna cualitativa de manera útil antes de dicha transformación. Por ejemplo, step_unknown() se puede utilizar para cambiar los valores faltantes a un nivel de factor dedicado. De manera similar, si anticipamos que se puede encontrar un nuevo nivel de factor en datos futuros, step_novel() puede asignar un nuevo nivel para este propósito.\nAdemás, step_other() se puede utilizar para analizar las frecuencias de los niveles de factores en el conjunto de entrenamiento y convertir valores que ocurren con poca frecuencia a un nivel general de “otro”, con un umbral que se puede especificar. Un buen ejemplo es el predictor Neighborhood de nuestros datos, que se muestra en Figura 8.1.\n\n\n\n\nFigura 8.1: Frecuencias de barrios en el conjunto de entrenamiento de Ames\n\n\n\nAquí vemos que dos vecindarios tienen menos de cinco propiedades en los datos de entrenamiento (Landmark y Green Hills); en este caso, no se incluyó ninguna casa en el vecindario Landmark en el conjunto de pruebas. Para algunos modelos, puede resultar problemático tener variables ficticias con una única entrada distinta de cero en la columna. Como mínimo, es muy improbable que estas características sean importantes para un modelo. Si agregamos step_other(Neighborhood, umbral = 0.01) a nuestra receta, el 1% inferior de los vecindarios se agrupará en un nuevo nivel llamado “otros”. En este conjunto de entrenamiento, esto capturará los vecindarios seven.\nPara los datos de Ames, podemos modificar la receta para usar:\n\nsimple_ames &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type,\n         data = ames_train) %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_other(Neighborhood, threshold = 0.01) %&gt;% \n  step_dummy(all_nominal_predictors())\n\n\nMuchos, pero no todos, los cálculos del modelo subyacente requieren que los valores predictores se codifiquen como números. Las excepciones notables incluyen modelos basados en árboles, modelos basados en reglas y modelos ingenuos de Bayes.\n\nEl método más común para convertir un factor predictivo a un formato numérico es crear variables ficticias o indicadoras. Tomemos el predictor en los datos de Ames para el tipo de edificio, que es una variable factorial con cinco niveles (ver Tabla 8.1). Para variables ficticias, la única columna Bldg_Type se reemplazaría con cuatro columnas numéricas cuyos valores son cero o uno. Estas variables binarias representan valores de nivel de factor específicos. En R, la convención es excluir una columna para el primer nivel de factor (OneFam, en este caso). La columna Bldg_Type se reemplazaría con una columna llamada TwoFmCon que es uno cuando la fila tiene ese valor y cero en caso contrario. Se crean otras tres columnas de manera similar:\n\n\n\n\nTabla 8.1: Ilustración de codificaciones binarias (es decir, variables ficticias) para un predictor cualitativo.\n\nRaw Data\nTwoFmCon\nDuplex\nTwnhs\nTwnhsE\n\n\n\nOneFam\n0\n0\n0\n0\n\n\nTwoFmCon\n1\n0\n0\n0\n\n\nDuplex\n0\n1\n0\n0\n\n\nTwnhs\n0\n0\n1\n0\n\n\nTwnhsE\n0\n0\n0\n1\n\n\n\n\n\n\n\n\n¿Por qué no los cinco? La razón más básica es la simplicidad; Si conoce el valor de estas cuatro columnas, puede determinar el último valor porque son categorías mutuamente excluyentes. Más técnicamente, la justificación clásica es que varios modelos, incluida la regresión lineal ordinaria, tienen problemas numéricos cuando existen dependencias lineales entre columnas. Si se incluyen las cinco columnas de indicadores de tipo de edificio, se sumarían a la columna de intersección (si hay una). Esto causaría un problema, o quizás un error total, en el álgebra matricial subyacente.\nEl conjunto completo de codificaciones se puede utilizar para algunos modelos. Esto se denomina tradicionalmente codificación one-hot y se puede lograr utilizando el argumento one_hot de step_dummy().\nUna característica útil de step_dummy() es que hay más control sobre cómo se nombran las variables ficticias resultantes. En base R, los nombres de variables ficticias combinan el nombre de la variable con el nivel, lo que da como resultado nombres como NeighborhoodVeenker. Las recetas, de forma predeterminada, usan un guión bajo como separador entre el nombre y el nivel (por ejemplo, Neighborhood_Veenker) y existe una opción para usar formato personalizado para los nombres. La convención de nomenclatura predeterminada en recipes hace que sea más fácil capturar esas nuevas columnas en pasos futuros usando un selector, como starts_with(\"Neighborhood_\").\nLas variables ficticias tradicionales requieren que se conozcan todas las categorías posibles para crear un conjunto completo de características numéricas. Existen otros métodos para realizar esta transformación a un formato numérico. Los métodos de hashing de características solo consideran el valor de la categoría para asignarlo a un grupo predefinido de variables ficticias. Las codificaciones de efecto o probabilidad reemplazan los datos originales con una única columna numérica que mide el efecto de esos datos. Tanto el hash de características como la codificación de efectos pueden manejar sin problemas situaciones en las que se encuentra un nivel de factor novedoso en los datos. El Capítulo 17 explora estos y otros métodos para codificar datos categóricos, más allá de simples variables ficticias o indicadoras.\n\nLos diferentes pasos de una receta se comportan de manera diferente cuando se aplican a variables de los datos. Por ejemplo, step_log() modifica una columna en su lugar sin cambiar el nombre. Otros pasos, como step_dummy(), eliminan la columna de datos original y la reemplazan con una o más columnas con nombres diferentes. El efecto de un paso de receta depende del tipo de transformación de ingeniería de características que se realiza.\n\n\n8.4.2 Términos de interacción\nLos efectos de interacción involucran dos o más predictores. Tal efecto ocurre cuando un predictor tiene un efecto sobre el resultado que depende de uno o más predictores. Por ejemplo, si intenta predecir cuánto tráfico habrá durante su viaje, dos posibles predictores podrían ser la hora específica del día en que viaja y el clima. Sin embargo, la relación entre la cantidad de tráfico y el mal tiempo es diferente según el momento del día. En este caso, podría agregar un término de interacción entre los dos predictores al modelo junto con los dos predictores originales (que se denominan efectos principales). Numéricamente, un término de interacción entre predictores se codifica como su producto. Las interacciones se definen en términos de su efecto sobre el resultado y pueden ser combinaciones de diferentes tipos de datos (por ejemplo, numéricos, categóricos, etc.). Capítulo 7 de Kuhn y Johnson (2020) analiza las interacciones y cómo detectarlas con mayor detalle.\nDespués de explorar el conjunto de entrenamiento de Ames, podríamos encontrar que las pendientes de regresión para el área habitable bruta difieren para diferentes tipos de edificios, como se muestra en Figura 8.2.\n\nggplot(ames_train, aes(x = Gr_Liv_Area, y = 10^Sale_Price)) + \n  geom_point(alpha = .2) + \n  facet_wrap(~ Bldg_Type) + \n  geom_smooth(method = lm, formula = y ~ x, se = FALSE, color = \"lightblue\") + \n  scale_x_log10() + \n  scale_y_log10() + \n  labs(x = \"Área Habitable Bruta\", y = \"Precio de Venta (USD)\")\n\n\n\n\n\nFigura 8.2: Superficie habitable bruta (en unidades log-10) versus precio de venta (también en unidades log-10) para cinco tipos diferentes de edificios\n\n\n\n¿Cómo se especifican las interacciones en una receta? Una fórmula base R requeriría una interacción usando :, por lo que usaríamos:\nSale_Price ~ Neighborhood + log10(Gr_Liv_Area) + Bldg_Type + \n  log10(Gr_Liv_Area):Bldg_Type\n# o\nSale_Price ~ Neighborhood + log10(Gr_Liv_Area) * Bldg_Type \ndonde * expande esas columnas a los efectos principales y al término de interacción. Nuevamente, el método de fórmula hace muchas cosas simultáneamente y comprende que una variable de factor (como Bldg_Type) debe expandirse primero a variables ficticias y que la interacción debe involucrar a todas las columnas binarias resultantes.\nLas recetas son más explícitas y secuenciales y te dan más control. Con la receta actual, step_dummy() ya ha creado variables ficticias. ¿Cómo los combinaríamos para una interacción? El paso adicional se vería así step_interact(~ términos de interacción) donde los términos en el lado derecho de la tilde son las interacciones. Estos pueden incluir selectores, por lo que sería apropiado utilizar:\n\nsimple_ames &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type,\n         data = ames_train) %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_other(Neighborhood, threshold = 0.01) %&gt;% \n  step_dummy(all_nominal_predictors()) %&gt;% \n  # Gr_Liv_Area está en la escala logarítmica de un paso anterior\n  step_interact( ~ Gr_Liv_Area:starts_with(\"Bldg_Type_\") )\n\nSe pueden especificar interacciones adicionales en esta fórmula separándolas por +. También tenga en cuenta que la receta sólo utilizará interacciones entre diferentes variables; si la fórmula usa var_1:var_1, este término se ignorará.\nSupongamos que, en una receta, todavía no hemos creado variables ficticias para los tipos de edificios. Sería inapropiado incluir una columna de factores en este paso, como por ejemplo:\n step_interact( ~ Gr_Liv_Area:Bldg_Type )\nEsto le dice al código subyacente (base R) utilizado por step_interact() para crear variables ficticias y luego formar las interacciones. De hecho, si esto ocurre, una advertencia indica que esto podría generar resultados inesperados.\n\nEste comportamiento le brinda más control, pero es diferente de la fórmula del modelo estándar de R.\n\nAl igual que con el nombre de variables ficticias, recipes proporciona nombres más coherentes para los términos de interacción. En este caso, la interacción se denomina Gr_Liv_Area_x_Bldg_Type_Duplex en lugar de Gr_Liv_Area:Bldg_TypeDuplex (que no es un nombre de columna válido para un marco de datos).\n\nRecuerda que el orden importa. La superficie habitable bruta se transforma logarítmicamente antes del término de interacción. Las interacciones posteriores con esta variable también utilizarán la escala logarítmica.\n\n\n8.4.3 Funciones splines\nCuando un predictor tiene una relación no lineal con el resultado, algunos tipos de modelos predictivos pueden aproximarse adaptativamente a esta relación durante el entrenamiento. Sin embargo, lo más simple suele ser mejor y no es raro intentar utilizar un modelo simple, como un ajuste lineal, y agregar características no lineales específicas para los predictores que puedan necesitarlas, como la longitud y la latitud para los datos de vivienda de Ames. Un método común para hacer esto es usar funciones spline para representar los datos. Los splines reemplazan el predictor numérico existente con un conjunto de columnas que permiten que un modelo emule una relación flexible y no lineal. A medida que se agregan más términos spline a los datos, aumenta la capacidad de representar la relación de forma no lineal. Desafortunadamente, también puede aumentar la probabilidad de detectar tendencias de datos que ocurren por casualidad (es decir, sobreajuste).\nSi alguna vez usó geom_smooth() dentro de un ggplot, probablemente haya usado una representación spline de los datos. Por ejemplo, cada panel en Figura 8.3 utiliza un número diferente de splines suaves para el predictor de latitud:\n\nlibrary(patchwork)\nlibrary(splines)\n\nplot_smoother &lt;- function(deg_free) {\n  ggplot(ames_train, aes(x = Latitude, y = 10^Sale_Price)) + \n    geom_point(alpha = .2) + \n    scale_y_log10() +\n    geom_smooth(\n      method = lm,\n      formula = y ~ ns(x, df = deg_free),\n      color = \"lightblue\",\n      se = FALSE\n    ) +\n    labs(title = paste(deg_free, \"Términos Spline\"),\n         y = \"Precio de Venta (USD)\")\n}\n\n( plot_smoother(2) + plot_smoother(5) ) / ( plot_smoother(20) + plot_smoother(100) )\n\n\n\n\n\nFigura 8.3: Precio de venta versus latitud, con líneas de tendencia que utilizan splines naturales con diferentes grados de libertad\n\n\n\nLa función ns() en el paquete splines genera columnas de características usando funciones llamadas splines naturales.\nAlgunos paneles en Figura 8.3 claramente no encajan bien; dos términos no se ajustan bien a los datos, mientras que 100 términos se ajustan demasiado. Los paneles con veinticinco términos parecen ajustes razonablemente suaves que captan los patrones principales de los datos. Esto indica que la cantidad adecuada de “no linealidad” es importante. El número de términos spline podría entonces considerarse un parámetro de ajuste para este modelo. Estos tipos de parámetros se exploran en el Capítulo 12.\nEn recipes, varios pasos pueden crear este tipo de términos. Para agregar una representación spline natural para este predictor:\n\nrecipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + Latitude,\n         data = ames_train) %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_other(Neighborhood, threshold = 0.01) %&gt;% \n  step_dummy(all_nominal_predictors()) %&gt;% \n  step_interact( ~ Gr_Liv_Area:starts_with(\"Bldg_Type_\") ) %&gt;% \n  step_ns(Latitude, deg_free = 20)\n\nEl usuario necesitaría determinar si tanto la vecindad como la latitud deberían estar en el modelo, ya que ambos representan los mismos datos subyacentes de diferentes maneras.\n\n8.4.4 Extracción de características\nOtro método común para representar múltiples características a la vez se llama extracción de características. La mayoría de estas técnicas crean nuevas características a partir de los predictores que capturan la información en un conjunto más amplio en su conjunto. Por ejemplo, el análisis de componentes principales (PCA) intenta extraer la mayor cantidad posible de información original en el conjunto de predictores utilizando un número menor de características. PCA es un método de extracción lineal, lo que significa que cada característica nueva es una combinación lineal de los predictores originales. Un aspecto interesante de PCA es que cada una de las nuevas características, llamadas componentes principales o puntuaciones de PCA, no están correlacionadas entre sí. Debido a esto, PCA puede resultar muy eficaz para reducir la correlación entre predictores. Tenga en cuenta que PCA sólo conoce los predictores; Es posible que las nuevas funciones de PCA no estén asociadas con el resultado.\nEn los datos de Ames, varios predictores miden el tamaño de la propiedad, como el tamaño total del sótano (Total_Bsmt_SF), el tamaño del primer piso (First_Flr_SF), la superficie habitable bruta (Gr_Liv_Area), etc. PCA podría ser una opción para representar estas variables potencialmente redundantes como un conjunto de características más pequeño. Además del área habitable bruta, estos predictores tienen el sufijo “SF” en sus nombres (para pies cuadrados), por lo que un paso de receta para PCA podría verse así:\n  # Utilice una expresión regular para capturar predictores del tamaño de la casa:\n  step_pca(matches(\"(SF$)|(Gr_Liv)\"))\nTenga en cuenta que todas estas columnas se miden en pies cuadrados. PCA supone que todos los predictores están en la misma escala. Eso es cierto en este caso, pero a menudo este paso puede ir precedido de step_normalize(), que centrará y escalará cada columna.\nExisten pasos de recetas para otros métodos de extracción, como: análisis de componentes independientes (ICA), factorización matricial no negativa (NNMF), escalamiento multidimensional (MDS), aproximación y proyección de variedades uniformes (UMAP) y otros.\n\n8.4.5 Pasos de muestreo de filas\nLos pasos de una receta también pueden afectar las filas de un conjunto de datos. Por ejemplo, las técnicas de submuestreo para desequilibrios de clases cambian las proporciones de clases en los datos que se proporcionan al modelo; estas técnicas a menudo no mejoran el rendimiento general, pero pueden generar distribuciones de mejor comportamiento de las probabilidades de clase predichas. Estos son enfoques que puede probar al submuestrear sus datos con desequilibrio de clases:\n\nReducción de resolución los datos mantienen la clase minoritaria y toman una muestra aleatoria de la clase mayoritaria para que las frecuencias de las clases estén equilibradas.\nUpsampling replica muestras de la clase minoritaria para equilibrar las clases. Algunas técnicas hacen esto sintetizando nuevas muestras que se asemejan a los datos de la clase minoritaria, mientras que otros métodos simplemente agregan las mismas muestras minoritarias repetidamente.\nLos métodos híbridos hacen una combinación de ambos.\n\nEl paquete themis tiene pasos de receta que se pueden usar para abordar el desequilibrio de clases mediante submuestreo. Para una reducción de resolución simple, usaríamos:\n  step_downsample(outcome_column_name)\n\nSólo el conjunto de entrenamiento debería verse afectado por estas técnicas. El conjunto de prueba u otras muestras reservadas deben dejarse como están cuando se procesan utilizando la receta. Por esta razón, todos los pasos de submuestreo tienen por defecto el argumento “skip” para que tenga un valor de “TRUE” (Sección 8.5).\n\nOtras funciones de pasos también están basadas en filas: step_filter(), step_sample(), step_slice() y step_arrange(). En casi todos los usos de estos pasos, el argumento skip debe establecerse en TRUE.\n\n8.4.6 Transformaciones generales\nReflejando la operación original dplyr, step_mutate() se puede utilizar para realizar una variedad de operaciones básicas con los datos. Se utiliza mejor para transformaciones sencillas como calcular una proporción de dos variables, como Bedroom_AbvGr / Full_Bath, la proporción entre dormitorios y baños para los datos de vivienda de Ames.\n\nAl utilizar este paso flexible, tenga especial cuidado para evitar la fuga de datos en el preprocesamiento. Considere, por ejemplo, la transformación x = w &gt; mean(w). Cuando se aplica a datos nuevos o datos de prueba, esta transformación usaría la media de “w” de los datos nuevos, no la media de “w” de los datos de entrenamiento.\n\n\n8.4.7 Procesamiento natural del lenguaje\nLas recetas también pueden manejar datos que no están en la estructura tradicional donde las columnas son características. Por ejemplo, el paquete textrecipes puede aplicar métodos de procesamiento de lenguaje natural a los datos. La columna de entrada suele ser una cadena de texto y se pueden utilizar diferentes pasos para tokenizar los datos (por ejemplo, dividir el texto en palabras separadas), filtrar tokens y crear nuevas características apropiadas para el modelado."
  },
  {
    "objectID": "08-feature-engineering.html#sec-skip-equals-true",
    "href": "08-feature-engineering.html#sec-skip-equals-true",
    "title": "8  Ingeniería de Características con recipes",
    "section": "\n8.5 Saltarse pasos para obtener nuevos datos",
    "text": "8.5 Saltarse pasos para obtener nuevos datos\nLos datos del precio de venta ya están transformados logarítmicamente en el marco de datos “ames”. ¿Por qué no utilizar?\n step_log(Sale_Price, base = 10)\nEsto provocará un fallo cuando la receta se aplique a propiedades nuevas con un precio de venta desconocido. Dado que lo que intentamos predecir es el precio, probablemente no habrá una columna en los datos para esta variable. De hecho, para evitar la fuga de información, muchos paquetes de tidymodels aíslan los datos que se utilizan al realizar predicciones. Esto significa que el conjunto de entrenamiento y las columnas de resultados no están disponibles para su uso en el momento de la predicción.\n\nPara transformaciones simples de la(s) columna(s) de resultados, sugerimos encarecidamente que esas operaciones se realicen fuera de la receta.\n\nSin embargo, hay otras circunstancias en las que esta no es una solución adecuada. Por ejemplo, en modelos de clasificación en los que existe un desequilibrio de clases grave, es común realizar un submuestreo de los datos que se proporcionan a la función de modelado. Por ejemplo, supongamos que hubiera dos clases y una tasa de eventos del 10 %. Un enfoque simple, aunque controvertido, sería reducir la muestra de los datos para que el modelo reciba todos los eventos y un 10% aleatorio de las muestras sin eventos.\nEl problema es que no se debe aplicar el mismo proceso de submuestreo a los datos que se predicen. Como resultado, cuando utilizamos una receta, necesitamos un mecanismo para garantizar que algunas operaciones se apliquen solo a los datos proporcionados al modelo. Cada función de paso tiene una opción llamada skip que, cuando se establece en TRUE, será ignorada por la función predict(). De esta manera, puede aislar los pasos que afectan los datos del modelado sin causar errores cuando se aplican a nuevas muestras. Sin embargo, todos los pasos se aplican cuando se usa fit().\nAl momento de escribir este artículo, las funciones de paso en los paquetes recipes y themis que solo se aplican a los datos de entrenamiento son: step_adasyn(), step_bsmote(), step_downsample(), step_filter(), step_naomit(), step_nearmiss(), step_rose(), step_sample(), step_slice(), step_smote(), step_smotenc(), step_tomek(), and step_upsample()."
  },
  {
    "objectID": "08-feature-engineering.html#sec-recipes-summary",
    "href": "08-feature-engineering.html#sec-recipes-summary",
    "title": "8  Ingeniería de Características con recipes",
    "section": "\n8.8 Resumen del capítulo",
    "text": "8.8 Resumen del capítulo\nEn este capítulo, aprendió a usar recipes para ingeniería de funciones flexible y preprocesamiento de datos, desde la creación de variables ficticias hasta el manejo del desequilibrio de clases y más. La ingeniería de características es una parte importante del proceso de modelado donde puede ocurrir fácilmente una fuga de información y se deben adoptar buenas prácticas. Entre el paquete recipes y otros paquetes que amplían recetas, hay más de 100 pasos disponibles. Todos los pasos posibles de la receta se enumeran en tidymodels.org/find. El marco recipes proporciona un rico entorno de manipulación de datos para preprocesar y transformar datos antes del modelado. Además, tidymodels.org/learn/develop/recipes/ muestra cómo se pueden crear pasos personalizados.\nNuestro trabajo aquí ha utilizado recetas únicamente dentro de un objeto de flujo de trabajo. Para el modelado, ese es el uso recomendado porque la ingeniería de características debe estimarse junto con un modelo. Sin embargo, para la visualización y otras actividades, un flujo de trabajo puede no ser apropiado; Es posible que se requieran funciones más específicas de recetas. El Capítulo 16 analiza las API de nivel inferior para adaptar, usar y solucionar problemas de recetas.\nEl código que usaremos en capítulos posteriores es:\n\nlibrary(tidymodels)\ndata(ames)\names &lt;- mutate(ames, Sale_Price = log10(Sale_Price))\n\nset.seed(502)\names_split &lt;- initial_split(ames, prop = 0.80, strata = Sale_Price)\names_train &lt;- training(ames_split)\names_test  &lt;-  testing(ames_split)\n\names_rec &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n           Latitude + Longitude, data = ames_train) %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_other(Neighborhood, threshold = 0.01) %&gt;% \n  step_dummy(all_nominal_predictors()) %&gt;% \n  step_interact( ~ Gr_Liv_Area:starts_with(\"Bldg_Type_\") ) %&gt;% \n  step_ns(Latitude, Longitude, deg_free = 20)\n  \nlm_model &lt;- linear_reg() %&gt;% set_engine(\"lm\")\n\nlm_wflow &lt;- \n  workflow() %&gt;% \n  add_model(lm_model) %&gt;% \n  add_recipe(ames_rec)\n\nlm_fit &lt;- fit(lm_wflow, ames_train)\n\n\n\n\n\nKuhn, M, y K Johnson. 2020. Feature engineering and selection: A practical approach for predictive models. CRC Press."
  },
  {
    "objectID": "07-the-model-workflow.html#sec-begin-model-end",
    "href": "07-the-model-workflow.html#sec-begin-model-end",
    "title": "7  Un Flujo de Modelado",
    "section": "\n7.1 ¿Dónde Comienza y Termina el Modelo?",
    "text": "7.1 ¿Dónde Comienza y Termina el Modelo?\nHasta ahora, cuando hemos utilizado el término “el modelo”, nos referimos a una ecuación estructural que relaciona algunos predictores con uno o más resultados. Consideremos nuevamente la regresión lineal como ejemplo. Los datos de resultado se indican como \\(y_i\\), donde hay \\(i = 1 \\ldots n\\) muestras en el conjunto de entrenamiento. Supongamos que hay \\(p\\) predictores \\(x_{i1}, \\ldots, x_{ip}\\) que se utilizan en el modelo. La regresión lineal produce una ecuación modelo de\n\\[ \\hat{y}_i = \\hat{\\beta}_0 + \\hat{\\beta}_1x_{i1} + \\ldots + \\hat{\\beta}_px_{ip} \\]\nSi bien este es un modelo lineal, es lineal sólo en los parámetros. Los predictores podrían ser términos no lineales (como el \\(\\log(x_i)\\)).\n\nLa forma convencional de pensar sobre el proceso de modelado es que sólo incluye el ajuste del modelo.\n\nPara algunos conjuntos de datos sencillos, ajustar el modelo en sí puede ser todo el proceso. Sin embargo, a menudo se presentan una variedad de opciones y pasos adicionales antes de que el modelo se ajuste:\n\nSi bien nuestro modelo de ejemplo tiene predictores \\(p\\), es común comenzar con más predictores candidatos \\(p\\). Mediante un análisis de datos exploratorio o utilizando el conocimiento del dominio, algunos de los predictores pueden excluirse del análisis. En otros casos, se puede utilizar un algoritmo de selección de características para realizar una elección basada en datos para el conjunto de predictores mínimo para el modelo.\nHay ocasiones en las que falta el valor de un predictor importante. En lugar de eliminar esta muestra del conjunto de datos, el valor faltante podría imputarse utilizando otros valores de los datos. Por ejemplo, si faltara \\(x_1\\) pero estuviera correlacionado con los predictores \\(x_2\\) y \\(x_3\\), un método de imputación podría estimar la observación faltante de \\(x_1\\) a partir de los valores de \\(x_2\\) y \\(x_3\\).\nPuede resultar beneficioso transformar la escala de un predictor. Si no hay información a priori sobre cuál debería ser la nueva escala, podemos estimar la escala adecuada utilizando una técnica de transformación estadística, los datos existentes y algún criterio de optimización. Otras transformaciones, como PCA, toman grupos de predictores y los transforman en nuevas características que se utilizan como predictores.\n\nSi bien estos ejemplos están relacionados con pasos que ocurren antes de que el modelo se ajuste, también puede haber operaciones que ocurren después de que se crea el modelo. Cuando se crea un modelo de clasificación donde el resultado es binario (por ejemplo, “evento” y “no evento”), se acostumbra utilizar un límite de probabilidad del 50% para crear una predicción de clase discreta, también conocida como predicción dura. Por ejemplo, un modelo de clasificación podría estimar que la probabilidad de un evento era del 62%. Usando el valor predeterminado típico, la predicción difícil sería “evento”. Sin embargo, es posible que el modelo deba centrarse más en reducir los resultados falsos positivos (es decir, donde los verdaderos no eventos se clasifican como eventos). Una forma de hacerlo es elevar el límite del 50% a un valor mayor. Esto aumenta el nivel de evidencia requerido para llamar evento a una nueva muestra. Si bien esto reduce la tasa de verdaderos positivos (lo cual es malo), puede tener un efecto más dramático en la reducción de falsos positivos. La elección del valor de corte debe optimizarse utilizando datos. Este es un ejemplo de un paso de posprocesamiento que tiene un efecto significativo en el funcionamiento del modelo, aunque no esté incluido en el paso de ajuste del modelo.\nEs importante centrarse en el proceso de modelado más amplio, en lugar de ajustar únicamente el modelo específico utilizado para estimar los parámetros. Este proceso más amplio incluye cualquier paso de preprocesamiento, el ajuste del modelo en sí mismo, así como posibles actividades de posprocesamiento. En este libro, nos referiremos a este concepto más completo como flujo de modelado y resaltaremos cómo manejar todos sus componentes para producir una ecuación de modelo final.\n\nEn otro software, como Python o Spark, colecciones similares de pasos se denominan pipelines. En tidymodels, el término “pipeline” ya connota una secuencia de operaciones encadenadas con un operador de pipe (como %&gt;% de magrittr o el nativo más nuevo |&gt;). En lugar de utilizar terminología ambigua en este contexto, llamamos a la secuencia de operaciones computacionales relacionadas con el modelado flujos de trabajo.\n\nUnir los componentes analíticos del análisis de datos es importante por otra razón. Los capítulos futuros demostrarán cómo medir con precisión el rendimiento, así como también cómo optimizar los parámetros estructurales (es decir, ajuste del modelo). Para cuantificar correctamente el rendimiento del modelo en el conjunto de entrenamiento, [Capítulo @ sec-resampling] recomienda el uso de métodos de remuestreo. Para hacer esto correctamente, no se debe excluir de la validación ninguna parte del análisis basada en datos. Para ello, el flujo de trabajo debe incluir todos los pasos de estimación importantes.\nA modo de ejemplo, considere la extracción de señales del análisis de componentes principales (PCA). Hablaremos más sobre esto en Sección 8.4 y en el Capítulo 16; PCA es una forma de reemplazar predictores correlacionados con nuevas características artificiales que no están correlacionadas y capturan la mayor parte de la información del conjunto original. Las nuevas características podrían usarse como predictores y la regresión de mínimos cuadrados podría usarse para estimar los parámetros del modelo.\nHay dos formas de pensar sobre el flujo de trabajo del modelo. Figura 7.1 ilustra el método incorrecto: pensar que el paso de preprocesamiento de PCA no forma parte del flujo de trabajo de modelado.\n\n\n\n\nFigura 7.1: Modelo mental incorrecto de dónde ocurre la estimación del modelo en el proceso de análisis de datos\n\n\n\nLa falacia aquí es que, aunque PCA realiza cálculos importantes para producir los componentes, se supone que sus operaciones no tienen incertidumbre asociada con ellos. Los componentes de PCA se tratan como conocidos y, si no se incluyen en el flujo de trabajo del modelo, el efecto de PCA no se podría medir adecuadamente.\nFigura 7.2 muestra un enfoque apropiado.\n\n\n\n\nFigura 7.2: Modelo mental correcto de dónde ocurre la estimación del modelo en el proceso de análisis de datos.\n\n\n\nDe esta forma, el preprocesamiento PCA se considera parte del proceso de modelado."
  },
  {
    "objectID": "07-the-model-workflow.html#how-does-a-workflow-use-the-formula-sec-workflow-encoding",
    "href": "07-the-model-workflow.html#how-does-a-workflow-use-the-formula-sec-workflow-encoding",
    "title": "7  A Model Workflow",
    "section": "\n7.4 How Does a workflow() Use the Formula? {sec-#workflow-encoding}",
    "text": "7.4 How Does a workflow() Use the Formula? {sec-#workflow-encoding}\nRecall from Section 3.2 that the formula method in R has multiple purposes (we will discuss this further in Chapter 8). One of these is to properly encode the original data into an analysis-ready format. This can involve executing inline transformations (e.g., log(x)), creating dummy variable columns, creating interactions or other column expansions, and so on. However, many statistical methods require different types of encodings:\n\nMost packages for tree-based models use the formula interface but do not encode the categorical predictors as dummy variables.\nPackages can use special inline functions that tell the model function how to treat the predictor in the analysis. For example, in survival analysis models, a formula term such as strata(site) would indicate that the column site is a stratification variable. This means it should not be treated as a regular predictor and does not have a corresponding location parameter estimate in the model.\nA few R packages have extended the formula in ways that base R functions cannot parse or execute. In multilevel models (e.g., mixed models or hierarchical Bayesian models), a model term such as (week | subject) indicates that the column week is a random effect that has different slope parameter estimates for each value of the subject column.\n\nA workflow is a general purpose interface. When add_formula() is used, how should the workflow preprocess the data? Since the preprocessing is model dependent, workflows attempts to emulate what the underlying model would do whenever possible. If it is not possible, the formula processing should not do anything to the columns used in the formula. Let’s look at this in more detail.\nTree-based models\nWhen we fit a tree to the data, the parsnip package understands what the modeling function would do. For example, if a random forest model is fit using the ranger or randomForest packages, the workflow knows predictors columns that are factors should be left as is.\nAs a counterexample, a boosted tree created with the xgboost package requires the user to create dummy variables from factor predictors (since xgboost::xgb.train() will not). This requirement is embedded into the model specification object and a workflow using xgboost will create the indicator columns for this engine. Also note that a different engine for boosted trees, C5.0, does not require dummy variables so none are made by the workflow.\nThis determination is made for each model and engine combination.\n\n7.4.1 Special formulas and inline functions\nA number of multilevel models have standardized on a formula specification devised in the lme4 package. For example, to fit a regression model that has random effects for subjects, we would use the following formula:\nlibrary(lme4)\nlmer(distance ~ Sex + (age | Subject), data = Orthodont)\nThe effect of this is that each subject will have an estimated intercept and slope parameter for age.\nThe problem is that standard R methods can’t properly process this formula:\n\nmodel.matrix(distance ~ Sex + (age | Subject), data = Orthodont)\n## Warning in Ops.ordered(age, Subject): '|' is not meaningful for ordered factors\n##      (Intercept) SexFemale age | SubjectTRUE\n## attr(,\"assign\")\n## [1] 0 1 2\n## attr(,\"contrasts\")\n## attr(,\"contrasts\")$Sex\n## [1] \"contr.treatment\"\n## \n## attr(,\"contrasts\")$`age | Subject`\n## [1] \"contr.treatment\"\n\nThe result is a zero row data frame.\n\nThe issue is that the special formula has to be processed by the underlying package code, not the standard model.matrix() approach.\n\nEven if this formula could be used with model.matrix(), this would still present a problem since the formula also specifies the statistical attributes of the model.\nThe solution in workflows is an optional supplementary model formula that can be passed to add_model(). The add_variables() specification provides the bare column names, and then the actual formula given to the model is set within add_model():\n\nlibrary(multilevelmod)\n\nmultilevel_spec &lt;- linear_reg() %&gt;% set_engine(\"lmer\")\n\nmultilevel_workflow &lt;- \n  workflow() %&gt;% \n  # Pass the data along as-is: \n  add_variables(outcome = distance, predictors = c(Sex, age, Subject)) %&gt;% \n  add_model(multilevel_spec, \n            # This formula is given to the model\n            formula = distance ~ Sex + (age | Subject))\n\nmultilevel_fit &lt;- fit(multilevel_workflow, data = Orthodont)\nmultilevel_fit\n## ══ Workflow [trained] ═══════════════════════════════════════════════════════════════\n## Preprocessor: Variables\n## Model: linear_reg()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## Outcomes: distance\n## Predictors: c(Sex, age, Subject)\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## Linear mixed model fit by REML ['lmerMod']\n## Formula: distance ~ Sex + (age | Subject)\n##    Data: data\n## REML criterion at convergence: 471.2\n## Random effects:\n##  Groups   Name        Std.Dev. Corr \n##  Subject  (Intercept) 7.391         \n##           age         0.694    -0.97\n##  Residual             1.310         \n## Number of obs: 108, groups:  Subject, 27\n## Fixed Effects:\n## (Intercept)    SexFemale  \n##       24.52        -2.15\n\nWe can even use the previously mentioned strata() function from the survival package for survival analysis:\n\nlibrary(censored)\n\nparametric_spec &lt;- survival_reg()\n\nparametric_workflow &lt;- \n  workflow() %&gt;% \n  add_variables(outcome = c(fustat, futime), predictors = c(age, rx)) %&gt;% \n  add_model(parametric_spec, \n            formula = Surv(futime, fustat) ~ age + strata(rx))\n\nparametric_fit &lt;- fit(parametric_workflow, data = ovarian)\nparametric_fit\n## ══ Workflow [trained] ═══════════════════════════════════════════════════════════════\n## Preprocessor: Variables\n## Model: survival_reg()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## Outcomes: c(fustat, futime)\n## Predictors: c(age, rx)\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## Call:\n## survival::survreg(formula = Surv(futime, fustat) ~ age + strata(rx), \n##     data = data, model = TRUE)\n## \n## Coefficients:\n## (Intercept)         age \n##     12.8734     -0.1034 \n## \n## Scale:\n##   rx=1   rx=2 \n## 0.7696 0.4704 \n## \n## Loglik(model)= -89.4   Loglik(intercept only)= -97.1\n##  Chisq= 15.36 on 1 degrees of freedom, p= 9e-05 \n## n= 26\n\nNotice how in both of these calls the model-specific formula was used."
  },
  {
    "objectID": "07-the-model-workflow.html#sec-workflow-sets-intro",
    "href": "07-the-model-workflow.html#sec-workflow-sets-intro",
    "title": "7  Un Flujo de Modelado",
    "section": "\n7.5 Crear Múltiples Flujos de Trabajo a la vez",
    "text": "7.5 Crear Múltiples Flujos de Trabajo a la vez\nEn algunas situaciones, los datos requieren numerosos intentos para encontrar un modelo apropiado. Por ejemplo:\n\nPara los modelos predictivos, es aconsejable evaluar una variedad de tipos de modelos diferentes. Esto requiere que el usuario cree múltiples especificaciones de modelo.\nLas pruebas secuenciales de modelos suelen comenzar con un conjunto ampliado de predictores. Este “modelo completo” se compara con una secuencia del mismo modelo que elimina cada predictor por turno. Utilizando métodos básicos de prueba de hipótesis o validación empírica, se puede aislar y evaluar el efecto de cada predictor.\n\nEn estas situaciones, así como en otras, puede resultar tedioso u oneroso crear muchos flujos de trabajo a partir de diferentes conjuntos de preprocesadores y/o especificaciones de modelo. Para solucionar este problema, el paquete workflowset crea combinaciones de componentes de flujo de trabajo. Una lista de preprocesadores (por ejemplo, fórmulas, selectores dplyr u objetos de recetas de ingeniería de características que se analizan en el siguiente capítulo) se puede combinar con una lista de especificaciones de modelo, lo que da como resultado un conjunto de flujos de trabajo.\nComo ejemplo, digamos que queremos centrarnos en las diferentes formas en que se representa la ubicación de la casa en los datos de Ames. Podemos crear un conjunto de fórmulas que capturen estos predictores:\n\nlocation &lt;- list(\n  longitude = Sale_Price ~ Longitude,\n  latitude = Sale_Price ~ Latitude,\n  coords = Sale_Price ~ Longitude + Latitude,\n  neighborhood = Sale_Price ~ Neighborhood\n)\n\nEstas representaciones se pueden cruzar con uno o más modelos usando la función workflow_set(). Simplemente usaremos la especificación del modelo lineal anterior para demostrar:\n\nlibrary(workflowsets)\nlocation_models &lt;- workflow_set(preproc = location, models = list(lm = lm_model))\nlocation_models\n## # A workflow set/tibble: 4 × 4\n##   wflow_id        info             option    result    \n##   &lt;chr&gt;           &lt;list&gt;           &lt;list&gt;    &lt;list&gt;    \n## 1 longitude_lm    &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 2 latitude_lm     &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 3 coords_lm       &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 4 neighborhood_lm &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\nlocation_models$info[[1]]\n## # A tibble: 1 × 4\n##   workflow   preproc model      comment\n##   &lt;list&gt;     &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;  \n## 1 &lt;workflow&gt; formula linear_reg \"\"\nextract_workflow(location_models, id = \"coords_lm\")\n## ══ Workflow ═════════════════════════════════════════════════════════════════════════\n## Preprocessor: Formula\n## Model: linear_reg()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## Sale_Price ~ Longitude + Latitude\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## Linear Regression Model Specification (regression)\n## \n## Computational engine: lm\n\nLos conjuntos de flujos de trabajo están diseñados principalmente para funcionar con remuestreo, lo cual se analiza en el Capítulo 10. Las columnas “opción” y “resultado” deben completarse con tipos específicos de objetos que resultan del remuestreo. Demostraremos esto con más detalle en los Capítulos 11 y 15.\nMientras tanto, creemos ajustes de modelo para cada fórmula y guárdelos en una nueva columna llamada fit. Usaremos las operaciones básicas dplyr y purrr:\n\nlocation_models &lt;-\n   location_models %&gt;%\n   mutate(fit = map(info, ~ fit(.x$workflow[[1]], ames_train)))\nlocation_models\n## # A workflow set/tibble: 4 × 5\n##   wflow_id        info             option    result     fit       \n##   &lt;chr&gt;           &lt;list&gt;           &lt;list&gt;    &lt;list&gt;     &lt;list&gt;    \n## 1 longitude_lm    &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt; &lt;workflow&gt;\n## 2 latitude_lm     &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt; &lt;workflow&gt;\n## 3 coords_lm       &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt; &lt;workflow&gt;\n## 4 neighborhood_lm &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt; &lt;workflow&gt;\nlocation_models$fit[[1]]\n## ══ Workflow [trained] ═══════════════════════════════════════════════════════════════\n## Preprocessor: Formula\n## Model: linear_reg()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## Sale_Price ~ Longitude\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## \n## Call:\n## stats::lm(formula = ..y ~ ., data = data)\n## \n## Coefficients:\n## (Intercept)    Longitude  \n##     -184.40        -2.02\n\nUsamos una función purrr aquí para mapear nuestros modelos, pero existe un enfoque mejor y más fácil para ajustar conjuntos de flujo de trabajo que se presentará en Sección 11.1.\n\nEn general, ¡hay mucho más en los conjuntos de flujos de trabajo! Si bien hemos cubierto los conceptos básicos aquí, los matices y ventajas de los conjuntos de flujo de trabajo no se ilustrarán hasta el Capítulo 15."
  },
  {
    "objectID": "07-the-model-workflow.html#sec-workflows-summary",
    "href": "07-the-model-workflow.html#sec-workflows-summary",
    "title": "7  Un Flujo de Modelado",
    "section": "\n7.7 Resumen del capítulo",
    "text": "7.7 Resumen del capítulo\nEn este capítulo, aprendió que el proceso de modelado abarca más que simplemente estimar los parámetros de un algoritmo que conecta los predictores con un resultado. Este proceso también incluye pasos de preprocesamiento y operaciones realizadas después de que se ajusta un modelo. Introdujimos un concepto llamado flujo de trabajo modelo que puede capturar los componentes importantes del proceso de modelado. También se pueden crear múltiples flujos de trabajo dentro de un conjunto de flujos de trabajo. La función last_fit() es conveniente para ajustar un modelo final al conjunto de entrenamiento y evaluar con el conjunto de prueba.\nPara los datos de Ames, el código relacionado que veremos usado nuevamente es:\n\nlibrary(tidymodels)\ndata(ames)\n\names &lt;- mutate(ames, Sale_Price = log10(Sale_Price))\n\nset.seed(502)\names_split &lt;- initial_split(ames, prop = 0.80, strata = Sale_Price)\names_train &lt;- training(ames_split)\names_test  &lt;-  testing(ames_split)\n\nlm_model &lt;- linear_reg() %&gt;% set_engine(\"lm\")\n\nlm_wflow &lt;- \n  workflow() %&gt;% \n  add_model(lm_model) %&gt;% \n  add_variables(outcome = Sale_Price, predictors = c(Longitude, Latitude))\n\nlm_fit &lt;- fit(lm_wflow, ames_train)"
  },
  {
    "objectID": "10-resampling.html#sec-resampling-resubstition",
    "href": "10-resampling.html#sec-resampling-resubstition",
    "title": "10  Remuestrear para Evaluar el Rendimiento",
    "section": "\n10.1 El Enfoque de la Resustitución",
    "text": "10.1 El Enfoque de la Resustitución\nCuando medimos el rendimiento con los mismos datos que utilizamos para el entrenamiento (a diferencia de datos nuevos o datos de prueba), decimos que hemos resustituido los datos. Utilicemos nuevamente los datos de vivienda de Ames para demostrar estos conceptos. Sección 8.8 resume el estado actual de nuestro análisis de Ames. Incluye un objeto de receta llamado ames_rec, un modelo lineal y un flujo de trabajo que usa esa receta y modelo llamado lm_wflow. Este flujo de trabajo se ajustó al conjunto de entrenamiento, lo que dio como resultado lm_fit.\nPara comparar con este modelo lineal, también podemos ajustar un tipo diferente de modelo. Los random forest son un método de conjunto de árboles que opera creando una gran cantidad de árboles de decisión a partir de versiones ligeramente diferentes del conjunto de entrenamiento (Breiman 2001). Esta colección de árboles conforma el conjunto. Al predecir una nueva muestra, cada miembro del conjunto realiza una predicción por separado. Estos se promedian para crear la predicción conjunta final para el nuevo punto de datos.\nLos modelos de random forest son muy potentes y pueden emular muy fielmente los patrones de datos subyacentes. Si bien este modelo puede requerir un uso intensivo de computación, requiere muy poco mantenimiento; se requiere muy poco preprocesamiento (como se documenta en Apéndice A).\nUsando el mismo conjunto de predictores que el modelo lineal (sin los pasos de preprocesamiento adicionales), podemos ajustar un modelo de random forest al conjunto de entrenamiento a través del motor \"ranger\" (que usa el paquete R ranger para cálculo). Este modelo no requiere procesamiento previo, por lo que se puede utilizar una fórmula simple:\n\nrf_model &lt;- \n  rand_forest(trees = 1000) %&gt;% \n  set_engine(\"ranger\") %&gt;% \n  set_mode(\"regression\")\n\nrf_wflow &lt;- \n  workflow() %&gt;% \n  add_formula(\n    Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n      Latitude + Longitude) %&gt;% \n  add_model(rf_model) \n\nrf_fit &lt;- rf_wflow %&gt;% fit(data = ames_train)\n\n¿Cómo deberíamos comparar los modelos forestales lineales y aleatorios? A modo de demostración, predeciremos que el conjunto de entrenamiento producirá lo que se conoce como métrica aparente o métrica de resustitución. Esta función crea predicciones y formatea los resultados:\n\nestimate_perf &lt;- function(model, dat) {\n  # Captura los nombres de los objetos `model` y `dat`\n  cl &lt;- match.call()\n  obj_name &lt;- as.character(cl$model)\n  data_name &lt;- as.character(cl$dat)\n  data_name &lt;- gsub(\"ames_\", \"\", data_name)\n  \n  # Estima estas metricas\n  reg_metrics &lt;- metric_set(rmse, rsq)\n  \n  model %&gt;%\n    predict(dat) %&gt;%\n    bind_cols(dat %&gt;% select(Sale_Price)) %&gt;%\n    reg_metrics(Sale_Price, .pred) %&gt;%\n    select(-.estimator) %&gt;%\n    mutate(object = obj_name, data = data_name)\n}\n\nSe calculan tanto RMSE como \\(R^2\\). Las estadísticas de resustitución son:\n\nestimate_perf(rf_fit, ames_train)\n## # A tibble: 2 × 4\n##   .metric .estimate object data \n##   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;\n## 1 rmse       0.0366 rf_fit train\n## 2 rsq        0.960  rf_fit train\nestimate_perf(lm_fit, ames_train)\n## # A tibble: 2 × 4\n##   .metric .estimate object data \n##   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;\n## 1 rmse       0.0754 lm_fit train\n## 2 rsq        0.816  lm_fit train\n\nEn base a estos resultados, el random forest es mucho más capaz de predecir los precios de venta; la estimación de RMSE es two, veces mejor que la regresión lineal. Si tuviéramos que elegir entre estos dos modelos para este problema de predicción de precios, probablemente elegiríamos el random fores porque, en la escala logarítmica que estamos usando, su RMSE es aproximadamente la mitad. El siguiente paso aplica el modelo de random forest al conjunto de prueba para la verificación final:\n\nestimate_perf(rf_fit, ames_test)\n## # A tibble: 2 × 4\n##   .metric .estimate object data \n##   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;\n## 1 rmse       0.0704 rf_fit test \n## 2 rsq        0.852  rf_fit test\n\n¡La estimación RMSE del conjunto de prueba, 0.0704, es much worse than the training set valor de 0.0366! ¿Por qué pasó esto?\nMuchos modelos predictivos son capaces de aprender tendencias complejas a partir de los datos. En estadística, estos se conocen comúnmente como modelos de bajo sesgo.\n\nEn este contexto, sesgo es la diferencia entre el patrón o las relaciones verdaderas en los datos y los tipos de patrones que el modelo puede emular. Muchos modelos de aprendizaje automático de caja negra tienen un sesgo bajo, lo que significa que pueden reproducir relaciones complejas. Otros modelos (como la regresión lineal/logística, el análisis discriminante y otros) no son tan adaptables y se consideran modelos de alto sesgo.1\n\nPara un modelo de bajo sesgo, el alto grado de capacidad predictiva a veces puede hacer que el modelo casi memorice los datos del conjunto de entrenamiento. Como ejemplo obvio, considere un modelo de 1 vecino más cercano. Siempre proporcionará predicciones perfectas para el conjunto de entrenamiento, sin importar qué tan bien funcione para otros conjuntos de datos. Los modelos de random forest son similares; Repredecir el conjunto de entrenamiento siempre dará como resultado una estimación artificialmente optimista del rendimiento.\nPara ambos modelos, Tabla 10.1 resume la estimación de RMSE para los conjuntos de entrenamiento y prueba:\n\n\n\n\nTabla 10.1: Estadísticas de rendimiento para conjuntos de entrenamiento y prueba.\n\n\n\n\n\n\n\n\n\nEstimaciones de RMSE\n\n\n\nobject\ntrain\ntest\n\n\n\n\nlm_fit\n0.0754\n0.0736\n\n\nrf_fit\n0.0366\n0.0704\n\n\n\n\n\n\n\n\nObserve que el modelo de regresión lineal es consistente entre el entrenamiento y las pruebas, debido a su complejidad limitada.2\n\nLa principal conclusión de este ejemplo es que repredecir el conjunto de entrenamiento dará como resultado una estimación del rendimiento artificialmente optimista. Es una mala idea para la mayoría de los modelos.\n\nSi el conjunto de prueba no se debe utilizar de inmediato y repredecir el conjunto de entrenamiento es una mala idea, ¿qué se debe hacer? Los métodos de remuestreo, como la validación cruzada o los conjuntos de validación, son la solución."
  },
  {
    "objectID": "10-resampling.html#resampling-methods",
    "href": "10-resampling.html#resampling-methods",
    "title": "10  Resampling for Evaluating Performance",
    "section": "\n10.2 Resampling Methods",
    "text": "10.2 Resampling Methods\nResampling methods are empirical simulation systems that emulate the process of using some data for modeling and different data for evaluation. Most resampling methods are iterative, meaning that this process is repeated multiple times. The diagram in Figure 10.1 illustrates how resampling methods generally operate.\n\n\n\n\nFigure 10.1: Data splitting scheme from the initial data split to resampling\n\n\n\nResampling is conducted only on the training set, as you see in Figure 10.1. The test set is not involved. For each iteration of resampling, the data are partitioned into two subsamples:\n\nThe model is fit with the analysis set.\nThe model is evaluated with the assessment set.\n\nThese two subsamples are somewhat analogous to training and test sets. Our language of analysis and assessment avoids confusion with the initial split of the data. These data sets are mutually exclusive. The partitioning scheme used to create the analysis and assessment sets is usually the defining characteristic of the method.\nSuppose 20 iterations of resampling are conducted. This means that 20 separate models are fit on the analysis sets, and the corresponding assessment sets produce 20 sets of performance statistics. The final estimate of performance for a model is the average of the 20 replicates of the statistics. This average has very good generalization properties and is far better than the resubstitution estimates.\nThe next section defines several commonly used resampling methods and discusses their pros and cons.\n\n10.2.1 Cross-validation\nCross-validation is a well established resampling method. While there are a number of variations, the most common cross-validation method is V-fold cross-validation. The data are randomly partitioned into V sets of roughly equal size (called the folds). For illustration, V = 3 is shown in Figure 10.2 for a data set of 30 training set points with random fold allocations. The number inside the symbols is the sample number.\n\n\n\n\nFigure 10.2: V-fold cross-validation randomly assigns data to folds\n\n\n\nThe color of the symbols in Figure 10.2 represents their randomly assigned folds. Stratified sampling is also an option for assigning folds (previously discussed in Section 5.1).\nFor three-fold cross-validation, the three iterations of resampling are illustrated in Figure 10.3. For each iteration, one fold is held out for assessment statistics and the remaining folds are substrate for the model. This process continues for each fold so that three models produce three sets of performance statistics.\n\n\n\n\nFigure 10.3: V-fold cross-validation data usage\n\n\n\nWhen V = 3, the analysis sets are 2/3 of the training set and each assessment set is a distinct 1/3. The final resampling estimate of performance averages each of the V replicates.\nUsing V = 3 is a good choice to illustrate cross-validation, but it is a poor choice in practice because it is too low to generate reliable estimates. In practice, values of V are most often 5 or 10; we generally prefer 10-fold cross-validation as a default because it is large enough for good results in most situations.\n\nWhat are the effects of changing V? Larger values result in resampling estimates with small bias but substantial variance. Smaller values of V have large bias but low variance. We prefer 10-fold since noise is reduced by replication, but bias is not.3\n\nThe primary input is the training set data frame as well as the number of folds (defaulting to 10):\n\nset.seed(1001)\names_folds &lt;- vfold_cv(ames_train, v = 10)\names_folds\n## #  10-fold cross-validation \n## # A tibble: 10 × 2\n##   splits             id    \n##   &lt;list&gt;             &lt;chr&gt; \n## 1 &lt;split [2107/235]&gt; Fold01\n## 2 &lt;split [2107/235]&gt; Fold02\n## 3 &lt;split [2108/234]&gt; Fold03\n## 4 &lt;split [2108/234]&gt; Fold04\n## 5 &lt;split [2108/234]&gt; Fold05\n## 6 &lt;split [2108/234]&gt; Fold06\n## # ℹ 4 more rows\n\nThe column named splits contains the information on how to split the data (similar to the object used to create the initial training/test partition). While each row of splits has an embedded copy of the entire training set, R is smart enough not to make copies of the data in memory.4 The print method inside of the tibble shows the frequency of each: [2107/235] indicates that about two thousand samples are in the analysis set and 235 are in that particular assessment set.\nThese objects also always contain a character column called id that labels the partition.5\nTo manually retrieve the partitioned data, the analysis() and assessment() functions return the corresponding data frames:\n\n# For the first fold:\names_folds$splits[[1]] %&gt;% analysis() %&gt;% dim()\n## [1] 2107   74\n\nThe tidymodels packages, such as tune, contain high-level user interfaces so that functions like analysis() are not generally needed for day-to-day work. Section 10.3 demonstrates a function to fit a model over these resamples.\nThere are a variety of cross-validation variations; we’ll go through the most important ones.\nRepeated cross-validation\nThe most important variation on cross-validation is repeated V-fold cross-validation. Depending on data size or other characteristics, the resampling estimate produced by V-fold cross-validation may be excessively noisy.6 As with many statistical problems, one way to reduce noise is to gather more data. For cross-validation, this means averaging more than V statistics.\nTo create R repeats of V-fold cross-validation, the same fold generation process is done R times to generate R collections of V partitions. Now, instead of averaging V statistics, \\(V \\times R\\) statistics produce the final resampling estimate. Due to the Central Limit Theorem, the summary statistics from each model tend toward a normal distribution, as long as we have a lot of data relative to \\(V \\times R\\).\nConsider the Ames data. On average, 10-fold cross-validation uses assessment sets that contain roughly 234 properties. If RMSE is the statistic of choice, we can denote that estimate’s standard deviation as \\(\\sigma\\). With simple 10-fold cross-validation, the standard error of the mean RMSE is \\(\\sigma/\\sqrt{10}\\). If this is too noisy, repeats reduce the standard error to \\(\\sigma/\\sqrt{10R}\\). For 10-fold cross-validation with \\(R\\) replicates, the plot in Figure 10.4 shows how quickly the standard error7 decreases with replicates.\n\n\n\n\nFigure 10.4: Relationship between the relative variance in performance estimates versus the number of cross-validation repeats\n\n\n\nLarger numbers of replicates tend to have less impact on the standard error. However, if the baseline value of \\(\\sigma\\) is impractically large, the diminishing returns on replication may still be worth the extra computational costs.\nTo create repeats, invoke vfold_cv() with an additional argument repeats:\n\nvfold_cv(ames_train, v = 10, repeats = 5)\n## #  10-fold cross-validation repeated 5 times \n## # A tibble: 50 × 3\n##   splits             id      id2   \n##   &lt;list&gt;             &lt;chr&gt;   &lt;chr&gt; \n## 1 &lt;split [2107/235]&gt; Repeat1 Fold01\n## 2 &lt;split [2107/235]&gt; Repeat1 Fold02\n## 3 &lt;split [2108/234]&gt; Repeat1 Fold03\n## 4 &lt;split [2108/234]&gt; Repeat1 Fold04\n## 5 &lt;split [2108/234]&gt; Repeat1 Fold05\n## 6 &lt;split [2108/234]&gt; Repeat1 Fold06\n## # ℹ 44 more rows\n\nLeave-one-out cross-validation\nOne variation of cross-validation is leave-one-out (LOO) cross-validation. If there are \\(n\\) training set samples, \\(n\\) models are fit using \\(n-1\\) rows of the training set. Each model predicts the single excluded data point. At the end of resampling, the \\(n\\) predictions are pooled to produce a single performance statistic.\nLeave-one-out methods are deficient compared to almost any other method. For anything but pathologically small samples, LOO is computationally excessive, and it may not have good statistical properties. Although the rsample package contains a loo_cv() function, these objects are not generally integrated into the broader tidymodels frameworks.\nMonte Carlo cross-validation\nAnother variant of V-fold cross-validation is Monte Carlo cross-validation (MCCV, Xu and Liang (2001)). Like V-fold cross-validation, it allocates a fixed proportion of data to the assessment sets. The difference between MCCV and regular cross-validation is that, for MCCV, this proportion of the data is randomly selected each time. This results in assessment sets that are not mutually exclusive. To create these resampling objects:\n\nmc_cv(ames_train, prop = 9/10, times = 20)\n## # Monte Carlo cross-validation (0.9/0.1) with 20 resamples  \n## # A tibble: 20 × 2\n##   splits             id        \n##   &lt;list&gt;             &lt;chr&gt;     \n## 1 &lt;split [2107/235]&gt; Resample01\n## 2 &lt;split [2107/235]&gt; Resample02\n## 3 &lt;split [2107/235]&gt; Resample03\n## 4 &lt;split [2107/235]&gt; Resample04\n## 5 &lt;split [2107/235]&gt; Resample05\n## 6 &lt;split [2107/235]&gt; Resample06\n## # ℹ 14 more rows\n\n\n10.2.2 Validation sets\nIn Section 5.2, we briefly discussed the use of a validation set, a single partition that is set aside to estimate performance separate from the test set. When using a validation set, the initial available data set is split into a training set, a validation set, and a test set (see Figure 10.5).\n\n\n\n\nFigure 10.5: A three-way initial split into training, testing, and validation sets\n\n\n\nValidation sets are often used when the original pool of data is very large. In this case, a single large partition may be adequate to characterize model performance without having to do multiple resampling iterations.\nWith the rsample package, a validation set is like any other resampling object; this type is different only in that it has a single iteration.8 Figure 10.6 shows this scheme.\n\n\n\n\nFigure 10.6: A two-way initial split into training and testing with an additional validation set split on the training set\n\n\n\nTo build on the code from Section 5.2, the function validation_set() can take the results of initial_validation_split() and convert it to an rset object that is similar to the ones produced by functions such as vfold_cv():\n\n# Previously:\n\nset.seed(52)\n# To put 60% into training, 20% in validation, and 20% in testing:\names_val_split &lt;- initial_validation_split(ames, prop = c(0.6, 0.2))\names_val_split\n## &lt;Training/Validation/Testing/Total&gt;\n## &lt;1758/586/586/2930&gt;\n\n# Object used for resampling: \nval_set &lt;- validation_set(ames_val_split)\nval_set\n## # A tibble: 1 × 2\n##   splits             id        \n##   &lt;list&gt;             &lt;chr&gt;     \n## 1 &lt;split [1758/586]&gt; validation\n\nAs you’ll see in Section 10.3, the fit_resamples() function will be used to compute correct estimates of performance using resampling. The val_set object can be used in in this and other functions even though it is a single “resample” of the data.\n\n10.2.3 Bootstrapping\nBootstrap resampling was originally invented as a method for approximating the sampling distribution of statistics whose theoretical properties are intractable (Davison and Hinkley 1997). Using it to estimate model performance is a secondary application of the method.\nA bootstrap sample of the training set is a sample that is the same size as the training set but is drawn with replacement. This means that some training set data points are selected multiple times for the analysis set. Each data point has a 63.2% chance of inclusion in the training set at least once. The assessment set contains all of the training set samples that were not selected for the analysis set (on average, with 36.8% of the training set). When bootstrapping, the assessment set is often called the out-of-bag sample.\nFor a training set of 30 samples, a schematic of three bootstrap samples is shown in Figure 10.7.\n\n\n\n\nFigure 10.7: Bootstrapping data usage\n\n\n\nNote that the sizes of the assessment sets vary.\nUsing the rsample package, we can create such bootstrap resamples:\n\nbootstraps(ames_train, times = 5)\n## # Bootstrap sampling \n## # A tibble: 5 × 2\n##   splits             id        \n##   &lt;list&gt;             &lt;chr&gt;     \n## 1 &lt;split [2342/867]&gt; Bootstrap1\n## 2 &lt;split [2342/869]&gt; Bootstrap2\n## 3 &lt;split [2342/859]&gt; Bootstrap3\n## 4 &lt;split [2342/858]&gt; Bootstrap4\n## 5 &lt;split [2342/873]&gt; Bootstrap5\n\nBootstrap samples produce performance estimates that have very low variance (unlike cross-validation) but have significant pessimistic bias. This means that, if the true accuracy of a model is 90%, the bootstrap would tend to estimate the value to be less than 90%. The amount of bias cannot be empirically determined with sufficient accuracy. Additionally, the amount of bias changes over the scale of the performance metric. For example, the bias is likely to be different when the accuracy is 90% versus when it is 70%.\nThe bootstrap is also used inside of many models. For example, the random forest model mentioned earlier contained 1,000 individual decision trees. Each tree was the product of a different bootstrap sample of the training set.\n\n10.2.4 Rolling forecasting origin resampling\nWhen the data have a strong time component, a resampling method should support modeling to estimate seasonal and other temporal trends within the data. A technique that randomly samples values from the training set can disrupt the model’s ability to estimate these patterns.\nRolling forecast origin resampling (Hyndman and Athanasopoulos 2018) provides a method that emulates how time series data is often partitioned in practice, estimating the model with historical data and evaluating it with the most recent data. For this type of resampling, the size of the initial analysis and assessment sets are specified. The first iteration of resampling uses these sizes, starting from the beginning of the series. The second iteration uses the same data sizes but shifts over by a set number of samples.\nTo illustrate, a training set of fifteen samples was resampled with an analysis size of eight samples and an assessment set size of three. The second iteration discards the first training set sample and both data sets shift forward by one. This configuration results in five resamples, as shown in Figure 10.8.\n\n\n\n\nFigure 10.8: Data usage for rolling forecasting origin resampling\n\n\n\nHere are two different configurations of this method:\n\nThe analysis set can cumulatively grow (as opposed to remaining the same size). After the first initial analysis set, new samples can accrue without discarding the earlier data.\nThe resamples need not increment by one. For example, for large data sets, the incremental block could be a week or month instead of a day.\n\nFor a year’s worth of data, suppose that six sets of 30-day blocks define the analysis set. For assessment sets of 30 days with a 29-day skip, we can use the rsample package to specify:\n\ntime_slices &lt;- \n  tibble(x = 1:365) %&gt;% \n  rolling_origin(initial = 6 * 30, assess = 30, skip = 29, cumulative = FALSE)\n\ndata_range &lt;- function(x) {\n  summarize(x, first = min(x), last = max(x))\n}\n\nmap_dfr(time_slices$splits, ~   analysis(.x) %&gt;% data_range())\n## # A tibble: 6 × 2\n##   first  last\n##   &lt;int&gt; &lt;int&gt;\n## 1     1   180\n## 2    31   210\n## 3    61   240\n## 4    91   270\n## 5   121   300\n## 6   151   330\nmap_dfr(time_slices$splits, ~ assessment(.x) %&gt;% data_range())\n## # A tibble: 6 × 2\n##   first  last\n##   &lt;int&gt; &lt;int&gt;\n## 1   181   210\n## 2   211   240\n## 3   241   270\n## 4   271   300\n## 5   301   330\n## 6   331   360"
  },
  {
    "objectID": "10-resampling.html#sec-resampling-performance",
    "href": "10-resampling.html#sec-resampling-performance",
    "title": "10  Remuestrear para Evaluar el Rendimiento",
    "section": "\n10.3 Estimación del rendimiento",
    "text": "10.3 Estimación del rendimiento\nCualquiera de los métodos de remuestreo discutidos en este capítulo se puede utilizar para evaluar el proceso de modelado (incluido el preprocesamiento, el ajuste del modelo, etc.). Estos métodos son eficaces porque se utilizan diferentes grupos de datos para entrenar el modelo y evaluarlo. Para reiterar, el proceso para utilizar el remuestreo es:\n\nDurante el remuestreo, el conjunto de análisis se utiliza para preprocesar los datos, aplicar el preprocesamiento a sí mismo y utilizar estos datos procesados para ajustarse al modelo.\nLas estadísticas de preprocesamiento producidas por el conjunto de análisis se aplican al conjunto de evaluación. Las predicciones del conjunto de evaluación estiman el rendimiento con datos nuevos.\n\nEsta secuencia se repite para cada nuevo muestreo. Si hay B remuestreos, hay B réplicas de cada una de las métricas de rendimiento. La estimación final del remuestreo es el promedio de estas estadísticas B. Si B = 1, como ocurre con un conjunto de validación, las estadísticas individuales representan el rendimiento general.\nReconsideremos el modelo de random forest anterior contenido en el objeto rf_wflow. La función fit_resamples() es análoga a fit(), pero en lugar de tener un argumento data, fit_resamples() tiene resamples, que espera un objeto rset como los que se muestran en este capítulo Las posibles interfaces para la función son:\n\nmodel_spec %&gt;% fit_resamples(formula,  resamples, ...)\nmodel_spec %&gt;% fit_resamples(recipe,   resamples, ...)\nworkflow   %&gt;% fit_resamples(          resamples, ...)\n\nHay una serie de otros argumentos opcionales, como por ejemplo:\n\nmetrics: Un conjunto de métricas de estadísticas de rendimiento para calcular. De forma predeterminada, los modelos de regresión utilizan RMSE y \\(R^2\\), mientras que los modelos de clasificación calculan el área bajo la curva ROC y la precisión general. Tenga en cuenta que esta elección también define qué predicciones se producen durante la evaluación del modelo. Para la clasificación, si solo se solicita precisión, no se generan estimaciones de probabilidad de clase para el conjunto de evaluación (ya que no son necesarias).\ncontrol: Una lista creada por control_resamples() con varias opciones.\n\nLos argumentos de control incluyen:\n\nverbose: Una lógica para imprimir el registro.\nextract: Una función para retener objetos de cada iteración del modelo (que se analiza más adelante en este capítulo).\nsave_pred: Una lógica para guardar las predicciones del conjunto de evaluación.\n\nPara nuestro ejemplo, guardemos las predicciones para visualizar el ajuste y los residuos del modelo:\n\nkeep_pred &lt;- control_resamples(save_pred = TRUE, save_workflow = TRUE)\n\nset.seed(1003)\nrf_res &lt;- \n  rf_wflow %&gt;% \n  fit_resamples(resamples = ames_folds, control = keep_pred)\nrf_res\n## # Resampling results\n## # 10-fold cross-validation \n## # A tibble: 10 × 5\n##   splits             id     .metrics         .notes           .predictions      \n##   &lt;list&gt;             &lt;chr&gt;  &lt;list&gt;           &lt;list&gt;           &lt;list&gt;            \n## 1 &lt;split [2107/235]&gt; Fold01 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble [235 × 4]&gt;\n## 2 &lt;split [2107/235]&gt; Fold02 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble [235 × 4]&gt;\n## 3 &lt;split [2108/234]&gt; Fold03 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble [234 × 4]&gt;\n## 4 &lt;split [2108/234]&gt; Fold04 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble [234 × 4]&gt;\n## 5 &lt;split [2108/234]&gt; Fold05 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble [234 × 4]&gt;\n## 6 &lt;split [2108/234]&gt; Fold06 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble [234 × 4]&gt;\n## # ℹ 4 more rows\n\nEl valor de retorno es un tibble similar a las muestras de entrada, junto con algunas columnas adicionales:\n\n.metrics es una columna de lista de tibbles que contiene las estadísticas de rendimiento del conjunto de evaluación.\n.notes Hay otra columna de lista de tibbles que cataloga cualquier advertencia o error generado durante el remuestreo. Tenga en cuenta que los errores no detendrán la ejecución posterior del remuestreo.\n.predictions está presente cuando save_pred = TRUE. Esta columna de lista contiene tibbles con predicciones fuera de muestra.\n\nSi bien estas columnas de lista pueden parecer desalentadoras, se pueden reconfigurar fácilmente usando tidyr o con las funciones convenientes que proporciona tidymodels. Por ejemplo, para devolver las métricas de rendimiento en un formato más utilizable:\n\ncollect_metrics(rf_res)\n## # A tibble: 2 × 6\n##   .metric .estimator   mean     n std_err .config             \n##   &lt;chr&gt;   &lt;chr&gt;       &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n## 1 rmse    standard   0.0721    10 0.00305 Preprocessor1_Model1\n## 2 rsq     standard   0.831     10 0.0108  Preprocessor1_Model1\n\nEstas son las estimaciones de remuestreo promediadas sobre las réplicas individuales. Para obtener las métricas para cada remuestreo, use la opción summarize = FALSE.\n¡Observe cuánto más realistas son las estimaciones de rendimiento que las estimaciones de resustitución de Sección 10.1!\nPara obtener las predicciones del conjunto de evaluación:\n\nassess_res &lt;- collect_predictions(rf_res)\nassess_res\n## # A tibble: 2,342 × 5\n##   id     .pred  .row Sale_Price .config             \n##   &lt;chr&gt;  &lt;dbl&gt; &lt;int&gt;      &lt;dbl&gt; &lt;chr&gt;               \n## 1 Fold01  5.10    10       5.09 Preprocessor1_Model1\n## 2 Fold01  4.92    27       4.90 Preprocessor1_Model1\n## 3 Fold01  5.21    47       5.08 Preprocessor1_Model1\n## 4 Fold01  5.13    52       5.10 Preprocessor1_Model1\n## 5 Fold01  5.13    59       5.10 Preprocessor1_Model1\n## 6 Fold01  5.13    63       5.11 Preprocessor1_Model1\n## # ℹ 2,336 more rows\n\nLos nombres de las columnas de predicción siguen las convenciones analizadas para los modelos parsnip en el Capítulo 6, para mayor coherencia y facilidad de uso. La columna de resultados observados siempre utiliza el nombre de la columna original de los datos de origen. La columna .row es un número entero que coincide con la fila del conjunto de entrenamiento original para que estos resultados puedan organizarse y unirse adecuadamente con los datos originales.\n\nPara algunos métodos de remuestreo, como el bootstrap o la validación cruzada repetida, habrá múltiples predicciones por fila del conjunto de entrenamiento original. Para obtener valores resumidos (promedios de las predicciones replicadas), utilice collect_predictions(object, summarize = TRUE).\n\nDado que este análisis utilizó una validación cruzada de 10 veces, existe una predicción única para cada muestra del conjunto de entrenamiento. Estos datos pueden generar gráficos útiles del modelo para comprender dónde potencialmente falló. Por ejemplo, ?fig-ames-resampled-dance compara los valores observados y predichos retenidos (análogo a ?fig-ames-rendimiento-plot):\n\nassess_res %&gt;% \n  ggplot(aes(x = Sale_Price, y = .pred)) + \n  geom_point(alpha = .15) +\n  geom_abline(color = \"red\") + \n  coord_obs_pred() + \n  ylab(\"Predichos\") +\n  xlab(\"Precio de Venta\")\n\n\n\n\n\nFigura 10.9: Valores observados versus predichos fuera de la muestra para un modelo de regresión de Ames, utilizando unidades log-10 en ambos ejes\n\n\n\nHay dos casas en el conjunto de entrenamiento con un precio de venta bajo observado que el modelo sobreestima significativamente. ¿Qué casas son estas? Averigüemos por el resultado de assess_res:\n\nover_predicted &lt;- \n  assess_res %&gt;% \n  mutate(residual = Sale_Price - .pred) %&gt;% \n  arrange(desc(abs(residual))) %&gt;% \n  slice(1:2)\nover_predicted\n## # A tibble: 2 × 6\n##   id     .pred  .row Sale_Price .config              residual\n##   &lt;chr&gt;  &lt;dbl&gt; &lt;int&gt;      &lt;dbl&gt; &lt;chr&gt;                   &lt;dbl&gt;\n## 1 Fold09  4.96    32       4.11 Preprocessor1_Model1   -0.858\n## 2 Fold08  4.93   317       4.12 Preprocessor1_Model1   -0.816\n\names_train %&gt;% \n  slice(over_predicted$.row) %&gt;% \n  select(Gr_Liv_Area, Neighborhood, Year_Built, Bedroom_AbvGr, Full_Bath)\n## # A tibble: 2 × 5\n##   Gr_Liv_Area Neighborhood           Year_Built Bedroom_AbvGr Full_Bath\n##         &lt;int&gt; &lt;fct&gt;                       &lt;int&gt;         &lt;int&gt;     &lt;int&gt;\n## 1         832 Old_Town                     1923             2         1\n## 2         733 Iowa_DOT_and_Rail_Road       1952             2         1\n\nIdentificar ejemplos como estos con un desempeño especialmente pobre puede ayudarnos a realizar un seguimiento e investigar por qué estas predicciones específicas son tan pobres.\nVolvamos a las casas en general. ¿Cómo podemos utilizar un conjunto de validación en lugar de validación cruzada? De nuestro objeto anterior rsample:\n\nval_res &lt;- rf_wflow %&gt;% fit_resamples(resamples = val_set)\n## Warning in `[.tbl_df`(x, is.finite(x &lt;- as.numeric(x))): NAs introducidos por\n## coerción\nval_res\n## # Resampling results\n## #  \n## # A tibble: 1 × 4\n##   splits             id         .metrics         .notes          \n##   &lt;list&gt;             &lt;chr&gt;      &lt;list&gt;           &lt;list&gt;          \n## 1 &lt;split [1758/586]&gt; validation &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n\ncollect_metrics(val_res)\n## # A tibble: 2 × 6\n##   .metric .estimator   mean     n std_err .config             \n##   &lt;chr&gt;   &lt;chr&gt;       &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n## 1 rmse    standard   0.0727     1      NA Preprocessor1_Model1\n## 2 rsq     standard   0.823      1      NA Preprocessor1_Model1\n\nEstos resultados también están mucho más cerca de los resultados del conjunto de pruebas que las estimaciones de rendimiento de resustitución.\n\nEn estos análisis, los resultados del remuestreo son muy cercanos a los resultados del conjunto de pruebas. Los dos tipos de estimaciones tienden a estar bien correlacionados. Sin embargo, esto podría deberse al azar. Un valor inicial de “55” fijó los números aleatorios antes de crear las nuevas muestras. Intente cambiar este valor y vuelva a ejecutar los análisis para investigar si las estimaciones remuestreadas también coinciden con los resultados del conjunto de pruebas."
  },
  {
    "objectID": "10-resampling.html#sec-parallel",
    "href": "10-resampling.html#sec-parallel",
    "title": "10  Remuestrear para Evaluar el Rendimiento",
    "section": "\n10.4 Procesamiento en paralelo",
    "text": "10.4 Procesamiento en paralelo\nLos modelos creados durante el remuestreo son independientes entre sí. Los cálculos de este tipo a veces se denominan vergonzosamente paralelos; cada modelo podría adaptarse simultáneamente sin problemas.9 El paquete tune usa foreach paquete para facilitar los cálculos paralelos. Estos cálculos podrían dividirse entre procesadores de la misma computadora o entre computadoras diferentes, según la tecnología elegida.\nPara cálculos realizados en una sola computadora, el número de procesos de trabajo posibles está determinado por el paquete parallel:\n\n# La cantidad de núcleos físicos en el hardware:\nparallel::detectCores(logical = FALSE)\n## [1] 2\n\n# El número de posibles procesadors independientes que pueden\n# ser utilizados simultáneamente:  \nparallel::detectCores(logical = TRUE)\n## [1] 4\n\nLa diferencia entre estos dos valores está relacionada con el procesador de la computadora. Por ejemplo, la mayoría de los procesadores Intel utilizan hyperthreading, que crea dos núcleos virtuales para cada núcleo físico. Si bien estos recursos adicionales pueden mejorar el rendimiento, la mayoría de las aceleraciones producidas por el procesamiento paralelo ocurren cuando el procesamiento utiliza menos núcleos físicos.\nPara fit_resamples() y otras funciones en tune, el procesamiento paralelo ocurre cuando el usuario registra un paquete backend paralelo. Estos paquetes de R definen cómo ejecutar el procesamiento paralelo. En los sistemas operativos Unix y macOS, un método para dividir los cálculos es bifurcar subprocesos. Para habilitar esto, cargue el paquete doMC y registre el número de núcleos paralelos con foreach:\n\n# Solo Unix y macOS\nlibrary(doMC)\nregisterDoMC(cores = 2)\n\n# Ahora ejecute fit_resamples()...\n\nEsto indica a fit_resamples() que ejecute la mitad de los cálculos en cada uno de los dos núcleos. Para restablecer los cálculos al procesamiento secuencial:\n\nregisterDoSEQ()\n\nAlternativamente, un enfoque diferente para paralelizar los cálculos utiliza sockets de red. El paquete doParallel habilita este método (utilizable en todos los sistemas operativos):\n\n# Todos los sistemas operativos\nlibrary(doParallel)\n\n# Cree un objeto de clúster y luego regístrelo: \ncl &lt;- makePSOCKcluster(2)\nregisterDoParallel(cl)\n\n# Ahora ejecute fit_resamples()`...\n\nstopCluster(cl)\n\nOtro paquete de R que facilita el procesamiento paralelo es el paquete future. Al igual que foreach, proporciona un marco para el paralelismo. Este paquete se usa junto con foreach a través del paquete doFuture.\n\nLos paquetes R con backends paralelos para foreach comienzan con el prefijo \"do\".\n\nEl procesamiento paralelo con el paquete tune tiende a proporcionar aceleraciones lineales para los primeros núcleos. Esto significa que, con dos núcleos, los cálculos son el doble de rápidos. Dependiendo de los datos y del tipo de modelo, la aceleración lineal se deteriora después de cuatro o cinco núcleos. El uso de más núcleos seguirá reduciendo el tiempo necesario para completar la tarea; simplemente hay rendimientos decrecientes para los núcleos adicionales.\nConcluyamos con una nota final sobre el paralelismo. Para cada una de estas tecnologías, los requisitos de memoria se multiplican por cada núcleo adicional utilizado. Por ejemplo, si el conjunto de datos actual tiene 2 GB de memoria y se utilizan tres núcleos, el requisito total de memoria es de 8 GB (2 para cada proceso de trabajo más el original). El uso de demasiados núcleos puede hacer que los cálculos (y la computadora) se ralenticen considerablemente."
  },
  {
    "objectID": "10-resampling.html#sec-extract",
    "href": "10-resampling.html#sec-extract",
    "title": "10  Remuestrear para Evaluar el Rendimiento",
    "section": "\n10.5 Guardar los objetos remuestreados",
    "text": "10.5 Guardar los objetos remuestreados\nLos modelos creados durante el remuestreo no se conservan. Estos modelos se entrenan con el fin de evaluar el desempeño y, por lo general, no los necesitamos después de haber calculado las estadísticas de desempeño. Si un enfoque de modelado particular resulta ser la mejor opción para nuestro conjunto de datos, entonces la mejor opción es ajustar nuevamente todo el conjunto de entrenamiento para que los parámetros del modelo puedan estimarse con más datos.\nSi bien estos modelos creados durante el remuestreo no se conservan, existe un método para conservarlos o algunos de sus componentes. La opción extract de control_resamples() especifica una función que toma un solo argumento; Usaremos x. Cuando se ejecuta, x da como resultado un objeto de flujo de trabajo ajustado, independientemente de si proporcionó a fit_resamples() un flujo de trabajo. Recuerde que el paquete workflows tiene funciones que pueden extraer los diferentes componentes de los objetos (por ejemplo, el modelo, la receta, etc.).\nAjustemos un modelo de regresión lineal usando la receta que desarrollamos en el Capítulo 8:\n\names_rec &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n           Latitude + Longitude, data = ames_train) %&gt;%\n  step_other(Neighborhood, threshold = 0.01) %&gt;% \n  step_dummy(all_nominal_predictors()) %&gt;% \n  step_interact( ~ Gr_Liv_Area:starts_with(\"Bldg_Type_\") ) %&gt;% \n  step_ns(Latitude, Longitude, deg_free = 20)\n\nlm_wflow &lt;-  \n  workflow() %&gt;% \n  add_recipe(ames_rec) %&gt;% \n  add_model(linear_reg() %&gt;% set_engine(\"lm\")) \n\nlm_fit &lt;- lm_wflow %&gt;% fit(data = ames_train)\n\n# Selecciona la receta:\nextract_recipe(lm_fit, estimated = TRUE)\n## \n## ── Recipe ───────────────────────────────────────────────────────────────────────────\n## \n## ── Inputs\n## Number of variables by role\n## outcome:   1\n## predictor: 6\n## \n## ── Training information\n## Training data contained 2342 data points and no incomplete rows.\n## \n## ── Operations\n## • Collapsing factor levels for: Neighborhood | Trained\n## • Dummy variables from: Neighborhood, Bldg_Type | Trained\n## • Interactions with: Gr_Liv_Area:(Bldg_Type_TwoFmCon + Bldg_Type_Duplex +\n##   Bldg_Type_Twnhs + Bldg_Type_TwnhsE) | Trained\n## • Natural splines on: Latitude, Longitude | Trained\n\nPodemos guardar los coeficientes del modelo lineal para un objeto de modelo ajustado desde un flujo de trabajo:\n\nget_model &lt;- function(x) {\n  extract_fit_parsnip(x) %&gt;% tidy()\n}\n\n# Pruébelo usando:\n# get_model(lm_fit)\n\nAhora apliquemos esta función a los diez ajustes remuestreados. Los resultados de la función de extracción se envuelven en un objeto de lista y se devuelven en un tibble:\n\nctrl &lt;- control_resamples(extract = get_model)\n\nlm_res &lt;- lm_wflow %&gt;%  fit_resamples(resamples = ames_folds, control = ctrl)\nlm_res\n## # Resampling results\n## # 10-fold cross-validation \n## # A tibble: 10 × 5\n##   splits             id     .metrics         .notes           .extracts       \n##   &lt;list&gt;             &lt;chr&gt;  &lt;list&gt;           &lt;list&gt;           &lt;list&gt;          \n## 1 &lt;split [2107/235]&gt; Fold01 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble [1 × 2]&gt;\n## 2 &lt;split [2107/235]&gt; Fold02 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble [1 × 2]&gt;\n## 3 &lt;split [2108/234]&gt; Fold03 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble [1 × 2]&gt;\n## 4 &lt;split [2108/234]&gt; Fold04 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble [1 × 2]&gt;\n## 5 &lt;split [2108/234]&gt; Fold05 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble [1 × 2]&gt;\n## 6 &lt;split [2108/234]&gt; Fold06 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt; &lt;tibble [1 × 2]&gt;\n## # ℹ 4 more rows\n\nAhora hay una columna .extracts con tibbles anidados. ¿Qué contienen estos? Averigüemos subconjuntos.\n\nlm_res$.extracts[[1]]\n## # A tibble: 1 × 2\n##   .extracts         .config             \n##   &lt;list&gt;            &lt;chr&gt;               \n## 1 &lt;tibble [73 × 5]&gt; Preprocessor1_Model1\n\n# Para obtener los resultados\nlm_res$.extracts[[1]][[1]]\n## [[1]]\n## # A tibble: 73 × 5\n##   term                        estimate  std.error statistic   p.value\n##   &lt;chr&gt;                          &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n## 1 (Intercept)                 1.48     0.320         4.62   4.11e-  6\n## 2 Gr_Liv_Area                 0.000158 0.00000476   33.2    9.72e-194\n## 3 Year_Built                  0.00180  0.000149     12.1    1.57e- 32\n## 4 Neighborhood_College_Creek -0.00163  0.0373       -0.0438 9.65e-  1\n## 5 Neighborhood_Old_Town      -0.0757   0.0138       -5.47   4.92e-  8\n## 6 Neighborhood_Edwards       -0.109    0.0310       -3.53   4.21e-  4\n## # ℹ 67 more rows\n\nEsto podría parecer un método complicado para guardar los resultados del modelo. Sin embargo, extract es flexible y no supone que el usuario solo guardará un tibble por remuestreo. Por ejemplo, el método tidy() podría ejecutarse tanto en la receta como en el modelo. En este caso, se devolverá una lista de dos tibbles.\nPara nuestro ejemplo más simple, todos los resultados se pueden aplanar y recopilar usando:\n\nall_coef &lt;- map_dfr(lm_res$.extracts, ~ .x[[1]][[1]])\n# Muestre las réplicas de un único predictor:\nfilter(all_coef, term == \"Year_Built\")\n## # A tibble: 10 × 5\n##   term       estimate std.error statistic  p.value\n##   &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n## 1 Year_Built  0.00180  0.000149      12.1 1.57e-32\n## 2 Year_Built  0.00180  0.000151      12.0 6.45e-32\n## 3 Year_Built  0.00185  0.000150      12.3 1.00e-33\n## 4 Year_Built  0.00183  0.000147      12.5 1.90e-34\n## 5 Year_Built  0.00184  0.000150      12.2 2.47e-33\n## 6 Year_Built  0.00180  0.000150      12.0 3.35e-32\n## # ℹ 4 more rows\n\nLos capítulos 13 y 14 analizan un conjunto de funciones para ajustar modelos. Sus interfaces son similares a fit_resamples() y muchas de las características descritas aquí se aplican a esas funciones."
  },
  {
    "objectID": "10-resampling.html#sec-resampling-summary",
    "href": "10-resampling.html#sec-resampling-summary",
    "title": "10  Remuestrear para Evaluar el Rendimiento",
    "section": "\n10.6 Resumen del capítulo",
    "text": "10.6 Resumen del capítulo\nEste capítulo describe una de las herramientas fundamentales del análisis de datos, la capacidad de medir el rendimiento y la variación en los resultados del modelo. El remuestreo nos permite determinar qué tan bien funciona el modelo sin utilizar el conjunto de prueba.\nSe introdujo una función importante del paquete tune, llamada fit_resamples(). La interfaz para esta función también se utiliza en capítulos futuros que describen las herramientas de ajuste de modelos.\nEl código de análisis de datos, hasta ahora, para los datos de Ames es:\n\nlibrary(tidymodels)\ndata(ames)\names &lt;- mutate(ames, Sale_Price = log10(Sale_Price))\n\nset.seed(502)\names_split &lt;- initial_split(ames, prop = 0.80, strata = Sale_Price)\names_train &lt;- training(ames_split)\names_test  &lt;-  testing(ames_split)\n\names_rec &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n           Latitude + Longitude, data = ames_train) %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_other(Neighborhood, threshold = 0.01) %&gt;% \n  step_dummy(all_nominal_predictors()) %&gt;% \n  step_interact( ~ Gr_Liv_Area:starts_with(\"Bldg_Type_\") ) %&gt;% \n  step_ns(Latitude, Longitude, deg_free = 20)\n\nlm_model &lt;- linear_reg() %&gt;% set_engine(\"lm\")\n\nlm_wflow &lt;- \n  workflow() %&gt;% \n  add_model(lm_model) %&gt;% \n  add_recipe(ames_rec)\n\nlm_fit &lt;- fit(lm_wflow, ames_train)\n\nrf_model &lt;- \n  rand_forest(trees = 1000) %&gt;% \n  set_engine(\"ranger\") %&gt;% \n  set_mode(\"regression\")\n\nrf_wflow &lt;- \n  workflow() %&gt;% \n  add_formula(\n    Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n      Latitude + Longitude) %&gt;% \n  add_model(rf_model) \n\nset.seed(1001)\names_folds &lt;- vfold_cv(ames_train, v = 10)\n\nkeep_pred &lt;- control_resamples(save_pred = TRUE, save_workflow = TRUE)\n\nset.seed(1003)\nrf_res &lt;- rf_wflow %&gt;% fit_resamples(resamples = ames_folds, control = keep_pred)\n\n\n\n\n\nBreiman, L. 2001. «Random forests». Machine learning 45 (1): 5-32.\n\n\nDavison, A, y D Hinkley. 1997. Bootstrap methods and their application. Vol. 1. Cambridge university press.\n\n\nHyndman, R, y G Athanasopoulos. 2018. Forecasting: principles and practice. OTexts.\n\n\nKuhn, M, y K Johnson. 2020. Feature engineering and selection: A practical approach for predictive models. CRC Press.\n\n\nSchmidberger, M, M Morgan, D Eddelbuettel, H Yu, L Tierney, y U Mansmann. 2009. «State of the art in parallel computing with R». Journal of Statistical Software 31 (1): 1-27. https://www.jstatsoft.org/v031/i01.\n\n\nXu, Q, y Y Liang. 2001. «Monte Carlo cross validation». Chemometrics and Intelligent Laboratory Systems 56 (1): 1-11."
  },
  {
    "objectID": "10-resampling.html#footnotes",
    "href": "10-resampling.html#footnotes",
    "title": "10  Remuestrear para Evaluar el Rendimiento",
    "section": "",
    "text": "Consulte la Sección 1.2.5 de Kuhn y Johnson (2020) para una discusión: https://bookdown.org/max/FES/important-concepts.html#model-bias-and-variance↩︎\nEs posible que un modelo lineal casi memorice el conjunto de entrenamiento, como lo hizo el modelo de bosque aleatorio. En el objeto ames_rec, cambie el número de términos spline para longitud y latitud a un número grande (digamos 1000). Esto produciría un modelo ajustado con un RMSE de resustitución muy pequeño y un RMSE del conjunto de prueba que es mucho más grande.↩︎\nConsulte la Sección 3.4 de Kuhn y Johnson (2020) para obtener una descripción más detallada de los resultados del cambio de V: https://bookdown.org/max/FES/resampling.html↩︎\nPara comprobarlo usted mismo, intente ejecutar lobstr::obj_size(ames_folds) y lobstr::obj_size(ames_train). El tamaño del objeto de remuestreo es mucho menor que diez veces el tamaño de los datos originales.↩︎\nAlgunos métodos de remuestreo requieren múltiples campos id.↩︎\nPara obtener más detalles, consulte la Sección 3.4.6 de Kuhn y Johnson (2020): https://bookdown.org/max/FES/resampling.html#resample-var-bias.↩︎\nEstos son errores estándar aproximados. Como se analizará en el próximo capítulo, existe una correlación dentro de las réplicas que es típica de los resultados remuestreados. Al ignorar este componente adicional de variación, los cálculos simples que se muestran en este gráfico son sobreestimaciones de la reducción del ruido en los errores estándar.↩︎\nEn esencia, un conjunto de validación puede considerarse una iteración única de la validación cruzada de Monte Carlo.↩︎\nSchmidberger et al. (2009) ofrece una descripción técnica de estas tecnologías.↩︎"
  },
  {
    "objectID": "11-comparing-models.html#sec-workflow-set",
    "href": "11-comparing-models.html#sec-workflow-set",
    "title": "11  Comparación de Modelos con Remuestreo",
    "section": "\n11.1 Crear Múltiples Modelos con Conjuntos de Flujo de Trabajo",
    "text": "11.1 Crear Múltiples Modelos con Conjuntos de Flujo de Trabajo\nEn Sección 7.5 describimos la idea de un conjunto de flujo de trabajo donde se pueden generar combinatoriamente diferentes preprocesadores y/o modelos. En el Capítulo 10, utilizamos una receta para los datos de Ames que incluía un término de interacción así como funciones spline para longitud y latitud. Para demostrar más con los conjuntos de flujos de trabajo, creemos tres modelos lineales diferentes que agreguen estos pasos de preprocesamiento de forma incremental; Podemos probar si estos términos adicionales mejoran los resultados del modelo. Crearemos tres recetas y luego las combinaremos en un conjunto de flujo de trabajo:\n\nlibrary(tidymodels)\ntidymodels_prefer()\n\nbasic_rec &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n           Latitude + Longitude, data = ames_train) %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_other(Neighborhood, threshold = 0.01) %&gt;% \n  step_dummy(all_nominal_predictors())\n\ninteraction_rec &lt;- \n  basic_rec %&gt;% \n  step_interact( ~ Gr_Liv_Area:starts_with(\"Bldg_Type_\") ) \n\nspline_rec &lt;- \n  interaction_rec %&gt;% \n  step_ns(Latitude, Longitude, deg_free = 50)\n\npreproc &lt;- \n  list(basic = basic_rec, \n       interact = interaction_rec, \n       splines = spline_rec\n  )\n\nlm_models &lt;- workflow_set(preproc, list(lm = linear_reg()), cross = FALSE)\nlm_models\n## # A workflow set/tibble: 3 × 4\n##   wflow_id    info             option    result    \n##   &lt;chr&gt;       &lt;list&gt;           &lt;list&gt;    &lt;list&gt;    \n## 1 basic_lm    &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 2 interact_lm &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 3 splines_lm  &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n\nNos gustaría volver a muestrear cada uno de estos modelos por turno. Para hacerlo, usaremos una función similar a purrr llamada workflow_map(). Esta función toma un argumento inicial de la función para aplicarlo a los flujos de trabajo, seguido de opciones para esa función. También configuramos un argumento verbose que imprimirá el progreso, así como un argumento seed que garantiza que cada modelo utilice el mismo flujo de números aleatorios que los demás.\n\nlm_models &lt;- \n  lm_models %&gt;% \n  workflow_map(\"fit_resamples\", \n               # Options to `workflow_map()`: \n               seed = 1101, verbose = TRUE,\n               # Options to `fit_resamples()`: \n               resamples = ames_folds, control = keep_pred)\n## i 1 of 3 resampling: basic_lm\n## ✔ 1 of 3 resampling: basic_lm (3.3s)\n## i 2 of 3 resampling: interact_lm\n## ✔ 2 of 3 resampling: interact_lm (3.3s)\n## i 3 of 3 resampling: splines_lm\n## ✔ 3 of 3 resampling: splines_lm (5.1s)\nlm_models\n## # A workflow set/tibble: 3 × 4\n##   wflow_id    info             option    result   \n##   &lt;chr&gt;       &lt;list&gt;           &lt;list&gt;    &lt;list&gt;   \n## 1 basic_lm    &lt;tibble [1 × 4]&gt; &lt;opts[2]&gt; &lt;rsmp[+]&gt;\n## 2 interact_lm &lt;tibble [1 × 4]&gt; &lt;opts[2]&gt; &lt;rsmp[+]&gt;\n## 3 splines_lm  &lt;tibble [1 × 4]&gt; &lt;opts[2]&gt; &lt;rsmp[+]&gt;\n\nObserve que las columnas option y result ahora están completas. La primera incluye las opciones para fit_resamples() que se dieron (para reproducibilidad), y la última columna contiene los resultados producidos por fit_resamples().\nHay algunas funciones convenientes para conjuntos de flujos de trabajo, incluida collect_metrics() para recopilar las estadísticas de rendimiento. Podemos filtrar() a cualquier métrica específica que nos interese:\n\ncollect_metrics(lm_models) %&gt;% \n  filter(.metric == \"rmse\")\n## # A tibble: 3 × 9\n##   wflow_id    .config          preproc model .metric .estimator   mean     n std_err\n##   &lt;chr&gt;       &lt;chr&gt;            &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;       &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;\n## 1 basic_lm    Preprocessor1_M… recipe  line… rmse    standard   0.0803    10 0.00264\n## 2 interact_lm Preprocessor1_M… recipe  line… rmse    standard   0.0799    10 0.00272\n## 3 splines_lm  Preprocessor1_M… recipe  line… rmse    standard   0.0785    10 0.00282\n\n¿Qué pasa con el modelo de bosque aleatorio del capítulo anterior? Podemos agregarlo al conjunto convirtiéndolo primero a su propio conjunto de flujo de trabajo y luego vinculando filas. Esto requiere que, cuando se volvió a muestrear el modelo, se haya configurado la opción save_workflow = TRUE en la función de control.\n\nfour_models &lt;- \n  as_workflow_set(random_forest = rf_res) %&gt;% \n  bind_rows(lm_models)\nfour_models\n## # A workflow set/tibble: 4 × 4\n##   wflow_id      info             option    result   \n##   &lt;chr&gt;         &lt;list&gt;           &lt;list&gt;    &lt;list&gt;   \n## 1 random_forest &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;rsmp[+]&gt;\n## 2 basic_lm      &lt;tibble [1 × 4]&gt; &lt;opts[2]&gt; &lt;rsmp[+]&gt;\n## 3 interact_lm   &lt;tibble [1 × 4]&gt; &lt;opts[2]&gt; &lt;rsmp[+]&gt;\n## 4 splines_lm    &lt;tibble [1 × 4]&gt; &lt;opts[2]&gt; &lt;rsmp[+]&gt;\n\nEl método autoplot(), con salida en Figura 11.1, muestra intervalos de confianza para cada modelo en orden de mejor a peor. En este capítulo, nos centraremos en el coeficiente de determinación (también conocido como \\(R^2\\)) y usaremos metric = \"rsq\" en la llamada para configurar nuestro gráfico:\n\nlibrary(ggrepel)\nautoplot(four_models, metric = \"rsq\") +\n  geom_text_repel(aes(label = wflow_id), nudge_x = 1/8, nudge_y = 1/100) +\n  theme(legend.position = \"none\")\n\n\n\n\n\nFigura 11.1: Intervalos de confianza para el coeficiente de determinación utilizando cuatro modelos diferentes\n\n\n\nEn este gráfico de intervalos de confianza \\(R^2\\), podemos ver que el método de random forest está funcionando mejor y hay mejoras menores en los modelos lineales a medida que agregamos más pasos a la receta.\nAhora que tenemos 10 estimaciones de rendimiento remuestreadas para cada uno de los cuatro modelos, estas estadísticas resumidas se pueden utilizar para realizar comparaciones entre modelos."
  },
  {
    "objectID": "11-comparing-models.html#sec-resampled-stats",
    "href": "11-comparing-models.html#sec-resampled-stats",
    "title": "11  Comparación de Modelos con Remuestreo",
    "section": "\n11.2 Comparación de estadísticas de rendimiento remuestreadas",
    "text": "11.2 Comparación de estadísticas de rendimiento remuestreadas\nTeniendo en cuenta los resultados anteriores para los tres modelos lineales, parece que los términos adicionales no mejoran profundamente las estadísticas medias de RMSE o \\(R^2\\) para los modelos lineales. La diferencia es pequeña, pero podría ser mayor que el ruido experimental en el sistema, es decir, considerarse estadísticamente significativa. Podemos probar formalmente la hipótesis de que los términos adicionales aumentan \\(R^2\\).\n\nAntes de hacer comparaciones entre modelos, es importante para nosotros analizar la correlación dentro de la muestra para las estadísticas de remuestreo. Cada modelo se midió con los mismos pliegues de validación cruzada y los resultados para la misma nueva muestra tienden a ser similares.\n\nEn otras palabras, hay algunos remuestreos en los que el rendimiento de todos los modelos tiende a ser bajo y otros en los que tiende a ser alto. En estadística, esto se denomina componente de variación remuestreo a remuestreo.\nPara ilustrar, recopilemos las estadísticas de remuestreo individuales para los modelos lineales y el bosque aleatorio. Nos centraremos en la estadística \\(R^2\\) para cada modelo, que mide la correlación entre los precios de venta observados y previstos para cada casa. Vamos a filtrar() para mantener solo las métricas \\(R^2\\), remodelar los resultados y calcular cómo se correlacionan las métricas entre sí.\n\nrsq_indiv_estimates &lt;- \n  collect_metrics(four_models, summarize = FALSE) %&gt;% \n  filter(.metric == \"rsq\") \n\nrsq_wider &lt;- \n  rsq_indiv_estimates %&gt;% \n  select(wflow_id, .estimate, id) %&gt;% \n  pivot_wider(id_cols = \"id\", names_from = \"wflow_id\", values_from = \".estimate\")\n\ncorrr::correlate(rsq_wider %&gt;% select(-id), quiet = TRUE)\n## # A tibble: 4 × 5\n##   term          random_forest basic_lm interact_lm splines_lm\n##   &lt;chr&gt;                 &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;\n## 1 random_forest        NA        0.887       0.888      0.889\n## 2 basic_lm              0.887   NA           0.993      0.997\n## 3 interact_lm           0.888    0.993      NA          0.987\n## 4 splines_lm            0.889    0.997       0.987     NA\n\nEstas correlaciones son altas e indican que, entre modelos, existen grandes correlaciones dentro de la muestra. Para ver esto visualmente en Figura 11.2, las estadísticas \\(R^2\\) se muestran para cada modelo con líneas que conectan los remuestreos:\n\nrsq_indiv_estimates %&gt;% \n  mutate(wflow_id = reorder(wflow_id, .estimate)) %&gt;% \n  ggplot(aes(x = wflow_id, y = .estimate, group = id, color = id)) + \n  geom_line(alpha = .5, linewidth = 1.25) + \n  theme(legend.position = \"none\")\n\n\n\n\n\nFigura 11.2: Remuestrear estadísticas entre modelos\n\n\n\nSi el efecto de remuestreo a remuestreo no fuera real, no habría líneas paralelas. Una prueba estadística de las correlaciones evalúa si las magnitudes de estas correlaciones no son simplemente ruido. Para los modelos lineales:\n\nrsq_wider %&gt;% \n  with( cor.test(basic_lm, splines_lm) ) %&gt;% \n  tidy() %&gt;% \n  select(estimate, starts_with(\"conf\"))\n## # A tibble: 1 × 3\n##   estimate conf.low conf.high\n##      &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n## 1    0.997    0.987     0.999\n\nLos resultados de la prueba de correlación (la “estimación”, estimate, de la correlación y los intervalos de confianza) nos muestran que la correlación dentro de la muestra parece ser real.\n¿Qué efecto tiene la correlación adicional en nuestro análisis? Considere la varianza de una diferencia de dos variables:\n\\[\\operatorname{Var}[X - Y] = \\operatorname{Var}[X] + \\operatorname{Var}[Y]  - 2 \\operatorname{Cov}[X, Y]\\]\nEl último término es la covarianza entre dos elementos. Si hay una covarianza positiva significativa, entonces cualquier prueba estadística de esta diferencia carecería de potencia crítica al comparar la diferencia en dos modelos. En otras palabras, ignorar el efecto de remuestreo a remuestreo sesgaría nuestras comparaciones de modelos hacia la ausencia de diferencias entre los modelos.\n\nEsta característica de las estadísticas de remuestreo entrará en juego en las dos secciones siguientes.\n\nAntes de realizar comparaciones de modelos o observar los resultados del remuestreo, puede resultar útil definir un tamaño del efecto práctico relevante. Dado que estos análisis se centran en las estadísticas de \\(R^2\\), el tamaño del efecto práctico es el cambio en \\(R^2\\) que consideraríamos una diferencia realista que importa. Por ejemplo, podríamos pensar que dos modelos no son prácticamente diferentes si sus valores de \\(R^2\\) están dentro de \\(\\pm 2\\)%. Si este fuera el caso, las diferencias menores al 2% no se consideran importantes incluso si son estadísticamente significativas.\nLa importancia práctica es subjetiva; dos personas pueden tener ideas muy diferentes en el umbral de la importancia. Sin embargo, más adelante mostraremos que esta consideración puede resultar muy útil a la hora de decidir entre modelos."
  },
  {
    "objectID": "11-comparing-models.html#simple-hypothesis-testing-methods",
    "href": "11-comparing-models.html#simple-hypothesis-testing-methods",
    "title": "11  Comparing Models with Resampling",
    "section": "\n11.3 Simple Hypothesis Testing Methods",
    "text": "11.3 Simple Hypothesis Testing Methods\nWe can use simple hypothesis testing to make formal comparisons between models. Consider the familiar linear statistical model:\n\\[y_{ij} = \\beta_0 + \\beta_1x_{i1} + \\ldots + \\beta_px_{ip} + \\epsilon_{ij}\\]\nThis versatile model is used to create regression models as well as being the basis for the popular analysis of variance (ANOVA) technique for comparing groups. With the ANOVA model, the predictors (\\(x_{ij}\\)) are binary dummy variables for different groups. From this, the \\(\\beta\\) parameters estimate whether two or more groups are different from one another using hypothesis testing techniques.\nIn our specific situation, the ANOVA can also make model comparisons. Suppose the individual resampled \\(R^2\\) statistics serve as the outcome data (i.e., the \\(y_{ij}\\)) and the models as the predictors in the ANOVA model. A sampling of this data structure is shown in Tabla 11.1.\n\n\n\n\nTabla 11.1: Model performance statistics as a data set for analysis.\n\nY = rsq\nmodel\nX1\nX2\nX3\nid\n\n\n\n0.8108\nbasic_lm\n0\n0\n0\nFold01\n\n\n0.8134\ninteract_lm\n1\n0\n0\nFold01\n\n\n0.8615\nrandom_forest\n0\n1\n0\nFold01\n\n\n0.8217\nsplines_lm\n0\n0\n1\nFold01\n\n\n0.8045\nbasic_lm\n0\n0\n0\nFold02\n\n\n0.8103\ninteract_lm\n1\n0\n0\nFold02\n\n\n\n\n\n\n\n\nThe X1, X2, and X3 columns in the table are indicators for the values in the model column. Their order was defined in the same way that R would define them, alphabetically ordered by model.\nFor our model comparison, the specific ANOVA model is:\n\\[y_{ij} = \\beta_0 + \\beta_1x_{i1} + \\beta_2x_{i2} + \\beta_3x_{i3} + \\epsilon_{ij}\\]\nwhere\n\n\\(\\beta_0\\) is the estimate of the mean \\(R^2\\) statistic for the basic linear models (i.e., without splines or interactions),\n\\(\\beta_1\\) is the change in mean \\(R^2\\) when interactions are added to the basic linear model,\n\\(\\beta_2\\) is the change in mean \\(R^2\\) between the basic linear model and the random forest model, and\n\\(\\beta_3\\) is the change in mean \\(R^2\\) between the basic linear model and one with interactions and splines.\n\nFrom these model parameters, hypothesis tests and p-values are generated to statistically compare models, but we must contend with how to handle the resample-to-resample effect. Historically, the resample groups would be considered a block effect and an appropriate term was added to the model. Alternatively, the resample effect could be considered a random effect where these particular resamples were drawn at random from a larger population of possible resamples. However, we aren’t really interested in these effects; we only want to adjust for them in the model so that the variances of the interesting differences are properly estimated.\nTreating the resamples as random effects is theoretically appealing. Methods for fitting an ANOVA model with this type of random effect could include the linear mixed model (Faraway 2016) or a Bayesian hierarchical model (shown in the next section).\nA simple and fast method for comparing two models at a time is to use the differences in \\(R^2\\) values as the outcome data in the ANOVA model. Since the outcomes are matched by resample, the differences do not contain the resample-to-resample effect and, for this reason, the standard ANOVA model is appropriate. To illustrate, this call to lm() tests the difference between two of the linear regression models:\n\ncompare_lm &lt;- \n  rsq_wider %&gt;% \n  mutate(difference = splines_lm - basic_lm)\n\nlm(difference ~ 1, data = compare_lm) %&gt;% \n  tidy(conf.int = TRUE) %&gt;% \n  select(estimate, p.value, starts_with(\"conf\"))\n## # A tibble: 1 × 4\n##   estimate   p.value conf.low conf.high\n##      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n## 1  0.00913 0.0000256  0.00650    0.0118\n\n# Alternatively, a paired t-test could also be used: \nrsq_wider %&gt;% \n  with( t.test(splines_lm, basic_lm, paired = TRUE) ) %&gt;%\n  tidy() %&gt;% \n  select(estimate, p.value, starts_with(\"conf\"))\n## # A tibble: 1 × 4\n##   estimate   p.value conf.low conf.high\n##      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n## 1  0.00913 0.0000256  0.00650    0.0118\n\nWe could evaluate each pair-wise difference in this way. Note that the p-value indicates a statistically significant signal; the collection of spline terms for longitude and latitude do appear to have an effect. However, the difference in \\(R^2\\) is estimated at 0.91%. If our practical effect size were 2%, we might not consider these terms worth including in the model.\n\nWe’ve briefly mentioned p-values already, but what actually are they? From Wasserstein y Lazar (2016): “Informally, a p-value is the probability under a specified statistical model that a statistical summary of the data (e.g., the sample mean difference between two compared groups) would be equal to or more extreme than its observed value.”\nIn other words, if this analysis were repeated a large number of times under the null hypothesis of no differences, the p-value reflects how extreme our observed results would be in comparison."
  },
  {
    "objectID": "11-comparing-models.html#sec-tidyposterior",
    "href": "11-comparing-models.html#sec-tidyposterior",
    "title": "11  Comparación de Modelos con Remuestreo",
    "section": "\n11.4 Métodos bayesianos",
    "text": "11.4 Métodos bayesianos\nSimplemente utilizamos pruebas de hipótesis para comparar modelos formalmente, pero también podemos adoptar un enfoque más general para realizar estas comparaciones formales utilizando efectos aleatorios y estadísticas bayesianas (McElreath 2020). Si bien el modelo es más complejo que el método ANOVA, la interpretación es más simple y directa que el método del valor p. El modelo ANOVA anterior tenía la forma:\n\\[y_{ij} = \\beta_0 + \\beta_1x_{i1} + \\beta_2x_{i2} + \\beta_3x_{i3} + \\epsilon_{ij}\\]\ndonde se supone que los residuales \\(\\epsilon_{ij}\\) son independientes y siguen una distribución gaussiana con media cero y desviación estándar constante de \\(\\sigma\\). A partir de este supuesto, la teoría estadística muestra que los parámetros de regresión estimados siguen una distribución gaussiana multivariada y, de ahí, se derivan los valores p y los intervalos de confianza.\nUn modelo lineal bayesiano hace suposiciones adicionales. Además de especificar una distribución para los residuos, requerimos especificaciones de distribución previa para los parámetros del modelo ( \\(\\beta_j\\) y \\(\\sigma\\) ). Estas son distribuciones de los parámetros que asume el modelo antes de ser expuesto a los datos observados. Por ejemplo, un conjunto simple de distribuciones previas para nuestro modelo podría ser:\n\\[\\begin{align}\n\\epsilon_{ij} &\\sim N(0, \\sigma) \\notag \\\\\n\\beta_j &\\sim N(0, 10) \\notag \\\\\n\\sigma &\\sim \\text{exponential}(1) \\notag\n\\end{align}\\]\nEstos antecedentes establecen los rangos posibles/probables de los parámetros del modelo y no tienen parámetros desconocidos. Por ejemplo, el valor anterior de \\(\\sigma\\) indica que los valores deben ser mayores que cero, están muy sesgados a la derecha y tienen valores que generalmente son menores que 3 o 4.\nTenga en cuenta que los parámetros de regresión tienen una distribución a priori bastante amplia, con una desviación estándar de 10. En muchos casos, es posible que no tengamos una opinión sólida sobre el a priori más allá de que sea simétrico y tenga forma de campana. La gran desviación estándar implica un previo bastante poco informativo; no es demasiado restrictivo en términos de los posibles valores que podrían adoptar los parámetros. Esto permite que los datos tengan más influencia durante la estimación de parámetros.\nDados los datos observados y las especificaciones de distribución previas, se pueden estimar los parámetros del modelo. Las distribuciones finales de los parámetros del modelo son combinaciones de las estimaciones previas y de probabilidad. Estas distribuciones posteriores de los parámetros son las distribuciones clave de interés. Son una descripción probabilística completa de los parámetros estimados del modelo.\nUn modelo de intersección aleatoria\nPara adaptar nuestro modelo ANOVA bayesiano de modo que las remuestras se modelen adecuadamente, consideramos un modelo de intersección aleatoria. Aquí, asumimos que los remuestreos impactan el modelo solo al cambiar la intersección. Tenga en cuenta que esto impide que los remuestreos tengan un impacto diferencial en los parámetros de regresión \\(\\beta_j\\); Se supone que estos tienen la misma relación entre remuestreos. Esta ecuación modelo es:\n\\[y_{ij} = (\\beta_0 + b_{i}) + \\beta_1x_{i1} + \\beta_2x_{i2} + \\beta_3x_{i3} + \\epsilon_{ij}\\]\nEste no es un modelo irrazonable para estadísticas remuestreadas que, cuando se trazan entre modelos como en Figura 11.2, tienden a tener efectos bastante paralelos entre modelos (es decir, poco cruce de líneas).\nPara la configuración de este modelo, se hace un supuesto adicional para la distribución previa de efectos aleatorios. Una suposición razonable para esta distribución es otra distribución simétrica, como otra curva en forma de campana. Dado el tamaño de muestra efectivo de 10 en nuestro resumen de datos estadísticos, usemos una distribución previa que sea más amplia que una distribución normal estándar. Usaremos una distribución t con un solo grado de libertad (es decir, \\(b_i \\sim t(1)\\)), que tiene colas más pesadas que una distribución gaussiana análoga.\nEl paquete tidyposterior tiene funciones para ajustarse a dichos modelos bayesianos con el fin de comparar modelos remuestreados. La función principal se llama perf_mod() y está configurada para “simplemente funcionar” para diferentes tipos de objetos:\n\nPara conjuntos de flujos de trabajo, crea un modelo ANOVA donde los grupos corresponden a los flujos de trabajo. Nuestros modelos existentes no optimizaron ningún parámetro de ajuste (consulte los siguientes tres capítulos). Si uno de los flujos de trabajo del conjunto tenía datos sobre parámetros de ajuste, en el análisis bayesiano se utilizan los mejores parámetros de ajuste establecidos para cada flujo de trabajo. En otras palabras, a pesar de la presencia de parámetros de ajuste, perf_mod() se centra en hacer comparaciones entre flujos de trabajo.\nPara los objetos que contienen un único modelo que ha sido ajustado usando remuestreo, perf_mod() hace comparaciones dentro del modelo. En esta situación, las variables de agrupación probadas en el modelo ANOVA bayesiano son los submodelos definidos por los parámetros de ajuste.\nLa función perf_mod() también puede tomar un marco de datos producido por rsample que tiene columnas de métricas de rendimiento asociadas con dos o más resultados de modelo/flujo de trabajo. Estos podrían haberse generado por medios no estándar.\n\nA partir de cualquiera de estos tipos de objetos, la función perf_mod() determina un modelo bayesiano apropiado y lo ajusta con las estadísticas de remuestreo. Para nuestro ejemplo, modelará los cuatro conjuntos de estadísticas \\(R^2\\) asociadas con los flujos de trabajo.\nEl paquete tidyposterior utiliza el software Stan para especificar y ajustar los modelos a través del paquete rstanarm. Las funciones dentro de ese paquete tienen prioridades predeterminadas (consulte ?priors para obtener más detalles). El siguiente modelo utiliza los valores previos predeterminados para todos los parámetros excepto para las intersecciones aleatorias (que siguen una distribución t). El proceso de estimación utiliza números aleatorios para que la semilla se establezca dentro de la llamada a la función. El proceso de estimación es iterativo y se replica varias veces en colecciones llamadas cadenas. El parámetro iter le dice a la función cuánto tiempo ejecutar el proceso de estimación en cada cadena. Cuando se utilizan varias cadenas, sus resultados se combinan (supongamos que esto está validado mediante evaluaciones diagnósticas).\n\nlibrary(tidyposterior)\nlibrary(rstanarm)\n\n# El paquete rstanarm genera grandes cantidades de producción; esos resultados\n# no se muestran aquí, pero vale la pena inspeccionarlos para detectar posibles problemas. El\n# opción `refresh = 0` se puede utilizar para eliminar el registro.. \nrsq_anova &lt;-\n  perf_mod(\n    four_models,\n    metric = \"rsq\",\n    prior_intercept = rstanarm::student_t(df = 1),\n    chains = 4,\n    iter = 5000,\n    seed = 1102\n  )\n\nEl objeto resultante tiene información sobre el proceso de remuestreo, así como el objeto Stan incrustado en él (en un elemento llamado “stan”). Lo que más nos interesa son las distribuciones posteriores de los parámetros de regresión. El paquete tidyposterior tiene un método tidy() que extrae estas distribuciones posteriores en un tibble:\n\nmodel_post &lt;- \n  rsq_anova %&gt;% \n  # Tomaa una muestra aleatoria de la distribución posterior\n  # así que se configura la semilla nuevamente para que sea reproducible. \n  tidy(seed = 1103) \n\nglimpse(model_post)\n## Rows: 40,000\n## Columns: 2\n## $ model     &lt;chr&gt; \"random_forest\", \"basic_lm\", \"interact_lm\", \"splines_lm\", \"rando…\n## $ posterior &lt;dbl&gt; 0.8342, 0.7916, 0.7988, 0.8015, 0.8393, 0.7976, 0.7981, 0.8089, …\n\nLas cuatro distribuciones posteriores se visualizan en Figura 11.3.\n\nmodel_post %&gt;% \n  mutate(model = forcats::fct_inorder(model)) %&gt;%\n  ggplot(aes(x = posterior)) + \n  geom_histogram(bins = 50, color = \"white\", fill = \"blue\", alpha = 0.4) + \n  facet_wrap(~ model, ncol = 1)\n\n\n\n\n\nFigura 11.3: Distribuciones posteriores del coeficiente de determinación utilizando cuatro modelos diferentes.\n\n\n\nEstos histogramas describen las distribuciones de probabilidad estimadas del valor medio \\(R^2\\) para cada modelo. Existe cierta superposición, especialmente para los tres modelos lineales.\nTambién hay un método básico autoplot() para los resultados del modelo, que se muestra en Figura 11.4, así como el objeto ordenado que muestra gráficos de densidad superpuestos.\n\nautoplot(rsq_anova) +\n  geom_text_repel(aes(label = workflow), nudge_x = 1/8, nudge_y = 1/100) +\n  theme(legend.position = \"none\")\n\n\n\n\n\nFigura 11.4: Intervalos creíbles derivados de las distribuciones posteriores del modelo.\n\n\n\nUn aspecto maravilloso del uso del remuestreo con modelos bayesianos es que, una vez que tenemos los parámetros posteriores, es trivial obtener las distribuciones posteriores para las combinaciones de los parámetros. Por ejemplo, para comparar los dos modelos de regresión lineal, nos interesa la diferencia de medias. La parte posterior de esta diferencia se calcula tomando muestras de las partes posteriores individuales y tomando las diferencias. La función contrast_models() puede hacer esto. Para especificar las comparaciones a realizar, los parámetros list_1 y list_2 toman vectores de caracteres y calculan las diferencias entre los modelos en esas listas (parametrizados como list_1 - list_2).\nPodemos comparar dos de los modelos lineales y visualizar los resultados en Figura 11.5.\n\nrqs_diff &lt;-\n  contrast_models(rsq_anova,\n                  list_1 = \"splines_lm\",\n                  list_2 = \"basic_lm\",\n                  seed = 1104)\n\nrqs_diff %&gt;% \n  as_tibble() %&gt;% \n  ggplot(aes(x = difference)) + \n  geom_vline(xintercept = 0, lty = 2) + \n  geom_histogram(bins = 50, color = \"white\", fill = \"red\", alpha = 0.4)\n\n\n\n\n\nFigura 11.5: Distribución posterior de la diferencia en el coeficiente de determinación.\n\n\n\nLa parte posterior muestra que el centro de la distribución es mayor que cero (lo que indica que el modelo con splines normalmente tenía valores más grandes) pero se superpone con cero hasta cierto punto. El método summary() para este objeto calcula la media de la distribución así como los intervalos creíbles, el análogo bayesiano de los intervalos de confianza.\n\nsummary(rqs_diff) %&gt;% \n  select(-starts_with(\"pract\"))\n## # A tibble: 1 × 6\n##   contrast               probability    mean   lower  upper  size\n##   &lt;chr&gt;                        &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n## 1 splines_lm vs basic_lm        1.00 0.00919 0.00510 0.0132     0\n\nLa columna probability refleja la proporción del posterior que es mayor que cero. Ésta es la probabilidad de que la diferencia positiva sea real. El valor no es cercano a cero, lo que proporciona un fuerte argumento a favor de la significancia estadística, es decir, la idea de que estadísticamente la diferencia real no es cero.\nSin embargo, la estimación de la diferencia de medias es bastante cercana a cero. Recuerde que el tamaño del efecto práctico que sugerimos anteriormente es del 2%. Con una distribución posterior, también podemos calcular la probabilidad de que sea prácticamente significativo. En el análisis bayesiano, esta es una estimación ROPE (para Región de equivalencia práctica, Kruschke y Liddell (2018)). Para estimar esto, se utiliza la opción size de la función de summary:\n\nsummary(rqs_diff, size = 0.02) %&gt;% \n  select(contrast, starts_with(\"pract\"))\n## # A tibble: 1 × 4\n##   contrast               pract_neg pract_equiv pract_pos\n##   &lt;chr&gt;                      &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n## 1 splines_lm vs basic_lm         0        1.00    0.0001\n\nLa columna pract_equiv es la proporción del posterior que está dentro de [-size, size] (las columnas pract_neg y pract_pos son las proporciones que están debajo y encima de este intervalo). Este gran valor indica que, para nuestro tamaño del efecto, existe una probabilidad abrumadora de que los dos modelos sean prácticamente iguales. Aunque el gráfico anterior mostró que nuestra diferencia probablemente sea distinta de cero, la prueba de equivalencia sugiere que es lo suficientemente pequeña como para no ser significativa en la práctica.\nSe podría utilizar el mismo proceso para comparar el modelo de random forest con una o ambas regresiones lineales que se volvieron a muestrear. De hecho, cuando se usa perf_mod() con un conjunto de flujo de trabajo, el método autoplot() puede mostrar los resultados de pract_equiv que comparan cada flujo de trabajo con el mejor actual (el modelo de bosque aleatorio, en este caso).\n\nautoplot(rsq_anova, type = \"ROPE\", size = 0.02) +\n  geom_text_repel(aes(label = workflow)) +\n  theme(legend.position = \"none\")\n\n\n\n\n\nFigura 11.6: Probabilidad de equivalencia práctica para un tamaño del efecto del 2%\n\n\n\nFigura 11.6 nos muestra que ninguno de los modelos lineales se acerca al modelo de random forest cuando se utiliza un tamaño de efecto práctico del 2%.\nEl efecto de la cantidad de remuestreo.\n¿Cómo afecta el número de remuestreos a estos tipos de comparaciones bayesianas formales? Más remuestreos aumentan la precisión de la estimación general del remuestreo; esa precisión se propaga a este tipo de análisis. A modo de ilustración, se agregaron nuevas muestras adicionales mediante validación cruzada repetida. ¿Cómo cambió la distribución posterior? Figura 11.7 muestra los intervalos de credibilidad del 90% con hasta 100 remuestreos (generados a partir de 10 repeticiones de validación cruzada 10 veces).1\n\nggplot(intervals,\n       aes(x = resamples, y = mean)) +\n  geom_path() +\n  geom_ribbon(aes(ymin = lower, ymax = upper), fill = \"red\", alpha = .1) +\n  labs(x = \"Número de remuestras (validación cruzada repetida 10 veces)\")\n\n\n\n\n\nFigura 11.7: Probabilidad de equivalencia práctica con el modelo de bosque aleatorio.\n\n\n\nEl ancho de los intervalos disminuye a medida que se agregan más muestras. Claramente, pasar de diez remuestreos a treinta tiene un impacto mayor que pasar de ochenta a 100. Hay rendimientos decrecientes por utilizar un número “grande” de remuestreos (“grande” será diferente para diferentes conjuntos de datos)."
  },
  {
    "objectID": "11-comparing-models.html#sec-compare-summary",
    "href": "11-comparing-models.html#sec-compare-summary",
    "title": "11  Comparación de Modelos con Remuestreo",
    "section": "\n11.5 Resumen del capítulo",
    "text": "11.5 Resumen del capítulo\nEste capítulo describió métodos estadísticos formales para probar diferencias en el rendimiento entre modelos. Demostramos el efecto dentro de la nueva muestra, donde los resultados para la misma nueva muestra tienden a ser similares; este aspecto de las estadísticas resumidas remuestreadas requiere un análisis apropiado para realizar comparaciones de modelos válidas. Además, aunque la significación estadística y la significancia práctica son conceptos importantes para las comparaciones de modelos, son diferentes.\n\n\n\n\nFaraway, J. 2016. Extending the linear model with R: generalized linear, mixed effects and nonparametric regression models. CRC press.\n\n\nKruschke, J, y T Liddell. 2018. «The Bayesian New Statistics: Hypothesis testing, estimation, meta-analysis, and power analysis from a Bayesian perspective». Psychonomic Bulletin and Review 25 (1): 178-206.\n\n\nMcElreath, R. 2020. Statistical rethinking: A Bayesian course with examples in R and Stan. CRC press.\n\n\nWasserstein, R, y N Lazar. 2016. «The ASA statement on p-values: Context, process, and purpose». The American Statistician 70 (2): 129-33."
  },
  {
    "objectID": "11-comparing-models.html#footnotes",
    "href": "11-comparing-models.html#footnotes",
    "title": "11  Comparación de Modelos con Remuestreo",
    "section": "",
    "text": "El código para generar intervalos está disponible en https://github.com/tidymodels/TMwR/blob/main/extras/ames_posterior_intervals.R.↩︎"
  },
  {
    "objectID": "12-tuning-parameters.html#model-parameters",
    "href": "12-tuning-parameters.html#model-parameters",
    "title": "12  Model Tuning and the Dangers of Overfitting",
    "section": "\n12.1 Model Parameters",
    "text": "12.1 Model Parameters\nIn ordinary linear regression, there are two parameters \\(\\beta_0\\) and \\(\\beta_1\\) of the model:\n\\[ y_i = \\beta_0 + \\beta_1 x_i + \\epsilon_i\\]\nWhen we have the outcome (\\(y\\)) and predictor (\\(x\\)) data, we can estimate the two parameters \\(\\beta_0\\) and \\(\\beta_1\\):\n\\[\\hat \\beta_1 = \\frac{\\sum_i (y_i-\\bar{y})(x_i-\\bar{x})}{\\sum_i(x_i-\\bar{x})^2}\\]\nand\n\\[\\hat \\beta_0 = \\bar{y}-\\hat \\beta_1 \\bar{x}.\\]\nWe can directly estimate these values from the data for this example model because they are analytically tractable; if we have the data, then we can estimate these model parameters.\n\nThere are many situations where a model has parameters that can’t be directly estimated from the data.\n\nFor the KNN model, the prediction equation for a new value \\(x_0\\) is\n\\[\\hat y = \\frac{1}{K}\\sum_{\\ell = 1}^K x_\\ell^*\\]\nwhere \\(K\\) is the number of neighbors and the \\(x_\\ell^*\\) are the \\(K\\) closest values to \\(x_0\\) in the training set. The model itself is not defined by a model equation; the previous prediction equation instead defines it. This characteristic, along with the possible intractability of the distance measure, makes it impossible to create a set of equations that can be solved for \\(K\\) (iteratively or otherwise). The number of neighbors has a profound impact on the model; it governs the flexibility of the class boundary. For small values of \\(K\\), the boundary is very elaborate while for large values, it might be quite smooth.\nThe number of nearest neighbors is a good example of a tuning parameter or hyperparameter that cannot be directly estimated from the data."
  },
  {
    "objectID": "12-tuning-parameters.html#tuning-parameter-examples",
    "href": "12-tuning-parameters.html#tuning-parameter-examples",
    "title": "12  Model Tuning and the Dangers of Overfitting",
    "section": "\n12.2 Tuning Parameters for Different Types of Models",
    "text": "12.2 Tuning Parameters for Different Types of Models\nThere are many examples of tuning parameters or hyperparameters in different statistical and machine learning models:\n\nBoosting is an ensemble method that combines a series of base models, each of which is created sequentially and depends on the previous models. The number of boosting iterations is an important tuning parameter that usually requires optimization.\nIn the classic single-layer artificial neural network (a.k.a. the multilayer perceptron), the predictors are combined using two or more hidden units. The hidden units are linear combinations of the predictors that are captured in an activation function (typically a nonlinear function, such as a sigmoid). The hidden units are then connected to the outcome units; one outcome unit is used for regression models, and multiple outcome units are required for classification. The number of hidden units and the type of activation function are important structural tuning parameters.\nModern gradient descent methods are improved by finding the right optimization parameters. Examples of such hyperparameters are learning rates, momentum, and the number of optimization iterations/epochs (Goodfellow, Bengio, and Courville 2016). Neural networks and some ensemble models use gradient descent to estimate the model parameters. While the tuning parameters associated with gradient descent are not structural parameters, they often require tuning.\n\nIn some cases, preprocessing techniques require tuning:\n\nIn principal component analysis, or its supervised cousin called partial least squares, the predictors are replaced with new, artificial features that have better properties related to collinearity. The number of extracted components can be tuned.\nImputation methods estimate missing predictor values using the complete values of one or more predictors. One effective imputation tool uses \\(K\\)-nearest neighbors of the complete columns to predict the missing value. The number of neighbors modulates the amount of averaging and can be tuned.\n\nSome classical statistical models also have structural parameters:\n\nIn binary regression, the logit link is commonly used (i.e., logistic regression). Other link functions, such as the probit and complementary log-log, are also available (Dobson 1999). This example is described in more detail in the ?sec-what-to-optimize.\nNon-Bayesian longitudinal and repeated measures models require a specification for the covariance or correlation structure of the data. Options include compound symmetric (a.k.a. exchangeable), autoregressive, Toeplitz, and others (Littell, Pendergast, and Natarajan 2000).\n\nA counterexample where it is inappropriate to tune a parameter is the prior distribution required for Bayesian analysis. The prior encapsulates the analyst’s belief about the distribution of a quantity before evidence or data are taken into account. For example, in Section 11.4, we used a Bayesian ANOVA model, and we were unclear about what the prior should be for the regression parameters (beyond being a symmetric distribution). We chose a t-distribution with one degree of freedom for the prior since it has heavier tails; this reflects our added uncertainty. Our prior beliefs should not be subject to optimization. Tuning parameters are typically optimized for performance whereas priors should not be tweaked to get “the right results.”\n\nAnother (perhaps more debatable) counterexample of a parameter that does not need to be tuned is the number of trees in a random forest or bagging model. This value should instead be chosen to be large enough to ensure numerical stability in the results; tuning it cannot improve performance as long as the value is large enough to produce reliable results. For random forests, this value is typically in the thousands while the number of trees needed for bagging is around 50 to 100."
  },
  {
    "objectID": "12-tuning-parameters.html#what-to-optimize",
    "href": "12-tuning-parameters.html#what-to-optimize",
    "title": "12  Model Tuning and the Dangers of Overfitting",
    "section": "\n12.3 What do we Optimize?",
    "text": "12.3 What do we Optimize?\nHow should we evaluate models when we optimize tuning parameters? It depends on the model and the purpose of the model.\nFor cases where the statistical properties of the tuning parameter are tractable, common statistical properties can be used as the objective function. For example, in the case of binary logistic regression, the link function can be chosen by maximizing the likelihood or information criteria. However, these statistical properties may not align with the results achieved using accuracy-oriented properties. As an example, Friedman (2001) optimized the number of trees in a boosted tree ensemble and found different results when maximizing the likelihood and accuracy:\n\ndegrading the likelihood by overfitting actually improves misclassification error rate. Although perhaps counterintuitive, this is not a contradiction; likelihood and error rate measure different aspects of fit quality.\n\nTo demonstrate, consider the classification data shown in Figure 12.1 with two predictors, two classes, and a training set of 593 data points.\n\n\n\n\nFigure 12.1: An example two-class classification data set with two predictors\n\n\n\nWe could start by fitting a linear class boundary to these data. The most common method for doing this is to use a generalized linear model in the form of logistic regression. This model relates the log odds of a sample being Class 1 using the logit transformation:\n\\[ \\log\\left(\\frac{\\pi}{1 - \\pi}\\right) = \\beta_0 + \\beta_1x_1 + \\ldots + \\beta_px_p\\]\nIn the context of generalized linear models, the logit function is the link function between the outcome (\\(\\pi\\)) and the predictors. There are other link functions that include the probit model:\n\\[\\Phi^{-1}(\\pi) = \\beta_0 + \\beta_1x_1 + \\ldots + \\beta_px_p\\]\nwhere \\(\\Phi\\) is the cumulative standard normal function, as well as the complementary log-log model:\n\\[\\log(-\\log(1-\\pi)) = \\beta_0 + \\beta_1x_1 + \\ldots + \\beta_px_p\\]\nEach of these models results in linear class boundaries. Which one should we use? Since, for these data, the number of model parameters does not vary, the statistical approach is to compute the (log) likelihood for each model and determine the model with the largest value. Traditionally, the likelihood is computed using the same data that were used to estimate the parameters, not using approaches like data splitting or resampling from Chapters 5 and 10.\nFor a data frame training_set, let’s create a function to compute the different models and extract the likelihood statistics for the training set (using broom::glance()):\n\nlibrary(tidymodels)\ntidymodels_prefer()\n\nllhood &lt;- function(...) {\n  logistic_reg() %&gt;% \n    set_engine(\"glm\", ...) %&gt;% \n    fit(Class ~ ., data = training_set) %&gt;% \n    glance() %&gt;% \n    select(logLik)\n}\n\nbind_rows(\n  llhood(),\n  llhood(family = binomial(link = \"probit\")),\n  llhood(family = binomial(link = \"cloglog\"))\n) %&gt;% \n  mutate(link = c(\"logit\", \"probit\", \"c-log-log\"))  %&gt;% \n  arrange(desc(logLik))\n## # A tibble: 3 × 2\n##   logLik link     \n##    &lt;dbl&gt; &lt;chr&gt;    \n## 1  -258. logit    \n## 2  -262. probit   \n## 3  -270. c-log-log\n\nAccording to these results, the logistic model has the best statistical properties.\nFrom the scale of the log-likelihood values, it is difficult to understand if these differences are important or negligible. One way of improving this analysis is to resample the statistics and separate the modeling data from the data used for performance estimation. With this small data set, repeated 10-fold cross-validation is a good choice for resampling. In the yardstick package, the mn_log_loss() function is used to estimate the negative log-likelihood, with our results shown in Figure 12.2.\n\nset.seed(1201)\nrs &lt;- vfold_cv(training_set, repeats = 10)\n\n# Return the individual resampled performance estimates:\nlloss &lt;- function(...) {\n  perf_meas &lt;- metric_set(roc_auc, mn_log_loss)\n    \n  logistic_reg() %&gt;% \n    set_engine(\"glm\", ...) %&gt;% \n    fit_resamples(Class ~ A + B, rs, metrics = perf_meas) %&gt;% \n    collect_metrics(summarize = FALSE) %&gt;%\n    select(id, id2, .metric, .estimate)\n}\n\nresampled_res &lt;- \n  bind_rows(\n    lloss()                                    %&gt;% mutate(model = \"logistic\"),\n    lloss(family = binomial(link = \"probit\"))  %&gt;% mutate(model = \"probit\"),\n    lloss(family = binomial(link = \"cloglog\")) %&gt;% mutate(model = \"c-log-log\")     \n  ) %&gt;%\n  # Convert log-loss to log-likelihood:\n  mutate(.estimate = ifelse(.metric == \"mn_log_loss\", -.estimate, .estimate)) %&gt;% \n  group_by(model, .metric) %&gt;% \n  summarize(\n    mean = mean(.estimate, na.rm = TRUE),\n    std_err = sd(.estimate, na.rm = TRUE) / sqrt(n()), \n    .groups = \"drop\"\n  )\n\nresampled_res %&gt;% \n  filter(.metric == \"mn_log_loss\") %&gt;% \n  ggplot(aes(x = mean, y = model)) + \n  geom_point() + \n  geom_errorbar(aes(xmin = mean - 1.64 * std_err, xmax = mean + 1.64 * std_err),\n                width = .1) + \n  labs(y = NULL, x = \"log-likelihood\")\n\n\n## → A | warning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n## There were issues with some computations   A: x1\n## There were issues with some computations   A: x1\n## \n\n\n\nFigure 12.2: Means and approximate 90% confidence intervals for the resampled binomial log-likelihood with three different link functions\n\n\n\n\nThe scale of these values is different than the previous values since they are computed on a smaller data set; the value produced by broom::glance() is a sum while yardstick::mn_log_loss() is an average.\n\nThese results exhibit evidence that the choice of the link function matters somewhat. Although there is an overlap in the confidence intervals, the logistic model has the best results.\nWhat about a different metric? We also calculated the area under the ROC curve for each resample. These results, which reflect the discriminative ability of the models across numerous probability thresholds, show a lack of difference in Figure 12.3.\n\n\n\n\nFigure 12.3: Means and approximate 90% confidence intervals for the resampled area under the ROC curve with three different link functions\n\n\n\nGiven the overlap of the intervals, as well as the scale of the x-axis, any of these options could be used. We see this again when the class boundaries for the three models are overlaid on the test set of 198 data points in Figure 12.4.\n\n\n\n\nFigure 12.4: The linear class boundary fits for three link functions\n\n\n\n\nThis exercise emphasizes that different metrics might lead to different decisions about the choice of tuning parameter values. In this case, one metric indicates the models are somewhat different while another metric shows no difference at all.\n\nMetric optimization is thoroughly discussed by Thomas and Uminsky (2020) who explore several issues, including the gaming of metrics. They warn that:\n\nThe unreasonable effectiveness of metric optimization in current AI approaches is a fundamental challenge to the field, and yields an inherent contradiction: solely optimizing metrics leads to far from optimal outcomes."
  },
  {
    "objectID": "12-tuning-parameters.html#overfitting-bad",
    "href": "12-tuning-parameters.html#overfitting-bad",
    "title": "12  Model Tuning and the Dangers of Overfitting",
    "section": "\n12.4 The consequences of poor parameter estimates",
    "text": "12.4 The consequences of poor parameter estimates\nMany tuning parameters modulate the amount of model complexity. More complexity often implies more malleability in the patterns that a model can emulate. For example, as shown in ?sec-spline-functions, adding degrees of freedom in a spline function increases the intricacy of the prediction equation. While this is an advantage when the underlying motifs in the data are complex, it can also lead to overinterpretation of chance patterns that would not reproduce in new data. Overfitting is the situation where a model adapts too much to the training data; it performs well for the data used to build the model but poorly for new data.\n\nSince tuning model parameters can increase model complexity, poor choices can lead to overfitting.\n\nRecall the single layer neural network model described in ?sec-tuning-parameter-examples. With a single hidden unit and sigmoidal activation functions, a neural network for classification is, for all intents and purposes, just logistic regression. However, as the number of hidden units increases, so does the complexity of the model. In fact, when the network model uses sigmoidal activation units, Cybenko (1989) showed that the model is a universal function approximator as long as there are enough hidden units.\nWe fit neural network classification models to the same two-class data from the previous section, varying the number of hidden units. Using the area under the ROC curve as a performance metric, the effectiveness of the model on the training set increases as more hidden units are added. The network model thoroughly and meticulously learns the training set. If the model judges itself on the training set ROC value, it prefers many hidden units so that it can nearly eliminate errors.\nChapters 5 and 10 demonstrated that simply repredicting the training set is a poor approach to model evaluation. Here, the neural network very quickly begins to overinterpret patterns that it sees in the training set. Compare these three example class boundaries (developed with the training set) overlaid on training and test sets in ?fig-two-class-boundaries.\n\n\n\n\nClass boundaries for three models with increasing numbers of hidden units. The boundaries are fit on the training set and shown for the training and test sets.\n\n\n\nThe single unit model does not adapt very flexibly to the data (since it is constrained to be linear). A model with four hidden units begins to show signs of overfitting with an unrealistic boundary for values away from the data mainstream. This is caused by a single data point from the first class in the upper-right corner of the data. By 20 hidden units, the model is beginning to memorize the training set, creating small islands around those data to minimize the resubstitution error rate. These patterns do not repeat in the test set. This last panel is the best illustration of how tuning parameters that control complexity must be modulated so that the model is effective. For a 20-unit model, the training set ROC AUC is 0.945 but the test set value is 0.847.\nThis occurrence of overfitting is obvious with two predictors that we can plot. However, in general, we must use a quantitative approach for detecting overfitting.\n\nThe solution for detecting when a model is overemphasizing the training set is using out-of-sample data.\n\nRather than using the test set, some form of resampling is required. This could mean an iterative approach (e.g., 10-fold cross-validation) or a single data source (e.g., a validation set)."
  },
  {
    "objectID": "12-tuning-parameters.html#two-general-strategies-for-optimization",
    "href": "12-tuning-parameters.html#two-general-strategies-for-optimization",
    "title": "12  Model Tuning and the Dangers of Overfitting",
    "section": "\n12.5 Two general strategies for optimization",
    "text": "12.5 Two general strategies for optimization\nTuning parameter optimization usually falls into one of two categories: grid search and iterative search.\nGrid search is when we predefine a set of parameter values to evaluate. The main choices involved in grid search are how to make the grid and how many parameter combinations to evaluate. Grid search is often judged as inefficient since the number of grid points required to cover the parameter space can become unmanageable with the curse of dimensionality. There is truth to this concern, but it is most true when the process is not optimized. This is discussed more in Chapter 13.\nIterative search or sequential search is when we sequentially discover new parameter combinations based on previous results. Almost any nonlinear optimization method is appropriate, although some are more efficient than others. In some cases, an initial set of results for one or more parameter combinations is required to start the optimization process. Iterative search is discussed more in Chapter 14.\nFigure 12.6 shows two panels that demonstrate these two approaches for a situation with two tuning parameters that range between zero and one. In each, a set of contours shows the true (simulated) relationship between the parameters and the outcome. The optimal results are in the upper-right-hand corners.\n\n\n\n\nFigure 12.6: Examples of pre-defined grid tuning and an iterative search method. The lines represent contours of a performance metric; it is best in the upper-right-hand side of the plot.\n\n\n\nThe left-hand panel of Figure 12.6 shows a type of grid called a space-filling design. This is a type of experimental design devised for covering the parameter space such that tuning parameter combinations are not close to one another. The results for this design do not place any points exactly at the truly optimal location. However, one point is in the general vicinity and would probably have performance metric results that are within the noise of the most optimal value.\nThe right-hand panel of Figure 12.6 illustrates the results of a global search method: the Nelder-Mead simplex method (Olsson and Nelson 1975). The starting point is in the lower-left part of the parameter space. The search meanders across the space until it reaches the optimum location, where it strives to come as close as possible to the numerically best value. This particular search method, while effective, is not known for its efficiency; it requires many function evaluations, especially near the optimal values. Chapter 14 discusses more efficient search algorithms.\n\nHybrid strategies are also an option and can work well. After an initial grid search, a sequential optimization can start from the best grid combination.\n\nExamples of these strategies are discussed in detail in the next two chapters. Before moving on, let’s learn how to work with tuning parameter objects in tidymodels, using the dials package."
  },
  {
    "objectID": "12-tuning-parameters.html#tuning-params-tidymodels",
    "href": "12-tuning-parameters.html#tuning-params-tidymodels",
    "title": "12  Model Tuning and the Dangers of Overfitting",
    "section": "\n12.6 Tuning Parameters in tidymodels",
    "text": "12.6 Tuning Parameters in tidymodels\nWe’ve already dealt with quite a number of arguments that correspond to tuning parameters for recipe and model specifications in previous chapters. It is possible to tune:\n\nthe threshold for combining neighborhoods into an “other” category (with argument name threshold) discussed in Section 8.4.1\nthe number of degrees of freedom in a natural spline (deg_free, ?sec-spline-functions)\nthe number of data points required to execute a split in a tree-based model (min_n, ?sec-create-a-model)\nthe amount of regularization in penalized models (penalty, ?sec-create-a-model)\n\nFor parsnip model specifications, there are two kinds of parameter arguments. Main arguments are those that are most often optimized for performance and are available in multiple engines. The main tuning parameters are top-level arguments to the model specification function. For example, the rand_forest() function has main arguments trees, min_n, and mtry since these are most frequently specified or optimized.\nA secondary set of tuning parameters are engine specific. These are either infrequently optimized or are specific only to certain engines. Again using random forests as an example, the ranger package contains some arguments that are not used by other packages. One example is gain penalization, which regularizes the predictor selection in the tree induction process. This parameter can help modulate the trade-off between the number of predictors used in the ensemble and performance (Wundervald, Parnell, and Domijan 2020). The name of this argument in ranger() is regularization.factor. To specify a value via a parsnip model specification, it is added as a supplemental argument to set_engine():\n\nrand_forest(trees = 2000, min_n = 10) %&gt;%                   # &lt;- main arguments\n  set_engine(\"ranger\", regularization.factor = 0.5)         # &lt;- engine-specific\n\n\nThe main arguments use a harmonized naming system to remove inconsistencies across engines while engine-specific arguments do not.\n\nHow can we signal to tidymodels functions which arguments should be optimized? Parameters are marked for tuning by assigning them a value of tune(). For the single layer neural network used in ?sec-overfitting-bad, the number of hidden units is designated for tuning using:\n\nneural_net_spec &lt;- \n  mlp(hidden_units = tune()) %&gt;%\n  set_mode(\"regression\") %&gt;%\n  set_engine(\"keras\")\n\nThe tune() function doesn’t execute any particular parameter value; it only returns an expression:\n\ntune()\n## tune()\n\nEmbedding this tune() value in an argument will tag the parameter for optimization. The model tuning functions shown in the next two chapters parse the model specification and/or recipe to discover the tagged parameters. These functions can automatically configure and process these parameters since they understand their characteristics (e.g., the range of possible values, etc.).\nTo enumerate the tuning parameters for an object, use the extract_parameter_set_dials() function:\n\nextract_parameter_set_dials(neural_net_spec)\n## Collection of 1 parameters for tuning\n## \n##    identifier         type    object\n##  hidden_units hidden_units nparam[+]\n\nThe results show a value of nparam[+], indicating that the number of hidden units is a numeric parameter.\nThere is an optional identification argument that associates a name with the parameters. This can come in handy when the same kind of parameter is being tuned in different places. For example, with the Ames housing data from Section 10.6, the recipe encoded both longitude and latitude with spline functions. If we want to tune the two spline functions to potentially have different levels of smoothness, we call step_ns() twice, once for each predictor. To make the parameters identifiable, the identification argument can take any character string:\n\names_rec &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n           Latitude + Longitude, data = ames_train)  %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_other(Neighborhood, threshold = tune()) %&gt;% \n  step_dummy(all_nominal_predictors()) %&gt;% \n  step_interact( ~ Gr_Liv_Area:starts_with(\"Bldg_Type_\") ) %&gt;% \n  step_ns(Longitude, deg_free = tune(\"longitude df\")) %&gt;% \n  step_ns(Latitude,  deg_free = tune(\"latitude df\"))\n\nrecipes_param &lt;- extract_parameter_set_dials(ames_rec)\nrecipes_param\n## Collection of 3 parameters for tuning\n## \n##    identifier      type    object\n##     threshold threshold nparam[+]\n##  longitude df  deg_free nparam[+]\n##   latitude df  deg_free nparam[+]\n\nNote that the identifier and type columns are not the same for both of the spline parameters.\nWhen a recipe and model specification are combined using a workflow, both sets of parameters are shown:\n\nwflow_param &lt;- \n  workflow() %&gt;% \n  add_recipe(ames_rec) %&gt;% \n  add_model(neural_net_spec) %&gt;% \n  extract_parameter_set_dials()\nwflow_param\n## Collection of 4 parameters for tuning\n## \n##    identifier         type    object\n##  hidden_units hidden_units nparam[+]\n##     threshold    threshold nparam[+]\n##  longitude df     deg_free nparam[+]\n##   latitude df     deg_free nparam[+]\n\n\nNeural networks are exquisitely capable of emulating nonlinear patterns. Adding spline terms to this type of model is unnecessary; we combined this model and recipe for illustration only.\n\nEach tuning parameter argument has a corresponding function in the dials package. In the vast majority of the cases, the function has the same name as the parameter argument:\n\nhidden_units()\n## # Hidden Units (quantitative)\n## Range: [1, 10]\nthreshold()\n## Threshold (quantitative)\n## Range: [0, 1]\n\nThe deg_free parameter is a counterexample; the notion of degrees of freedom comes up in a variety of different contexts. When used with splines, there is a specialized dials function called spline_degree() that is, by default, invoked for splines:\n\nspline_degree()\n## Spline Degrees of Freedom (quantitative)\n## Range: [1, 10]\n\nThe dials package also has a convenience function for extracting a particular parameter object:\n\n# identify the parameter using the id value:\nwflow_param %&gt;% extract_parameter_dials(\"threshold\")\n## Threshold (quantitative)\n## Range: [0, 0.1]\n\nInside the parameter set, the range of the parameters can also be updated in place:\n\nextract_parameter_set_dials(ames_rec) %&gt;% \n  update(threshold = threshold(c(0.8, 1.0)))\n## Collection of 3 parameters for tuning\n## \n##    identifier      type    object\n##     threshold threshold nparam[+]\n##  longitude df  deg_free nparam[+]\n##   latitude df  deg_free nparam[+]\n\nThe parameter sets created by extract_parameter_set_dials() are consumed by the tidymodels tuning functions (when needed). If the defaults for the tuning parameter objects require modification, a modified parameter set is passed to the appropriate tuning function.\n\nSome tuning parameters depend on the dimensions of the data. For example, the number of nearest neighbors must be between one and the number of rows in the data.\n\nIn some cases, it is easy to have reasonable defaults for the range of possible values. In other cases, the parameter range is critical and cannot be assumed. The primary tuning parameter for random forest models is the number of predictor columns that are randomly sampled for each split in the tree, usually denoted as mtry(). Without knowing the number of predictors, this parameter range cannot be preconfigured and requires finalization.\n\nrf_spec &lt;- \n  rand_forest(mtry = tune()) %&gt;% \n  set_engine(\"ranger\", regularization.factor = tune(\"regularization\")) %&gt;%\n  set_mode(\"regression\")\n\nrf_param &lt;- extract_parameter_set_dials(rf_spec)\nrf_param\n## Collection of 2 parameters for tuning\n## \n##      identifier                  type    object\n##            mtry                  mtry nparam[?]\n##  regularization regularization.factor nparam[+]\n## \n## Model parameters needing finalization:\n##    # Randomly Selected Predictors ('mtry')\n## \n## See `?dials::finalize` or `?dials::update.parameters` for more information.\n\nComplete parameter objects have [+] in their summary; a value of [?] indicates that at least one end of the possible range is missing. There are two methods for handling this. The first is to use update(), to add a range based on what you know about the data dimensions:\n\nrf_param %&gt;% \n  update(mtry = mtry(c(1, 70)))\n## Collection of 2 parameters for tuning\n## \n##      identifier                  type    object\n##            mtry                  mtry nparam[+]\n##  regularization regularization.factor nparam[+]\n\nHowever, this approach might not work if a recipe is attached to a workflow that uses steps that either add or subtract columns. If those steps are not slated for tuning, the finalize() function can execute the recipe once to obtain the dimensions:\n\npca_rec &lt;- \n  recipe(Sale_Price ~ ., data = ames_train) %&gt;% \n  # Select the square-footage predictors and extract their PCA components:\n  step_normalize(contains(\"SF\")) %&gt;% \n  # Select the number of components needed to capture 95% of\n  # the variance in the predictors. \n  step_pca(contains(\"SF\"), threshold = .95)\n  \nupdated_param &lt;- \n  workflow() %&gt;% \n  add_model(rf_spec) %&gt;% \n  add_recipe(pca_rec) %&gt;% \n  extract_parameter_set_dials() %&gt;% \n  finalize(ames_train)\nupdated_param\n## Collection of 2 parameters for tuning\n## \n##      identifier                  type    object\n##            mtry                  mtry nparam[+]\n##  regularization regularization.factor nparam[+]\nupdated_param %&gt;% extract_parameter_dials(\"mtry\")\n## # Randomly Selected Predictors (quantitative)\n## Range: [1, 74]\n\nWhen the recipe is prepared, the finalize() function learns to set the upper range of mtry to 74 predictors.\nAdditionally, the results of extract_parameter_set_dials() will include engine-specific parameters (if any). They are discovered in the same way as the main arguments and included in the parameter set. The dials package contains parameter functions for all potentially tunable engine-specific parameters:\n\nrf_param\n## Collection of 2 parameters for tuning\n## \n##      identifier                  type    object\n##            mtry                  mtry nparam[?]\n##  regularization regularization.factor nparam[+]\n## \n## Model parameters needing finalization:\n##    # Randomly Selected Predictors ('mtry')\n## \n## See `?dials::finalize` or `?dials::update.parameters` for more information.\nregularization_factor()\n## Gain Penalization (quantitative)\n## Range: [0, 1]\n\nFinally, some tuning parameters are best associated with transformations. A good example of this is the penalty parameter associated with many regularized regression models. This parameter is nonnegative and it is common to vary its values in log units. The primary dials parameter object indicates that a transformation is used by default:\n\npenalty()\n## Amount of Regularization (quantitative)\n## Transformer: log-10 [1e-100, Inf]\n## Range (transformed scale): [-10, 0]\n\nThis is important to know, especially when altering the range. New range values must be in the transformed units:\n\n# correct method to have penalty values between 0.1 and 1.0\npenalty(c(-1, 0)) %&gt;% value_sample(1000) %&gt;% summary()\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   0.101   0.181   0.327   0.400   0.589   0.999\n\n# incorrect:\npenalty(c(0.1, 1.0)) %&gt;% value_sample(1000) %&gt;% summary()\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##    1.26    2.21    3.68    4.26    5.89   10.00\n\nThe scale can be changed if desired with the trans argument. You can use natural units but the same range:\n\npenalty(trans = NULL, range = 10^c(-10, 0))\n## Amount of Regularization (quantitative)\n## Range: [1e-10, 1]"
  },
  {
    "objectID": "12-tuning-parameters.html#chapter-summary",
    "href": "12-tuning-parameters.html#chapter-summary",
    "title": "12  Model Tuning and the Dangers of Overfitting",
    "section": "\n12.7 Chapter Summary",
    "text": "12.7 Chapter Summary\nThis chapter introduced the process of tuning model hyperparameters that cannot be directly estimated from the data. Tuning such parameters can lead to overfitting, often by allowing a model to grow overly complex, so using resampled data sets together with appropriate metrics for evaluation is important. There are two general strategies for determining the right values, grid search and iterative search, which we will explore in depth in the next two chapters. In tidymodels, the tune() function is used to identify parameters for optimization, and functions from the dials package can extract and interact with tuning parameters objects.\n\n\n\n\nCybenko, G. 1989. “Approximation by Superpositions of a Sigmoidal Function.” Mathematics of Control, Signals and Systems 2 (4): 303–14.\n\n\nDobson, A. 1999. An Introduction to Generalized Linear Models. Chapman; Hall: Boca Raton.\n\n\nFriedman, J. 2001. “Greedy Function Approximation: A Gradient Boosting Machine.” Annals of Statistics 29 (5): 1189–1232.\n\n\nGoodfellow, I, Y Bengio, and A Courville. 2016. Deep Learning. MIT Press.\n\n\nLittell, R, J Pendergast, and R Natarajan. 2000. “Modelling Covariance Structure in the Analysis of Repeated Measures Data.” Statistics in Medicine 19 (13): 1793–1819.\n\n\nOlsson, D, and L Nelson. 1975. “The Nelder-Mead Simplex Procedure for Function Minimization.” Technometrics 17 (1): 45–51.\n\n\nThomas, R, and D Uminsky. 2020. “The Problem with Metrics Is a Fundamental Problem for AI.” https://arxiv.org/abs/2002.08512.\n\n\nWundervald, B, A Parnell, and K Domijan. 2020. “Generalizing Gain Penalization for Feature Selection in Tree-Based Models.” https://arxiv.org/abs/2006.07515."
  },
  {
    "objectID": "14-iterative-search.html#sec-svm",
    "href": "14-iterative-search.html#sec-svm",
    "title": "14  Iterative Search",
    "section": "\n14.1 A Support Vector Machine Model",
    "text": "14.1 A Support Vector Machine Model\nWe once again use the cell segmentation data, described in Section 13.2, for modeling, with a support vector machine (SVM) model to demonstrate sequential tuning methods. See Kuhn and Johnson (2013) for more information on this model. The two tuning parameters to optimize are the SVM cost value and the radial basis function kernel parameter \\(\\sigma\\). Both parameters can have a profound effect on the model complexity and performance.\nThe SVM model uses a dot product and, for this reason, it is necessary to center and scale the predictors. Like the multilayer perceptron model, this model would benefit from the use of PCA feature extraction. However, we will not use this third tuning parameter in this chapter so that we can visualize the search process in two dimensions.\nAlong with the previously used objects (shown in Section 13.6), the tidymodels objects svm_rec, svm_spec, and svm_wflow define the model process:\n\nlibrary(tidymodels)\ntidymodels_prefer()\n\nsvm_rec &lt;- \n  recipe(class ~ ., data = cells) %&gt;%\n  step_YeoJohnson(all_numeric_predictors()) %&gt;%\n  step_normalize(all_numeric_predictors())\n\nsvm_spec &lt;- \n  svm_rbf(cost = tune(), rbf_sigma = tune()) %&gt;% \n  set_engine(\"kernlab\") %&gt;% \n  set_mode(\"classification\")\n\nsvm_wflow &lt;- \n  workflow() %&gt;% \n  add_model(svm_spec) %&gt;% \n  add_recipe(svm_rec)\n\nThe default parameter ranges for the two tuning parameters cost and rbf_sigma are:\n\ncost()\n## Cost (quantitative)\n## Transformer: log-2 [1e-100, Inf]\n## Range (transformed scale): [-10, 5]\nrbf_sigma()\n## Radial Basis Function sigma (quantitative)\n## Transformer: log-10 [1e-100, Inf]\n## Range (transformed scale): [-10, 0]\n\nFor illustration, let’s slightly change the kernel parameter range, to improve the visualizations of the search:\n\nsvm_param &lt;- \n  svm_wflow %&gt;% \n  extract_parameter_set_dials() %&gt;% \n  Matrix::update(rbf_sigma = rbf_sigma(c(-7, -1)))\n\nBefore discussing specific details about iterative search and how it works, let’s explore the relationship between the two SVM tuning parameters and the area under the ROC curve for this specific data set. We constructed a very large regular grid, composed of 2,500 candidate values, and evaluated the grid using resampling. This is obviously impractical in regular data analysis and tremendously inefficient. However, it elucidates the path that the search process should take and where the numerically optimal value(s) occur.\nFigure 14.1 shows the results of evaluating this grid, with lighter color corresponding to higher (better) model performance. There is a large swath in the lower diagonal of the parameter space that is relatively flat with poor performance. A ridge of best performance occurs in the upper-right portion of the space. The black dot indicates the best settings. The transition from the plateau of poor results to the ridge of best performance is very sharp. There is also a sharp drop in the area under the ROC curve just to the right of the ridge.\n\n\n\n\nFigure 14.1: Heatmap of the mean area under the ROC curve for a high density grid of tuning parameter values. The best point is a solid dot in the upper-right corner.\n\n\n\nThe following search procedures require at least some resampled performance statistics before proceeding. For this purpose, the following code creates a small regular grid that resides in the flat portion of the parameter space. The tune_grid() function resamples this grid:\n\nset.seed(1401)\nstart_grid &lt;- \n  svm_param %&gt;% \n  Matrix::update(\n    cost = cost(c(-6, 1)),\n    rbf_sigma = rbf_sigma(c(-6, -4))\n  ) %&gt;% \n  grid_regular(levels = 2)\n\nset.seed(1402)\nsvm_initial &lt;- \n  svm_wflow %&gt;% \n  tune_grid(resamples = cell_folds, grid = start_grid, metrics = roc_res)\n\ncollect_metrics(svm_initial)\n## # A tibble: 4 × 8\n##     cost rbf_sigma .metric .estimator  mean     n std_err .config             \n##    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n## 1 0.0156  0.000001 roc_auc binary     0.864    10 0.00864 Preprocessor1_Model1\n## 2 2       0.000001 roc_auc binary     0.863    10 0.00867 Preprocessor1_Model2\n## 3 0.0156  0.0001   roc_auc binary     0.863    10 0.00862 Preprocessor1_Model3\n## 4 2       0.0001   roc_auc binary     0.866    10 0.00855 Preprocessor1_Model4\n\nThis initial grid shows fairly equivalent results, with no individual point much better than any of the others. These results can be ingested by the iterative tuning functions discussed in the following sections to be used as initial values."
  },
  {
    "objectID": "14-iterative-search.html#sec-iterative-summary",
    "href": "14-iterative-search.html#sec-iterative-summary",
    "title": "14  Iterative Search",
    "section": "\n14.4 Chapter Summary",
    "text": "14.4 Chapter Summary\nThis chapter described two iterative search methods for optimizing tuning parameters. Bayes optimization uses a predictive model trained on existing resampling results to suggest tuning parameter values, while simulated annealing walks through the hyperparameter space to find good values. Both can be effective at finding good values alone or as a follow-up method used after an initial grid search to further finetune performance.\n\n\n\n\nBohachevsky, I, M Johnson, and M Stein. 1986. “Generalized Simulated Annealing for Function Optimization.” Technometrics 28 (3): 209–17.\n\n\nFrazier, R. 2018. “A Tutorial on Bayesian Optimization.” https://arxiv.org/abs/1807.02811.\n\n\nKirkpatrick, S, D Gelatt, and M Vecchi. 1983. “Optimization by Simulated Annealing.” Science 220 (4598): 671–80.\n\n\nKuhn, M, and K Johnson. 2013. Applied Predictive Modeling. Springer.\n\n\nRasmussen, C, and C Williams. 2006. Gaussian Processes for Machine Learning. Gaussian Processes for Machine Learning. MIT Press.\n\n\nSchulz, E, M Speekenbrink, and A Krause. 2018. “A Tutorial on Gaussian Process Regression: Modelling, Exploring, and Exploiting Functions.” Journal of Mathematical Psychology 85: 1–16.\n\n\nShahriari, B., K. Swersky, Z. Wang, R. P. Adams, and N. de Freitas. 2016. “Taking the Human Out of the Loop: A Review of Bayesian Optimization.” Proceedings of the IEEE 104 (1): 148–75.\n\n\nVan Laarhoven, P, and E Aarts. 1987. “Simulated Annealing.” In Simulated Annealing: Theory and Applications, 7–15. Springer."
  },
  {
    "objectID": "15-workflow-sets.html#modeling-concrete-mixture-strength",
    "href": "15-workflow-sets.html#modeling-concrete-mixture-strength",
    "title": "15  Screening Many Models",
    "section": "\n15.1 Modeling Concrete Mixture Strength",
    "text": "15.1 Modeling Concrete Mixture Strength\nTo demonstrate how to screen multiple model workflows, we will use the concrete mixture data from Applied Predictive Modeling (Kuhn and Johnson 2013) as an example. Chapter 10 of that book demonstrated models to predict the compressive strength of concrete mixtures using the ingredients as predictors. A wide variety of models were evaluated with different predictor sets and preprocessing needs. How can workflow sets make such a process of large scale testing for models easier?\nFirst, let’s define the data splitting and resampling schemes.\n\nlibrary(tidymodels)\ntidymodels_prefer()\ndata(concrete, package = \"modeldata\")\nglimpse(concrete)\n## Rows: 1,030\n## Columns: 9\n## $ cement               &lt;dbl&gt; 540.0, 540.0, 332.5, 332.5, 198.6, 266.0, 380.0, 380.…\n## $ blast_furnace_slag   &lt;dbl&gt; 0.0, 0.0, 142.5, 142.5, 132.4, 114.0, 95.0, 95.0, 114…\n## $ fly_ash              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n## $ water                &lt;dbl&gt; 162, 162, 228, 228, 192, 228, 228, 228, 228, 228, 192…\n## $ superplasticizer     &lt;dbl&gt; 2.5, 2.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0…\n## $ coarse_aggregate     &lt;dbl&gt; 1040.0, 1055.0, 932.0, 932.0, 978.4, 932.0, 932.0, 93…\n## $ fine_aggregate       &lt;dbl&gt; 676.0, 676.0, 594.0, 594.0, 825.5, 670.0, 594.0, 594.…\n## $ age                  &lt;int&gt; 28, 28, 270, 365, 360, 90, 365, 28, 28, 28, 90, 28, 2…\n## $ compressive_strength &lt;dbl&gt; 79.99, 61.89, 40.27, 41.05, 44.30, 47.03, 43.70, 36.4…\n\nThe compressive_strength column is the outcome. The age predictor tells us the age of the concrete sample at testing in days (concrete strengthens over time) and the rest of the predictors like cement and water are concrete components in units of kilograms per cubic meter.\n\nFor some cases in this data set, the same concrete formula was tested multiple times. We’d rather not include these replicate mixtures as individual data points since they might be distributed across both the training and test set. Doing so might artificially inflate our performance estimates.\n\nTo address this, we will use the mean compressive strength per concrete mixture for modeling:\n\nconcrete &lt;- \n   concrete %&gt;% \n   group_by(across(-compressive_strength)) %&gt;% \n   summarize(compressive_strength = mean(compressive_strength),\n             .groups = \"drop\")\nnrow(concrete)\n## [1] 992\n\nLet’s split the data using the default 3:1 ratio of training-to-test and resample the training set using five repeats of 10-fold cross-validation:\n\nset.seed(1501)\nconcrete_split &lt;- initial_split(concrete, strata = compressive_strength)\nconcrete_train &lt;- training(concrete_split)\nconcrete_test  &lt;- testing(concrete_split)\n\nset.seed(1502)\nconcrete_folds &lt;- \n   vfold_cv(concrete_train, strata = compressive_strength, repeats = 5)\n\nSome models (notably neural networks, KNN, and support vector machines) require predictors that have been centered and scaled, so some model workflows will require recipes with these preprocessing steps. For other models, a traditional response surface design model expansion (i.e., quadratic and two-way interactions) is a good idea. For these purposes, we create two recipes:\n\nnormalized_rec &lt;- \n   recipe(compressive_strength ~ ., data = concrete_train) %&gt;% \n   step_normalize(all_predictors()) \n\npoly_recipe &lt;- \n   normalized_rec %&gt;% \n   step_poly(all_predictors()) %&gt;% \n   step_interact(~ all_predictors():all_predictors())\n\nFor the models, we use the the parsnip addin to create a set of model specifications:\n\nlibrary(rules)\nlibrary(baguette)\n\nlinear_reg_spec &lt;- \n   linear_reg(penalty = tune(), mixture = tune()) %&gt;% \n   set_engine(\"glmnet\")\n\nnnet_spec &lt;- \n   mlp(hidden_units = tune(), penalty = tune(), epochs = tune()) %&gt;% \n   set_engine(\"nnet\", MaxNWts = 2600) %&gt;% \n   set_mode(\"regression\")\n\nmars_spec &lt;- \n   mars(prod_degree = tune()) %&gt;%  #&lt;- use GCV to choose terms\n   set_engine(\"earth\") %&gt;% \n   set_mode(\"regression\")\n\nsvm_r_spec &lt;- \n   svm_rbf(cost = tune(), rbf_sigma = tune()) %&gt;% \n   set_engine(\"kernlab\") %&gt;% \n   set_mode(\"regression\")\n\nsvm_p_spec &lt;- \n   svm_poly(cost = tune(), degree = tune()) %&gt;% \n   set_engine(\"kernlab\") %&gt;% \n   set_mode(\"regression\")\n\nknn_spec &lt;- \n   nearest_neighbor(neighbors = tune(), dist_power = tune(), weight_func = tune()) %&gt;% \n   set_engine(\"kknn\") %&gt;% \n   set_mode(\"regression\")\n\ncart_spec &lt;- \n   decision_tree(cost_complexity = tune(), min_n = tune()) %&gt;% \n   set_engine(\"rpart\") %&gt;% \n   set_mode(\"regression\")\n\nbag_cart_spec &lt;- \n   bag_tree() %&gt;% \n   set_engine(\"rpart\", times = 50L) %&gt;% \n   set_mode(\"regression\")\n\nrf_spec &lt;- \n   rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %&gt;% \n   set_engine(\"ranger\") %&gt;% \n   set_mode(\"regression\")\n\nxgb_spec &lt;- \n   boost_tree(tree_depth = tune(), learn_rate = tune(), loss_reduction = tune(), \n              min_n = tune(), sample_size = tune(), trees = tune()) %&gt;% \n   set_engine(\"xgboost\") %&gt;% \n   set_mode(\"regression\")\n\ncubist_spec &lt;- \n   cubist_rules(committees = tune(), neighbors = tune()) %&gt;% \n   set_engine(\"Cubist\") \n\nThe analysis in Kuhn and Johnson (2013) specifies that the neural network should have up to 27 hidden units in the layer. The extract_parameter_set_dials() function extracts the parameter set, which we modify to have the correct parameter range:\n\nnnet_param &lt;- \n   nnet_spec %&gt;% \n   extract_parameter_set_dials() %&gt;% \n   update(hidden_units = hidden_units(c(1, 27)))\n\nHow can we match these models to their recipes, tune them, then evaluate their performance efficiently? A workflow set offers a solution."
  },
  {
    "objectID": "15-workflow-sets.html#creating-the-workflow-set",
    "href": "15-workflow-sets.html#creating-the-workflow-set",
    "title": "15  Screening Many Models",
    "section": "\n15.2 Creating the Workflow Set",
    "text": "15.2 Creating the Workflow Set\nWorkflow sets take named lists of preprocessors and model specifications and combine them into an object containing multiple workflows. There are three possible kinds of preprocessors:\n\nA standard R formula\nA recipe object (prior to estimation/prepping)\nA dplyr-style selector to choose the outcome and predictors\n\nAs a first workflow set example, let’s combine the recipe that only standardizes the predictors to the nonlinear models that require the predictors to be in the same units:\n\nnormalized &lt;- \n   workflow_set(\n      preproc = list(normalized = normalized_rec), \n      models = list(SVM_radial = svm_r_spec, SVM_poly = svm_p_spec, \n                    KNN = knn_spec, neural_network = nnet_spec)\n   )\nnormalized\n## # A workflow set/tibble: 4 × 4\n##   wflow_id                  info             option    result    \n##   &lt;chr&gt;                     &lt;list&gt;           &lt;list&gt;    &lt;list&gt;    \n## 1 normalized_SVM_radial     &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 2 normalized_SVM_poly       &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 3 normalized_KNN            &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 4 normalized_neural_network &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n\nSince there is only a single preprocessor, this function creates a set of workflows with this value. If the preprocessor contained more than one entry, the function would create all combinations of preprocessors and models.\nThe wflow_id column is automatically created but can be modified using a call to mutate(). The info column contains a tibble with some identifiers and the workflow object. The workflow can be extracted:\n\nnormalized %&gt;% extract_workflow(id = \"normalized_KNN\")\n## ══ Workflow ═════════════════════════════════════════════════════════════════════════\n## Preprocessor: Recipe\n## Model: nearest_neighbor()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## 1 Recipe Step\n## \n## • step_normalize()\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## K-Nearest Neighbor Model Specification (regression)\n## \n## Main Arguments:\n##   neighbors = tune()\n##   weight_func = tune()\n##   dist_power = tune()\n## \n## Computational engine: kknn\n\nThe option column is a placeholder for any arguments to use when we evaluate the workflow. For example, to add the neural network parameter object:\n\nnormalized &lt;- \n   normalized %&gt;% \n   option_add(param_info = nnet_param, id = \"normalized_neural_network\")\nnormalized\n## # A workflow set/tibble: 4 × 4\n##   wflow_id                  info             option    result    \n##   &lt;chr&gt;                     &lt;list&gt;           &lt;list&gt;    &lt;list&gt;    \n## 1 normalized_SVM_radial     &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 2 normalized_SVM_poly       &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 3 normalized_KNN            &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 4 normalized_neural_network &lt;tibble [1 × 4]&gt; &lt;opts[1]&gt; &lt;list [0]&gt;\n\nWhen a function from the tune or finetune package is used to tune (or resample) the workflow, this argument will be used.\nThe result column is a placeholder for the output of the tuning or resampling functions.\nFor the other nonlinear models, let’s create another workflow set that uses dplyr selectors for the outcome and predictors:\n\nmodel_vars &lt;- \n   workflow_variables(outcomes = compressive_strength, \n                      predictors = everything())\n\nno_pre_proc &lt;- \n   workflow_set(\n      preproc = list(simple = model_vars), \n      models = list(MARS = mars_spec, CART = cart_spec, CART_bagged = bag_cart_spec,\n                    RF = rf_spec, boosting = xgb_spec, Cubist = cubist_spec)\n   )\nno_pre_proc\n## # A workflow set/tibble: 6 × 4\n##   wflow_id           info             option    result    \n##   &lt;chr&gt;              &lt;list&gt;           &lt;list&gt;    &lt;list&gt;    \n## 1 simple_MARS        &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 2 simple_CART        &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 3 simple_CART_bagged &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 4 simple_RF          &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 5 simple_boosting    &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 6 simple_Cubist      &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n\nFinally, we assemble the set that uses nonlinear terms and interactions with the appropriate models:\n\nwith_features &lt;- \n   workflow_set(\n      preproc = list(full_quad = poly_recipe), \n      models = list(linear_reg = linear_reg_spec, KNN = knn_spec)\n   )\n\nThese objects are tibbles with the extra class of workflow_set. Row binding does not affect the state of the sets and the result is itself a workflow set:\n\nall_workflows &lt;- \n   bind_rows(no_pre_proc, normalized, with_features) %&gt;% \n   # Make the workflow ID's a little more simple: \n   mutate(wflow_id = gsub(\"(simple_)|(normalized_)\", \"\", wflow_id))\nall_workflows\n## # A workflow set/tibble: 12 × 4\n##   wflow_id    info             option    result    \n##   &lt;chr&gt;       &lt;list&gt;           &lt;list&gt;    &lt;list&gt;    \n## 1 MARS        &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 2 CART        &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 3 CART_bagged &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 4 RF          &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 5 boosting    &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## 6 Cubist      &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;\n## # ℹ 6 more rows"
  },
  {
    "objectID": "15-workflow-sets.html#tuning-and-evaluating-the-models",
    "href": "15-workflow-sets.html#tuning-and-evaluating-the-models",
    "title": "15  Screening Many Models",
    "section": "\n15.3 Tuning and Evaluating the Models",
    "text": "15.3 Tuning and Evaluating the Models\nAlmost all of the members of all_workflows contain tuning parameters. To evaluate their performance, we can use the standard tuning or resampling functions (e.g., tune_grid() and so on). The workflow_map() function will apply the same function to all of the workflows in the set; the default is tune_grid().\nFor this example, grid search is applied to each workflow using up to 25 different parameter candidates. There are a set of common options to use with each execution of tune_grid(). For example, in the following code we will use the same resampling and control objects for each workflow, along with a grid size of 25. The workflow_map() function has an additional argument called seed, which is used to ensure that each execution of tune_grid() consumes the same random numbers.\n\ngrid_ctrl &lt;-\n   control_grid(\n      save_pred = TRUE,\n      parallel_over = \"everything\",\n      save_workflow = TRUE\n   )\n\ngrid_results &lt;-\n   all_workflows %&gt;%\n   workflow_map(\n      seed = 1503,\n      resamples = concrete_folds,\n      grid = 25,\n      control = grid_ctrl\n   )\n\nThe results show that the option and result columns have been updated:\n\ngrid_results\n## # A workflow set/tibble: 12 × 4\n##   wflow_id    info             option    result   \n##   &lt;chr&gt;       &lt;list&gt;           &lt;list&gt;    &lt;list&gt;   \n## 1 MARS        &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;tune[+]&gt;\n## 2 CART        &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;tune[+]&gt;\n## 3 CART_bagged &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;rsmp[+]&gt;\n## 4 RF          &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;tune[+]&gt;\n## 5 boosting    &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;tune[+]&gt;\n## 6 Cubist      &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;tune[+]&gt;\n## # ℹ 6 more rows\n\nThe option column now contains all of the options that we used in the workflow_map() call. This makes our results reproducible. In the result columns, the “tune[+]” and “rsmp[+]” notations mean that the object had no issues. A value such as “tune[x]” occurs if all of the models failed for some reason.\nThere are a few convenience functions for examining results such as grid_results. The rank_results() function will order the models by some performance metric. By default, it uses the first metric in the metric set (RMSE in this instance). Let’s filter() to look only at RMSE:\n\ngrid_results %&gt;% \n   rank_results() %&gt;% \n   filter(.metric == \"rmse\") %&gt;% \n   select(model, .config, rmse = mean, rank)\n## # A tibble: 252 × 4\n##   model      .config                rmse  rank\n##   &lt;chr&gt;      &lt;chr&gt;                 &lt;dbl&gt; &lt;int&gt;\n## 1 boost_tree Preprocessor1_Model04  4.25     1\n## 2 boost_tree Preprocessor1_Model06  4.29     2\n## 3 boost_tree Preprocessor1_Model13  4.31     3\n## 4 boost_tree Preprocessor1_Model14  4.39     4\n## 5 boost_tree Preprocessor1_Model16  4.46     5\n## 6 boost_tree Preprocessor1_Model03  4.47     6\n## # ℹ 246 more rows\n\nAlso by default, the function ranks all of the candidate sets; that’s why the same model can show up multiple times in the output. An option, called select_best, can be used to rank the models using their best tuning parameter combination.\nThe autoplot() method plots the rankings; it also has a select_best argument. The plot in Figure 15.1 visualizes the best results for each model and is generated with:\n\nautoplot(\n   grid_results,\n   rank_metric = \"rmse\",  # &lt;- how to order models\n   metric = \"rmse\",       # &lt;- which metric to visualize\n   select_best = TRUE     # &lt;- one point per workflow\n) +\n   geom_text(aes(y = mean - 1/2, label = wflow_id), angle = 90, hjust = 1) +\n   lims(y = c(3.5, 9.5)) +\n   theme(legend.position = \"none\")\n\n\n\n\n\nFigure 15.1: Estimated RMSE (and approximate confidence intervals) for the best model configuration in each workflow.\n\n\n\nIn case you want to see the tuning parameter results for a specific model, like Figure 15.2, the id argument can take a single value from the wflow_id column for which model to plot:\n\nautoplot(grid_results, id = \"Cubist\", metric = \"rmse\")\n\n\n\n\n\nFigure 15.2: The autoplot() results for the Cubist model contained in the workflow set.\n\n\n\nThere are also methods for collect_predictions() and collect_metrics().\nThe example model screening with our concrete mixture data fits a total of 12,600 models. Using 4 workers in parallel, the estimation process took 8.9 hours to complete."
  },
  {
    "objectID": "15-workflow-sets.html#racing-example",
    "href": "15-workflow-sets.html#racing-example",
    "title": "15  Screening Many Models",
    "section": "\n15.4 Efficiently Screening Models",
    "text": "15.4 Efficiently Screening Models\nOne effective method for screening a large set of models efficiently is to use the racing approach described in Section @ref(racing). With a workflow set, we can use the workflow_map() function for this racing approach. Recall that after we pipe in our workflow set, the argument we use is the function to apply to the workflows; in this case, we can use a value of \"tune_race_anova\". We also pass an appropriate control object; otherwise the options would be the same as the code in the previous section.\n\nlibrary(finetune)\n\nrace_ctrl &lt;-\n   control_race(\n      save_pred = TRUE,\n      parallel_over = \"everything\",\n      save_workflow = TRUE\n   )\n\nrace_results &lt;-\n   all_workflows %&gt;%\n   workflow_map(\n      \"tune_race_anova\",\n      seed = 1503,\n      resamples = concrete_folds,\n      grid = 25,\n      control = race_ctrl\n   )\n\nThe new object looks very similar, although the elements of the result column show a value of \"race[+]\", indicating a different type of object:\n\nrace_results\n## # A workflow set/tibble: 12 × 4\n##   wflow_id    info             option    result   \n##   &lt;chr&gt;       &lt;list&gt;           &lt;list&gt;    &lt;list&gt;   \n## 1 MARS        &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;race[+]&gt;\n## 2 CART        &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;race[+]&gt;\n## 3 CART_bagged &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;rsmp[+]&gt;\n## 4 RF          &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;race[+]&gt;\n## 5 boosting    &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;race[+]&gt;\n## 6 Cubist      &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;race[+]&gt;\n## # ℹ 6 more rows\n\nThe same helpful functions are available for this object to interrogate the results and, in fact, the basic autoplot() method shown in Figure @ref(fig:workflow-set-racing-ranks)1 produces trends similar to Figure @ref(fig:workflow-set-ranks). This is produced by:\n\nautoplot(\n   race_results,\n   rank_metric = \"rmse\",  \n   metric = \"rmse\",       \n   select_best = TRUE    \n) +\n   geom_text(aes(y = mean - 1/2, label = wflow_id), angle = 90, hjust = 1) +\n   lims(y = c(3.0, 9.5)) +\n   theme(legend.position = \"none\")\n\n\n\n\n\nEstimated RMSE (and approximate confidence intervals) for the best model configuration in each workflow in the racing results.\n\n\n\nOverall, the racing approach estimated a total of 950 models, 7.55% of the full set of 12,589 models in the full grid. As a result, the racing approach was 5.3-fold faster.\nDid we get similar results? For both objects, we rank the results, merge them, and plot them against one another in Figure @ref(fig:racing-concordance).\n\nmatched_results &lt;- \n   rank_results(race_results, select_best = TRUE) %&gt;% \n   select(wflow_id, .metric, race = mean, config_race = .config) %&gt;% \n   inner_join(\n      rank_results(grid_results, select_best = TRUE) %&gt;% \n         select(wflow_id, .metric, complete = mean, \n                config_complete = .config, model),\n      by = c(\"wflow_id\", \".metric\"),\n   ) %&gt;%  \n   filter(.metric == \"rmse\")\n\nlibrary(ggrepel)\n\nmatched_results %&gt;% \n   ggplot(aes(x = complete, y = race)) + \n   geom_abline(lty = 3) + \n   geom_point() + \n   geom_text_repel(aes(label = model)) +\n   coord_obs_pred() + \n   labs(x = \"Complete Grid RMSE\", y = \"Racing RMSE\") \n\n\n\n\n\nEstimated RMSE for the full grid and racing results.\n\n\n\nWhile the racing approach selected the same candidate parameters as the complete grid for only 41.67% of the models, the performance metrics of the models selected by racing were nearly equal. The correlation of RMSE values was 0.968 and the rank correlation was 0.951. This indicates that, within a model, there were multiple tuning parameter combinations that had nearly identical results."
  },
  {
    "objectID": "15-workflow-sets.html#finalizing-a-model",
    "href": "15-workflow-sets.html#finalizing-a-model",
    "title": "15  Screening Many Models",
    "section": "\n15.5 Finalizing a Model",
    "text": "15.5 Finalizing a Model\nSimilar to what we have shown in previous chapters, the process of choosing the final model and fitting it on the training set is straightforward. The first step is to pick a workflow to finalize. Since the boosted tree model worked well, we’ll extract that from the set, update the parameters with the numerically best settings, and fit to the training set:\n\nbest_results &lt;- \n   race_results %&gt;% \n   extract_workflow_set_result(\"boosting\") %&gt;% \n   select_best(metric = \"rmse\")\nbest_results\n## # A tibble: 1 × 7\n##   trees min_n tree_depth learn_rate loss_reduction sample_size .config              \n##   &lt;int&gt; &lt;int&gt;      &lt;int&gt;      &lt;dbl&gt;          &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;                \n## 1  1800    25          4      0.109       9.84e-10       0.850 Preprocessor1_Model16\n\nboosting_test_results &lt;- \n   race_results %&gt;% \n   extract_workflow(\"boosting\") %&gt;% \n   finalize_workflow(best_results) %&gt;% \n   last_fit(split = concrete_split)\n\nWe can see the test set metrics results, and visualize the predictions in Figure 15.5.\n\ncollect_metrics(boosting_test_results)\n## # A tibble: 2 × 4\n##   .metric .estimator .estimate .config             \n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n## 1 rmse    standard       3.46  Preprocessor1_Model1\n## 2 rsq     standard       0.953 Preprocessor1_Model1\n\n\nboosting_test_results %&gt;% \n   collect_predictions() %&gt;% \n   ggplot(aes(x = compressive_strength, y = .pred)) + \n   geom_abline(color = \"gray50\", lty = 2) + \n   geom_point(alpha = 0.5) + \n   coord_obs_pred() + \n   labs(x = \"observed\", y = \"predicted\")\n\n\n\n\n\nFigure 15.5: Observed versus predicted values for the test set.\n\n\n\nWe see here how well the observed and predicted compressive strength for these concrete mixtures align."
  },
  {
    "objectID": "15-workflow-sets.html#workflow-sets-summary",
    "href": "15-workflow-sets.html#workflow-sets-summary",
    "title": "15  Screening Many Models",
    "section": "\n15.6 Chapter Summary",
    "text": "15.6 Chapter Summary\nOften a data practitioner needs to consider a large number of possible modeling approaches for a task at hand, especially for new data sets and/or when there is little knowledge about what modeling strategy will work best. This chapter illustrated how to use workflow sets to investigate multiple models or feature engineering strategies in such a situation. Racing methods can more efficiently rank models than fitting every candidate model being considered.\n\n\n\n\nKuhn, M, and K Johnson. 2013. Applied Predictive Modeling. Springer."
  },
  {
    "objectID": "15-workflow-sets.html#footnotes",
    "href": "15-workflow-sets.html#footnotes",
    "title": "15  Screening Many Models",
    "section": "",
    "text": "As of February 2022, we see slightly different performance metrics for the neural network when trained using macOS on ARM architecture (Apple M1 chip) compared to Intel architecture.↩︎"
  },
  {
    "objectID": "12-tuning-parameters.html#sec-tuning-parameter-examples",
    "href": "12-tuning-parameters.html#sec-tuning-parameter-examples",
    "title": "12  Ajuste de Modelos y los Peligros del Sobreajuste",
    "section": "\n12.2 Parámetros de ajuste para diferentes tipos de modelos",
    "text": "12.2 Parámetros de ajuste para diferentes tipos de modelos\nHay muchos ejemplos de ajuste de parámetros o hiperparámetros en diferentes modelos estadísticos y de aprendizaje automático:\n\nBoosting es un método conjunto que combina una serie de modelos base, cada uno de los cuales se crea secuencialmente y depende de los modelos anteriores. El número de iteraciones de impulso es un parámetro de ajuste importante que normalmente requiere optimización.\nEn la clásica red neuronal artificial de una sola capa (también conocida como perceptrón multicapa), los predictores se combinan utilizando dos o más unidades ocultas. Las unidades ocultas son combinaciones lineales de los predictores que se capturan en una función de activación (normalmente una función no lineal, como una sigmoidea). Las unidades ocultas se conectan luego con las unidades resultantes; Se utiliza una unidad de resultado para los modelos de regresión y se requieren múltiples unidades de resultado para la clasificación. El número de unidades ocultas y el tipo de función de activación son parámetros de ajuste estructural importantes.\nLos métodos modernos de descenso de gradientes se mejoran al encontrar los parámetros de optimización adecuados. Ejemplos de tales hiperparámetros son las tasas de aprendizaje, el impulso y el número de iteraciones/épocas de optimización (Goodfellow, Bengio, y Courville 2016). Las redes neuronales y algunos modelos de conjuntos utilizan el descenso de gradiente para estimar los parámetros del modelo. Si bien los parámetros de ajuste asociados con el descenso del gradiente no son parámetros estructurales, a menudo requieren ajuste.\n\nEn algunos casos, las técnicas de preprocesamiento requieren ajustes:\n\nEn el análisis de componentes principales, o su primo supervisado llamado mínimos cuadrados parciales, los predictores se reemplazan con características nuevas y artificiales que tienen mejores propiedades relacionadas con la colinealidad. Se puede ajustar el número de componentes extraídos.\nLos métodos de imputación estiman los valores predictivos faltantes utilizando los valores completos de uno o más predictores. Una herramienta de imputación eficaz utiliza \\(K\\) vecinos más cercanos de las columnas completas para predecir el valor faltante. El número de vecinos modula la cantidad de promedio y se puede ajustar.\n\nAlgunos modelos estadísticos clásicos también tienen parámetros estructurales:\n\nEn la regresión binaria, el enlace logit se usa comúnmente (es decir, regresión logística). También están disponibles otras funciones de enlace, como probit y log-log complementario (Dobson 1999). Este ejemplo se describe con más detalle en Sección 12.3.\nLos modelos de medidas repetidas y longitudinales no bayesianos requieren una especificación para la estructura de covarianza o correlación de los datos. Las opciones incluyen compuesto simétrico (también conocido como intercambiable), autorregresivo, Toeplitz y otros (Littell, Pendergast, y Natarajan 2000).\n\nUn contraejemplo en el que no es apropiado ajustar un parámetro es la distribución previa requerida para el análisis bayesiano. Lo anterior resume la creencia del analista sobre la distribución de una cantidad antes de que se tengan en cuenta la evidencia o los datos. Por ejemplo, en Sección 11.4, utilizamos un modelo ANOVA bayesiano y no teníamos claro cuál debería ser el valor previo para los parámetros de regresión (más allá de ser una distribución simétrica). Elegimos una distribución t con un grado de libertad para la anterior ya que tiene colas más pesadas; Esto refleja nuestra incertidumbre adicional. Nuestras creencias previas no deberían estar sujetas a optimización. Los parámetros de ajuste generalmente se optimizan para el rendimiento, mientras que los anteriores no deben modificarse para obtener “los resultados correctos”.\n\nOtro contraejemplo (quizás más discutible) de un parámetro que no necesita ser ajustado es el número de árboles en un randm forest o en un modelo de embolsado. En cambio, este valor debe elegirse para que sea lo suficientemente grande como para garantizar la estabilidad numérica en los resultados; ajustarlo no puede mejorar el rendimiento siempre que el valor sea lo suficientemente grande como para producir resultados confiables. Para random forest, este valor suele ser de miles, mientras que la cantidad de árboles necesarios para el embolsado es de alrededor de 50 a 100."
  },
  {
    "objectID": "12-tuning-parameters.html#sec-what-to-optimize",
    "href": "12-tuning-parameters.html#sec-what-to-optimize",
    "title": "12  Ajuste de Modelos y los Peligros del Sobreajuste",
    "section": "\n12.3 ¿Qué Optimizamos?",
    "text": "12.3 ¿Qué Optimizamos?\n¿Cómo debemos evaluar los modelos cuando optimizamos los parámetros de ajuste? Depende del modelo y del propósito del modelo.\nPara los casos en los que las propiedades estadísticas del parámetro de ajuste son manejables, se pueden utilizar propiedades estadísticas comunes como función objetivo. Por ejemplo, en el caso de la regresión logística binaria, la función de enlace se puede elegir maximizando la probabilidad o los criterios de información. Sin embargo, es posible que estas propiedades estadísticas no se alineen con los resultados obtenidos utilizando propiedades orientadas a la precisión. Como ejemplo, Friedman (2001) optimizó la cantidad de árboles en un conjunto de árboles mejorado y encontró resultados diferentes al maximizar la probabilidad y la precisión:\n\ndegradar la probabilidad mediante el sobreajuste en realidad mejora la tasa de error de clasificación errónea. Aunque quizás sea contradictorio, esto no es una contradicción; la probabilidad y la tasa de error miden diferentes aspectos de la calidad del ajuste.\n\nPara demostrarlo, considere los datos de clasificación que se muestran en Figura 12.1 con dos predictores, dos clases y un conjunto de entrenamiento de puntos de datos 593.\n\n\n\n\nFigura 12.1: Un ejemplo de conjunto de datos de clasificación de dos clases con dos predictores\n\n\n\nPodríamos comenzar ajustando un límite de clase lineal a estos datos. El método más común para hacer esto es utilizar un modelo lineal generalizado en forma de regresión logística. Este modelo relaciona las log odds de que una muestra sea Clase 1 usando la transformación logit:\n\\[ \\log\\left(\\frac{\\pi}{1 - \\pi}\\right) = \\beta_0 + \\beta_1x_1 + \\ldots + \\beta_px_p\\]\nEn el contexto de los modelos lineales generalizados, la función logit es la función de enlace entre el resultado (\\(\\pi\\)) y los predictores. Hay otras funciones de enlace que incluyen el modelo probit:\n\\[\\Phi^{-1}(\\pi) = \\beta_0 + \\beta_1x_1 + \\ldots + \\beta_px_p\\]\ndonde \\(\\Phi\\) es la función normal estándar acumulativa, así como el modelo log-log complementario:\n\\[\\log(-\\log(1-\\pi)) = \\beta_0 + \\beta_1x_1 + \\ldots + \\beta_px_p\\]\nCada uno de estos modelos da como resultado límites de clase lineales. ¿Cuál deberíamos usar? Dado que, para estos datos, el número de parámetros del modelo no varía, el enfoque estadístico es calcular la probabilidad (logaritmo) de cada modelo y determinar el modelo con el valor más grande. Tradicionalmente, la probabilidad se calcula utilizando los mismos datos que se utilizaron para estimar los parámetros, sin utilizar enfoques como la división de datos o el remuestreo de los Capítulos 5 y 10.\nPara un marco de datos training_set, creemos una función para calcular los diferentes modelos y extraer las estadísticas de probabilidad para el conjunto de entrenamiento (usando broom::glance()):\n\nlibrary(tidymodels)\ntidymodels_prefer()\n\nllhood &lt;- function(...) {\n  logistic_reg() %&gt;% \n    set_engine(\"glm\", ...) %&gt;% \n    fit(Class ~ ., data = training_set) %&gt;% \n    glance() %&gt;% \n    select(logLik)\n}\n\nbind_rows(\n  llhood(),\n  llhood(family = binomial(link = \"probit\")),\n  llhood(family = binomial(link = \"cloglog\"))\n) %&gt;% \n  mutate(link = c(\"logit\", \"probit\", \"c-log-log\"))  %&gt;% \n  arrange(desc(logLik))\n## # A tibble: 3 × 2\n##   logLik link     \n##    &lt;dbl&gt; &lt;chr&gt;    \n## 1  -258. logit    \n## 2  -262. probit   \n## 3  -270. c-log-log\n\nSegún estos resultados, el modelo logístico tiene las mejores propiedades estadísticas.\nA partir de la escala de los valores de probabilidad logarítmica, es difícil entender si estas diferencias son importantes o insignificantes. Una forma de mejorar este análisis es volver a muestrear las estadísticas y separar los datos del modelado de los datos utilizados para la estimación del desempeño. Con este pequeño conjunto de datos, la validación cruzada repetida 10 veces es una buena opción para el remuestreo. En el paquete yardstick, la función mn_log_loss() se usa para estimar la probabilidad logarítmica negativa, y nuestros resultados se muestran en Figura 12.2.\n\nset.seed(1201)\nrs &lt;- vfold_cv(training_set, repeats = 10)\n\n# Devuelva las estimaciones de rendimiento individuales remuestreadas:\nlloss &lt;- function(...) {\n  perf_meas &lt;- metric_set(roc_auc, mn_log_loss)\n    \n  logistic_reg() %&gt;% \n    set_engine(\"glm\", ...) %&gt;% \n    fit_resamples(Class ~ A + B, rs, metrics = perf_meas) %&gt;% \n    collect_metrics(summarize = FALSE) %&gt;%\n    select(id, id2, .metric, .estimate)\n}\n\nresampled_res &lt;- \n  bind_rows(\n    lloss()                                    %&gt;% mutate(model = \"logistic\"),\n    lloss(family = binomial(link = \"probit\"))  %&gt;% mutate(model = \"probit\"),\n    lloss(family = binomial(link = \"cloglog\")) %&gt;% mutate(model = \"c-log-log\")     \n  ) %&gt;%\n  # Convierta la pérdida logarítmica en probabilidad logarítmica:\n  mutate(.estimate = ifelse(.metric == \"mn_log_loss\", -.estimate, .estimate)) %&gt;% \n  group_by(model, .metric) %&gt;% \n  summarize(\n    mean = mean(.estimate, na.rm = TRUE),\n    std_err = sd(.estimate, na.rm = TRUE) / sqrt(n()), \n    .groups = \"drop\"\n  )\n\nresampled_res %&gt;% \n  filter(.metric == \"mn_log_loss\") %&gt;% \n  ggplot(aes(x = mean, y = model)) + \n  geom_point() + \n  geom_errorbar(aes(xmin = mean - 1.64 * std_err, xmax = mean + 1.64 * std_err),\n                width = .1) + \n  labs(y = NULL, x = \"log-likelihood\")\n\n\n## → A | warning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n## There were issues with some computations   A: x1\n## There were issues with some computations   A: x1\n## \n\n\n\nFigura 12.2: Medias e intervalos de confianza aproximados del 90% para la probabilidad logarítmica binomial remuestreada con tres funciones de enlace diferentes\n\n\n\n\nLa escala de estos valores es diferente a los valores anteriores ya que se calculan en un conjunto de datos más pequeño; el valor producido por broom::glance() es una suma mientras que yardstick::mn_log_loss() es un promedio.\n\nEstos resultados muestran evidencia de que la elección de la función de enlace es algo importante. Aunque existe una superposición en los intervalos de confianza, el modelo logístico tiene los mejores resultados.\n¿Qué tal una métrica diferente? También calculamos el área bajo la curva ROC para cada remuestreo. Estos resultados, que reflejan la capacidad discriminativa de los modelos a través de numerosos umbrales de probabilidad, muestran una falta de diferencia en Figura 12.3.\n\n\n\n\nFigura 12.3: Medias e intervalos de confianza aproximados del 90% para el área remuestreada bajo la curva ROC con tres funciones de enlace diferentes\n\n\n\nDada la superposición de los intervalos, así como la escala del eje x, se podría utilizar cualquiera de estas opciones. Vemos esto nuevamente cuando los límites de clase para los tres modelos se superponen en el conjunto de prueba de puntos de datos 198 en Figura 12.4.\n\n\n\n\nFigura 12.4: El límite de clase lineal se ajusta a tres funciones de enlace.\n\n\n\n\nEste ejercicio enfatiza que diferentes métricas pueden conducir a diferentes decisiones sobre la elección de los valores de los parámetros de ajuste. En este caso, una métrica indica que los modelos son algo diferentes mientras que otra métrica no muestra ninguna diferencia.\n\nThomas y Uminsky (2020) analiza exhaustivamente la optimización de métricas y explora varios temas, incluido el juego de métricas. Advierten que:\n\nLa eficacia irrazonable de la optimización de métricas en los enfoques actuales de IA es un desafío fundamental para el campo y genera una contradicción inherente: la optimización exclusiva de las métricas conduce a resultados que distan mucho de ser óptimos."
  },
  {
    "objectID": "12-tuning-parameters.html#sec-overfitting-bad",
    "href": "12-tuning-parameters.html#sec-overfitting-bad",
    "title": "12  Ajuste de Modelos y los Peligros del Sobreajuste",
    "section": "\n12.4 Las consecuencias de las malas estimaciones de parámetros",
    "text": "12.4 Las consecuencias de las malas estimaciones de parámetros\nMuchos parámetros de ajuste modulan la cantidad de complejidad del modelo. Una mayor complejidad a menudo implica una mayor maleabilidad en los patrones que un modelo puede emular. Por ejemplo, como se muestra en Sección 8.4.3, agregar grados de libertad en una función spline aumenta la complejidad de la ecuación de predicción. Si bien esto es una ventaja cuando los motivos subyacentes de los datos son complejos, también puede conducir a una sobreinterpretación de patrones aleatorios que no se reproducirían en datos nuevos. Sobreajuste es la situación en la que un modelo se adapta demasiado a los datos de entrenamiento; funciona bien con los datos utilizados para construir el modelo, pero mal con datos nuevos.\n\nDado que ajustar los parámetros del modelo puede aumentar la complejidad del modelo, las malas elecciones pueden provocar un sobreajuste.\n\nRecuerde el modelo de red neuronal de una sola capa descrito en Sección 12.2. Con una única unidad oculta y funciones de activación sigmoideas, una red neuronal para clasificación es, para todos los efectos, solo una regresión logística. Sin embargo, a medida que aumenta el número de unidades ocultas, también aumenta la complejidad del modelo. De hecho, cuando el modelo de red utiliza unidades de activación sigmoidales, la aproximación de (cybenko1989?) demostró que el modelo es un aproximador de función universal siempre que haya suficientes unidades ocultas.\nAjustamos modelos de clasificación de redes neuronales a los mismos datos de dos clases de la sección anterior, variando el número de unidades ocultas. Utilizando el área bajo la curva ROC como métrica de rendimiento, la efectividad del modelo en el conjunto de entrenamiento aumenta a medida que se agregan más unidades ocultas. El modelo de red aprende completa y meticulosamente el conjunto de entrenamiento. Si el modelo se juzga a sí mismo por el valor ROC del conjunto de entrenamiento, prefiere muchas unidades ocultas para poder casi eliminar los errores.\nLos capítulos 5 y 10 demostraron que simplemente repredecir el conjunto de entrenamiento es un enfoque deficiente para la evaluación de modelos. Aquí, la red neuronal muy rápidamente comienza a sobreinterpretar los patrones que ve en el conjunto de entrenamiento. Compare estos tres límites de clase de ejemplo (desarrollados con el conjunto de entrenamiento) superpuestos en los conjuntos de entrenamiento y prueba en Figura 12.5.\n\n\n\n\nFigura 12.5: Límites de clase para tres modelos con un número creciente de unidades ocultas. Los límites se ajustan al conjunto de entrenamiento y se muestran para los conjuntos de entrenamiento y prueba.\n\n\n\nEl modelo unitario no se adapta con mucha flexibilidad a los datos (ya que está obligado a ser lineal). Un modelo con cuatro unidades ocultas comienza a mostrar signos de sobreajuste con un límite poco realista para valores alejados de la corriente principal de datos. Esto se debe a un único punto de datos de la primera clase en la esquina superior derecha de los datos. Con 20 unidades ocultas, el modelo comienza a memorizar el conjunto de entrenamiento, creando pequeñas islas alrededor de esos datos para minimizar la tasa de error de resustitución. Estos patrones no se repiten en el conjunto de prueba. Este último panel es la mejor ilustración de cómo se deben modular los parámetros de ajuste que controlan la complejidad para que el modelo sea efectivo. Para un modelo de 20 unidades, el conjunto de entrenamiento ROC AUC es 0.945 pero el valor del conjunto de prueba es 0.847.\nEsta ocurrencia de sobreajuste es obvia con dos predictores que podemos trazar. Sin embargo, en general, debemos utilizar un enfoque cuantitativo para detectar el sobreajuste.\n\nLa solución para detectar cuándo un modelo está exagerando el conjunto de entrenamiento es utilizar datos fuera de la muestra.\n\nEn lugar de utilizar el conjunto de prueba, se requiere algún tipo de remuestreo. Esto podría significar un enfoque iterativo (por ejemplo, una validación cruzada de 10 veces) o una única fuente de datos (por ejemplo, un conjunto de validación)."
  },
  {
    "objectID": "12-tuning-parameters.html#sec-tuning-params-tidymodels",
    "href": "12-tuning-parameters.html#sec-tuning-params-tidymodels",
    "title": "12  Ajuste de Modelos y los Peligros del Sobreajuste",
    "section": "\n12.6 Ajuste de parámetros en tidymodels",
    "text": "12.6 Ajuste de parámetros en tidymodels\nYa hemos tratado un buen número de argumentos que corresponden a parámetros de ajuste para especificaciones de recetas y modelos en capítulos anteriores. Es posible sintonizar:\n\nel umbral para combinar vecindarios en una categoría “otra” (con el nombre de argumento threshold) discutido en Sección 8.4.1\nel número de grados de libertad en un spline natural (deg_free, Sección 8.4.3)\nel número de puntos de datos necesarios para ejecutar una división en un modelo basado en árbol (min_n, Sección 6.1)\nel importe de la regularización en los modelos penalizados (penalty, Sección 6.1)\n\nPara las especificaciones del modelo parsnip, hay dos tipos de argumentos de parámetros. Los argumentos principales son aquellos que con mayor frecuencia están optimizados para el rendimiento y están disponibles en múltiples motores. Los principales parámetros de ajuste son argumentos de nivel superior para la función de especificación del modelo. Por ejemplo, la función rand_forest() tiene argumentos principales trees, min_n y mtry, ya que estos se especifican u optimizan con mayor frecuencia.\nUn conjunto secundario de parámetros de ajuste son específicos del motor. Estos se optimizan con poca frecuencia o son específicos solo para ciertos motores. Nuevamente usando bosques aleatorios como ejemplo, el paquete ranger contiene algunos argumentos que no son utilizados por otros paquetes. Un ejemplo es la penalización de ganancia, que regulariza la selección de predictores en el proceso de inducción del árbol. Este parámetro puede ayudar a modular el equilibrio entre la cantidad de predictores utilizados en el conjunto y el rendimiento (Wundervald, Parnell, y Domijan 2020). El nombre de este argumento en ranger() es regularization.factor. Para especificar un valor mediante una especificación de modelo parsnip, se agrega como argumento complementario a set_engine():\n\nrand_forest(trees = 2000, min_n = 10) %&gt;%                   # &lt;- argumentos principales\n  set_engine(\"ranger\", regularization.factor = 0.5)         # &lt;- específico del motor\n\n\nLos argumentos principales utilizan un sistema de nombres armonizado para eliminar inconsistencias entre motores, mientras que los argumentos específicos del motor no lo hacen.\n\n¿Cómo podemos indicar a las funciones de tidymodels qué argumentos deben optimizarse? Los parámetros se marcan para su ajuste asignándoles un valor de tune(). Para la red neuronal de una sola capa utilizada en Sección 12.4, la cantidad de unidades ocultas se designa para ajustar usando:\n\nneural_net_spec &lt;- \n  mlp(hidden_units = tune()) %&gt;%\n  set_mode(\"regression\") %&gt;%\n  set_engine(\"keras\")\n\nLa función tune() no ejecuta ningún valor de parámetro en particular; solo devuelve una expresión:\n\ntune()\n## tune()\n\nIncrustar este valor tune() en un argumento etiquetará el parámetro para su optimización. Las funciones de ajuste del modelo que se muestran en los dos capítulos siguientes analizan la especificación y/o receta del modelo para descubrir los parámetros etiquetados. Estas funciones pueden configurar y procesar automáticamente estos parámetros ya que comprenden sus características (por ejemplo, el rango de valores posibles, etc.).\nPara enumerar los parámetros de ajuste de un objeto, utilice la función extract_parameter_set_dials():\n\nextract_parameter_set_dials(neural_net_spec)\n## Collection of 1 parameters for tuning\n## \n##    identifier         type    object\n##  hidden_units hidden_units nparam[+]\n\nLos resultados muestran un valor de nparam[+], lo que indica que el número de unidades ocultas es un parámetro numérico.\nHay un argumento de identificación opcional que asocia un nombre con los parámetros. Esto puede resultar útil cuando se ajusta el mismo tipo de parámetro en diferentes lugares. Por ejemplo, con los datos de vivienda de Ames de Sección 10.6, la receta codificó tanto la longitud como la latitud con funciones spline. Si queremos ajustar las dos funciones spline para que potencialmente tengan diferentes niveles de suavidad, llamamos a step_ns() dos veces, una para cada predictor. Para que los parámetros sean identificables, el argumento de identificación puede tomar cualquier cadena de caracteres:\n\names_rec &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n           Latitude + Longitude, data = ames_train)  %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_other(Neighborhood, threshold = tune()) %&gt;% \n  step_dummy(all_nominal_predictors()) %&gt;% \n  step_interact( ~ Gr_Liv_Area:starts_with(\"Bldg_Type_\") ) %&gt;% \n  step_ns(Longitude, deg_free = tune(\"longitude df\")) %&gt;% \n  step_ns(Latitude,  deg_free = tune(\"latitude df\"))\n\nrecipes_param &lt;- extract_parameter_set_dials(ames_rec)\nrecipes_param\n## Collection of 3 parameters for tuning\n## \n##    identifier      type    object\n##     threshold threshold nparam[+]\n##  longitude df  deg_free nparam[+]\n##   latitude df  deg_free nparam[+]\n\nTenga en cuenta que las columnas identifier y type no son las mismas para ambos parámetros de spline.\nCuando se combinan una receta y una especificación de modelo mediante un flujo de trabajo, se muestran ambos conjuntos de parámetros:\n\nwflow_param &lt;- \n  workflow() %&gt;% \n  add_recipe(ames_rec) %&gt;% \n  add_model(neural_net_spec) %&gt;% \n  extract_parameter_set_dials()\nwflow_param\n## Collection of 4 parameters for tuning\n## \n##    identifier         type    object\n##  hidden_units hidden_units nparam[+]\n##     threshold    threshold nparam[+]\n##  longitude df     deg_free nparam[+]\n##   latitude df     deg_free nparam[+]\n\n\nLas redes neuronales son exquisitamente capaces de emular patrones no lineales. No es necesario agregar términos splines a este tipo de modelo; Combinamos este modelo y receta solo con fines ilustrativos.\n\nCada argumento de parámetro de ajuste tiene una función correspondiente en el paquete dials. En la gran mayoría de los casos, la función tiene el mismo nombre que el argumento del parámetro:\n\nhidden_units()\n## # Hidden Units (quantitative)\n## Range: [1, 10]\nthreshold()\n## Threshold (quantitative)\n## Range: [0, 1]\n\nEl parámetro deg_free es un contraejemplo; La noción de grados de libertad surge en una variedad de contextos diferentes. Cuando se usa con splines, hay una función especializada dials llamada spline_title() que, de forma predeterminada, se invoca para splines:\n\nspline_degree()\n## Spline Degrees of Freedom (quantitative)\n## Range: [1, 10]\n\nEl paquete dials también tiene una función conveniente para extraer un objeto de parámetro particular:\n\n# identifique el parámetro usando el valor de id:\nwflow_param %&gt;% extract_parameter_dials(\"threshold\")\n## Threshold (quantitative)\n## Range: [0, 0.1]\n\nDentro del conjunto de parámetros, el rango de parámetros también se puede actualizar en el lugar:\n\nextract_parameter_set_dials(ames_rec) %&gt;% \n  update(threshold = threshold(c(0.8, 1.0)))\n## Collection of 3 parameters for tuning\n## \n##    identifier      type    object\n##     threshold threshold nparam[+]\n##  longitude df  deg_free nparam[+]\n##   latitude df  deg_free nparam[+]\n\nLos conjuntos de parámetros creados por extract_parameter_set_dials() son consumidos por las funciones de ajuste de tidymodels (cuando sea necesario). Si los valores predeterminados de los objetos de parámetros de ajuste requieren modificación, se pasa un conjunto de parámetros modificado a la función de ajuste adecuada.\n\nAlgunos parámetros de ajuste dependen de las dimensiones de los datos. Por ejemplo, el número de vecinos más cercanos debe estar entre uno y el número de filas de los datos.\n\nEn algunos casos, es fácil tener valores predeterminados razonables para el rango de valores posibles. En otros casos, el rango de parámetros es crítico y no se puede asumir. El principal parámetro de ajuste para los modelos de bosque aleatorios es el número de columnas predictoras que se muestrean aleatoriamente para cada división del árbol, normalmente denominada “mtry()”. Sin conocer la cantidad de predictores, este rango de parámetros no se puede preconfigurar y requiere finalización.\n\nrf_spec &lt;- \n  rand_forest(mtry = tune()) %&gt;% \n  set_engine(\"ranger\", regularization.factor = tune(\"regularization\")) %&gt;%\n  set_mode(\"regression\")\n\nrf_param &lt;- extract_parameter_set_dials(rf_spec)\nrf_param\n## Collection of 2 parameters for tuning\n## \n##      identifier                  type    object\n##            mtry                  mtry nparam[?]\n##  regularization regularization.factor nparam[+]\n## \n## Model parameters needing finalization:\n##    # Randomly Selected Predictors ('mtry')\n## \n## See `?dials::finalize` or `?dials::update.parameters` for more information.\n\nLos objetos de parámetros completos tienen [+] en su resumen; un valor de [?] indica que falta al menos un extremo del rango posible. Hay dos métodos para manejar esto. La primera es usar update(), para agregar un rango basado en lo que sabes sobre las dimensiones de datos:\n\nrf_param %&gt;% \n  update(mtry = mtry(c(1, 70)))\n## Collection of 2 parameters for tuning\n## \n##      identifier                  type    object\n##            mtry                  mtry nparam[+]\n##  regularization regularization.factor nparam[+]\n\nSin embargo, es posible que este enfoque no funcione si se adjunta una receta a un flujo de trabajo que utiliza pasos que suman o restan columnas. Si esos pasos no están programados para ajustarse, la función finalize() puede ejecutar la receta una vez para obtener las dimensiones:\n\npca_rec &lt;- \n  recipe(Sale_Price ~ ., data = ames_train) %&gt;% \n  # Seleccione los predictores de pies cuadrados y extraiga sus componentes PCA:\n  step_normalize(contains(\"SF\")) %&gt;% \n  # Seleccione el número de componentes necesarios para capturar el 95% de\n  # la varianza en los predictores. \n  step_pca(contains(\"SF\"), threshold = .95)\n  \nupdated_param &lt;- \n  workflow() %&gt;% \n  add_model(rf_spec) %&gt;% \n  add_recipe(pca_rec) %&gt;% \n  extract_parameter_set_dials() %&gt;% \n  finalize(ames_train)\nupdated_param\n## Collection of 2 parameters for tuning\n## \n##      identifier                  type    object\n##            mtry                  mtry nparam[+]\n##  regularization regularization.factor nparam[+]\nupdated_param %&gt;% extract_parameter_dials(\"mtry\")\n## # Randomly Selected Predictors (quantitative)\n## Range: [1, 74]\n\nCuando se prepara la receta, la función finalize() aprende a establecer el rango superior de mtry en 74 predictores.\nAdemás, los resultados de extract_parameter_set_dials() incluirán parámetros específicos del motor (si los hay). Se descubren de la misma manera que los argumentos principales y se incluyen en el conjunto de parámetros. El paquete dials contiene funciones de parámetros para todos los parámetros específicos del motor potencialmente ajustables:\n\nrf_param\n## Collection of 2 parameters for tuning\n## \n##      identifier                  type    object\n##            mtry                  mtry nparam[?]\n##  regularization regularization.factor nparam[+]\n## \n## Model parameters needing finalization:\n##    # Randomly Selected Predictors ('mtry')\n## \n## See `?dials::finalize` or `?dials::update.parameters` for more information.\nregularization_factor()\n## Gain Penalization (quantitative)\n## Range: [0, 1]\n\nFinalmente, algunos parámetros de ajuste se asocian mejor con las transformaciones. Un buen ejemplo de esto es el parámetro de penalización asociado con muchos modelos de regresión regularizados. Este parámetro no es negativo y es común variar sus valores en unidades logarítmicas. El objeto de parámetro principal dials indica que se utiliza una transformación de forma predeterminada:\n\npenalty()\n## Amount of Regularization (quantitative)\n## Transformer: log-10 [1e-100, Inf]\n## Range (transformed scale): [-10, 0]\n\nEs importante saber esto, especialmente al modificar el rango. Los valores del nuevo rango deben estar en las unidades transformadas:\n\n# método correcto para tener valores de penalización entre 0,1 y 1,0\npenalty(c(-1, 0)) %&gt;% value_sample(1000) %&gt;% summary()\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   0.101   0.181   0.327   0.400   0.589   0.999\n\n# incorrecto:\npenalty(c(0.1, 1.0)) %&gt;% value_sample(1000) %&gt;% summary()\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##    1.26    2.21    3.68    4.26    5.89   10.00\n\nLa escala se puede cambiar si se desea con el argumento trans. Puedes usar unidades naturales pero del mismo rango:\n\npenalty(trans = NULL, range = 10^c(-10, 0))\n## Amount of Regularization (quantitative)\n## Range: [1e-10, 1]"
  },
  {
    "objectID": "15-workflow-sets.html#sec-racing-example",
    "href": "15-workflow-sets.html#sec-racing-example",
    "title": "15  Screening Many Models",
    "section": "\n15.4 Efficiently Screening Models",
    "text": "15.4 Efficiently Screening Models\nOne effective method for screening a large set of models efficiently is to use the racing approach described in Section 13.5.5. With a workflow set, we can use the workflow_map() function for this racing approach. Recall that after we pipe in our workflow set, the argument we use is the function to apply to the workflows; in this case, we can use a value of \"tune_race_anova\". We also pass an appropriate control object; otherwise the options would be the same as the code in the previous section.\n\nlibrary(finetune)\n\nrace_ctrl &lt;-\n   control_race(\n      save_pred = TRUE,\n      parallel_over = \"everything\",\n      save_workflow = TRUE\n   )\n\nrace_results &lt;-\n   all_workflows %&gt;%\n   workflow_map(\n      \"tune_race_anova\",\n      seed = 1503,\n      resamples = concrete_folds,\n      grid = 25,\n      control = race_ctrl\n   )\n\nThe new object looks very similar, although the elements of the result column show a value of \"race[+]\", indicating a different type of object:\n\nrace_results\n## # A workflow set/tibble: 12 × 4\n##   wflow_id    info             option    result   \n##   &lt;chr&gt;       &lt;list&gt;           &lt;list&gt;    &lt;list&gt;   \n## 1 MARS        &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;race[+]&gt;\n## 2 CART        &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;race[+]&gt;\n## 3 CART_bagged &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;rsmp[+]&gt;\n## 4 RF          &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;race[+]&gt;\n## 5 boosting    &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;race[+]&gt;\n## 6 Cubist      &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;race[+]&gt;\n## # ℹ 6 more rows\n\nThe same helpful functions are available for this object to interrogate the results and, in fact, the basic autoplot() method shown in Figure 15.31 produces trends similar to Figure 15.1. This is produced by:\n\nautoplot(\n   race_results,\n   rank_metric = \"rmse\",  \n   metric = \"rmse\",       \n   select_best = TRUE    \n) +\n   geom_text(aes(y = mean - 1/2, label = wflow_id), angle = 90, hjust = 1) +\n   lims(y = c(3.0, 9.5)) +\n   theme(legend.position = \"none\")\n\n\n\n\n\nFigure 15.3: Estimated RMSE (and approximate confidence intervals) for the best model configuration in each workflow in the racing results.\n\n\n\nOverall, the racing approach estimated a total of 900 models, 7.14% of the full set of 12,600 models in the full grid. As a result, the racing approach was 7-fold faster.\nDid we get similar results? For both objects, we rank the results, merge them, and plot them against one another in Figure 15.4.\n\nmatched_results &lt;- \n   rank_results(race_results, select_best = TRUE) %&gt;% \n   select(wflow_id, .metric, race = mean, config_race = .config) %&gt;% \n   inner_join(\n      rank_results(grid_results, select_best = TRUE) %&gt;% \n         select(wflow_id, .metric, complete = mean, \n                config_complete = .config, model),\n      by = c(\"wflow_id\", \".metric\"),\n   ) %&gt;%  \n   filter(.metric == \"rmse\")\n\nlibrary(ggrepel)\n\nmatched_results %&gt;% \n   ggplot(aes(x = complete, y = race)) + \n   geom_abline(lty = 3) + \n   geom_point() + \n   geom_text_repel(aes(label = model)) +\n   coord_obs_pred() + \n   labs(x = \"Complete Grid RMSE\", y = \"Racing RMSE\") \n\n\n\n\n\nFigure 15.4: Estimated RMSE for the full grid and racing results.\n\n\n\nWhile the racing approach selected the same candidate parameters as the complete grid for only 33.33% of the models, the performance metrics of the models selected by racing were nearly equal. The correlation of RMSE values was 0.965 and the rank correlation was 0.951. This indicates that, within a model, there were multiple tuning parameter combinations that had nearly identical results."
  },
  {
    "objectID": "15-workflow-sets.html#sec-workflow-sets-summary",
    "href": "15-workflow-sets.html#sec-workflow-sets-summary",
    "title": "15  Screening Many Models",
    "section": "\n15.6 Chapter Summary",
    "text": "15.6 Chapter Summary\nOften a data practitioner needs to consider a large number of possible modeling approaches for a task at hand, especially for new data sets and/or when there is little knowledge about what modeling strategy will work best. This chapter illustrated how to use workflow sets to investigate multiple models or feature engineering strategies in such a situation. Racing methods can more efficiently rank models than fitting every candidate model being considered.\n\n\n\n\nKuhn, M, and K Johnson. 2013. Applied Predictive Modeling. Springer."
  },
  {
    "objectID": "05-data-spending.html#sec-what-about-a-validation-set",
    "href": "05-data-spending.html#sec-what-about-a-validation-set",
    "title": "5  Gastar nuestros datos",
    "section": "\n5.2 ¿Qué pasa con un conjunto de validación?",
    "text": "5.2 ¿Qué pasa con un conjunto de validación?\nAl describir los objetivos de la división de datos, seleccionamos el conjunto de pruebas como los datos que deben usarse para evaluar adecuadamente el desempeño del modelo en los modelos finales. Esto plantea la pregunta: “¿Cómo podemos saber qué es mejor si no medimos el rendimiento hasta el conjunto de pruebas?”\nEs común escuchar acerca de conjuntos de validación como respuesta a esta pregunta, especialmente en la literatura sobre redes neuronales y aprendizaje profundo. Durante los primeros días de las redes neuronales, los investigadores se dieron cuenta de que medir el rendimiento reprediciendo las muestras del conjunto de entrenamiento conducía a resultados demasiado optimistas (de manera significativa y poco realista). Esto llevó a modelos que se sobreajustaron, lo que significa que tuvieron un desempeño muy bueno en el conjunto de entrenamiento pero pobre en el conjunto de prueba.[^05-data-spend-1] Para combatir este problema, se retuvo y utilizó un pequeño conjunto de datos de validación. para medir el desempeño a medida que se entrenaba la red. Una vez que la tasa de error del conjunto de validación comenzara a aumentar, el entrenamiento se detendría. En otras palabras, el conjunto de validación era un medio para tener una idea aproximada de qué tan bien se desempeñaba el modelo antes del conjunto de prueba.\n\nSi los conjuntos de validación son un subconjunto del conjunto de entrenamiento o una tercera asignación en la división inicial de los datos se reduce en gran medida a la semántica.\n\nLos conjuntos de validación se analizan más en Sección 10.2.2 como un caso especial de métodos de remuestreo que se utilizan en el conjunto de entrenamiento. Si va a utilizar un conjunto de validación, puede comenzar con una función de división diferente 1:\n\nset.seed(52)\n# Para dedicar el 60 % a la capacitación, el 20 % a la validación y el 20 % a las pruebas:\names_val_split &lt;- initial_validation_split(ames, prop = c(0.6, 0.2))\names_val_split\n## &lt;Training/Validation/Testing/Total&gt;\n## &lt;1758/586/586/2930&gt;\n\nAl imprimir la división ahora se muestra el tamaño del conjunto de entrenamiento. (1,758), del conjunto de validación (586), y del conjunto de prueba ((586).\nPara obtener los datos de entrenamiento, validación y prueba, se utiliza la misma sintaxis:\n\names_train &lt;- training(ames_val_split)\names_test &lt;- testing(ames_val_split)\names_val &lt;- validation(ames_val_split)\n\nSección 10.2.2 demostrará cómo utilizar el objeto ames_val_split para remuestreo y optimización del modelo."
  },
  {
    "objectID": "06-fitting-models.html#sec-create-a-model",
    "href": "06-fitting-models.html#sec-create-a-model",
    "title": "6  Creando Modelos con parsnip",
    "section": "\n6.1 Crear un Modelo",
    "text": "6.1 Crear un Modelo\nUna vez que los datos se han codificado en un formato listo para un algoritmo de modelado, como una matriz numérica, se pueden utilizar en el proceso de construcción del modelo.\nSupongamos que nuestra elección inicial fue un modelo de regresión lineal. Esto equivale a especificar que los datos del resultado son numéricos y que los predictores están relacionados con el resultado en términos de pendientes e intersecciones simples:\n\\[y_i = \\beta_0 + \\beta_1 x_{1i} + \\ldots + \\beta_p x_{pi}\\]\nSe pueden utilizar diversos métodos para estimar los parámetros del modelo:\n\nLa regresión lineal ordinaria utiliza el método tradicional de mínimos cuadrados para resolver los parámetros del modelo.\nRegresión lineal regularizada añade una penalización al método de mínimos cuadrados para fomentar la simplicidad eliminando predictores y/o reduciendo sus coeficientes hacia cero. Esto se puede ejecutar utilizando técnicas bayesianas o no bayesianas.\n\nEn R, el paquete stats se puede utilizar para el primer caso. La sintaxis para la regresión lineal usando la función lm() es:\nmodel &lt;- lm(formula, data, ...)\ndonde ... simboliza otras opciones para pasar a lm(). La función not tiene una interfaz x/y, donde podríamos pasar nuestro resultado como y y nuestros predictores como x.\nPara estimar con regularización, el segundo caso, se puede ajustar un modelo bayesiano usando el paquete rstanarm:\nmodel &lt;- stan_glm(formula, data, family = \"gaussian\", ...)\nEn este caso, las otras opciones pasadas a través de ... incluirían argumentos para las distribuciones anteriores de los parámetros, así como detalles sobre los aspectos numéricos del modelo. Al igual que con lm(), solo está disponible la interfaz de fórmula.\nUn enfoque popular no bayesiano para la regresión regularizada es el modelo glmnet (Friedman, Hastie, y Tibshirani 2010). Su sintaxis es:\nmodel &lt;- glmnet(x = matrix, y = vector, family = \"gaussian\", ...)\nEn este caso, los datos del predictor ya deben estar formateados en una matriz numérica; solo hay un método x/y y ningún método de fórmula.\nTenga en cuenta que estas interfaces son heterogéneas en la forma en que se pasan los datos a la función del modelo o en términos de sus argumentos. El primer problema es que, para ajustar los modelos a diferentes paquetes, los datos deben formatearse de diferentes maneras. lm() y stan_glm() solo tienen interfaces de fórmula mientras que glmnet() no. Para otro tipo de modelos, las interfaces pueden ser aún más dispares. Para una persona que intenta realizar un análisis de datos, estas diferencias requieren la memorización de la sintaxis de cada paquete y pueden resultar muy frustrantes.\nPara tidymodels, el enfoque para especificar un modelo pretende ser más unificado:\n\nEspecifique el tipo de modelo según su estructura matemática (por ejemplo, regresión lineal, random forest, KNN, etc.).\nEspecificar motor para montar el modelo. La mayoría de las veces esto refleja el paquete de software que se debe utilizar, como Stan o glmnet. Estos son modelos por derecho propio, y parsnip proporciona interfaces consistentes al usarlos como motores para el modelado.\nCuando sea necesario, declarar el moda del modelo. El modo refleja el tipo de resultado de la predicción. Para resultados numéricos, el modo es la regresión; para resultados cualitativos, es clasificación.1 Si un algoritmo modelo solo puede abordar un tipo de resultado de predicción, como la regresión lineal, el modo ya está establecido.\n\nEstas especificaciones se construyen sin hacer referencia a los datos. Por ejemplo, para los tres casos que describimos:\n\nlibrary(tidymodels)\ntidymodels_prefer()\n\nlinear_reg() %&gt;% set_engine(\"lm\")\n## Linear Regression Model Specification (regression)\n## \n## Computational engine: lm\n\nlinear_reg() %&gt;% set_engine(\"glmnet\") \n## Linear Regression Model Specification (regression)\n## \n## Computational engine: glmnet\n\nlinear_reg() %&gt;% set_engine(\"stan\")\n## Linear Regression Model Specification (regression)\n## \n## Computational engine: stan\n\nUna vez que se han especificado los detalles del modelo, la estimación del modelo se puede realizar con la función fit() (para usar una fórmula) o con la función fit_xy() (cuando sus datos ya están preprocesados). El paquete parsnip permite al usuario ser indiferente a la interfaz del modelo subyacente; siempre puedes usar una fórmula incluso si la función del paquete de modelado solo tiene la interfaz x/y.\nLa función translate() puede proporcionar detalles sobre cómo parsnip convierte el código del usuario a la sintaxis del paquete:\n\nlinear_reg() %&gt;% set_engine(\"lm\") %&gt;% translate()\n## Linear Regression Model Specification (regression)\n## \n## Computational engine: lm \n## \n## Model fit template:\n## stats::lm(formula = missing_arg(), data = missing_arg(), weights = missing_arg())\n\nlinear_reg(penalty = 1) %&gt;% set_engine(\"glmnet\") %&gt;% translate()\n## Linear Regression Model Specification (regression)\n## \n## Main Arguments:\n##   penalty = 1\n## \n## Computational engine: glmnet \n## \n## Model fit template:\n## glmnet::glmnet(x = missing_arg(), y = missing_arg(), weights = missing_arg(), \n##     family = \"gaussian\")\n\nlinear_reg() %&gt;% set_engine(\"stan\") %&gt;% translate()\n## Linear Regression Model Specification (regression)\n## \n## Computational engine: stan \n## \n## Model fit template:\n## rstanarm::stan_glm(formula = missing_arg(), data = missing_arg(), \n##     weights = missing_arg(), family = stats::gaussian, refresh = 0)\n\nTenga en cuenta que missing_arg() es solo un marcador de posición para los datos que aún no se han proporcionado.\n\nProporcionamos un argumento de penalty (penalización) requerido para el motor glmnet. Además, para los motores Stan y glmnet, el argumento famiy(familia) se agregó automáticamente como valor predeterminado. Como se mostrará más adelante en esta sección, esta opción se puede cambiar.\n\nVeamos cómo predecir el precio de venta de las casas en los datos de Ames en función únicamente de la longitud y la latitud:2\n\nlm_model &lt;- \n  linear_reg() %&gt;% \n  set_engine(\"lm\")\n\nlm_form_fit &lt;- \n  lm_model %&gt;% \n  # Recuerde que a Sale_Price se le ha aplicado una transformación logarítmica previamente\n  fit(Sale_Price ~ Longitude + Latitude, data = ames_train)\n\nlm_xy_fit &lt;- \n  lm_model %&gt;% \n  fit_xy(\n    x = ames_train %&gt;% select(Longitude, Latitude),\n    y = ames_train %&gt;% pull(Sale_Price)\n  )\n\nlm_form_fit\n## parsnip model object\n## \n## \n## Call:\n## stats::lm(formula = Sale_Price ~ Longitude + Latitude, data = data)\n## \n## Coefficients:\n## (Intercept)    Longitude     Latitude  \n##     -302.97        -2.07         2.71\nlm_xy_fit\n## parsnip model object\n## \n## \n## Call:\n## stats::lm(formula = ..y ~ ., data = data)\n## \n## Coefficients:\n## (Intercept)    Longitude     Latitude  \n##     -302.97        -2.07         2.71\n\nparsnip no solo permite una interfaz de modelo coherente para diferentes paquetes, sino que también proporciona coherencia en los argumentos del modelo. Es común que diferentes funciones que se ajustan al mismo modelo tengan diferentes nombres de argumentos. Las funciones del modelo de random forest son un buen ejemplo. Tres argumentos comúnmente utilizados son la cantidad de árboles en el conjunto, la cantidad de predictores para muestrear aleatoriamente con cada división dentro de un árbol y la cantidad de puntos de datos necesarios para realizar una división. Para tres paquetes R diferentes que implementan este algoritmo, esos argumentos se muestran en Tabla 6.1.\n\n\n\n\nTabla 6.1: Ejemplos de nombres de argumentos para diferentes funciones de random forest.\n\nTipo de argumento\nranger\nrandomForest\nsparklyr\n\n\n\n# predictores muestreo\nmtry\nmtry\nfeature_subset_strategy\n\n\n# árboles\nnum.trees\nntree\nnum_trees\n\n\n# puntos de datos por división\nmin.node.size\nnodesize\nmin_instances_per_node\n\n\n\n\n\n\n\n\nEn un esfuerzo por hacer que la especificación de argumentos sea menos complicada, parsnip utiliza nombres de argumentos comunes dentro y entre paquetes. Tabla 6.2 muestra, para radom forest, qué utilizan los modelos parsnip.\n\n\n\n\nTabla 6.2: Nombres de argumentos de random forest utilizados por parsnip.\n\nTipo de argumento\nparsnip\n\n\n\n# predictores muestreo\nmtry\n\n\n# árboles\ntrees\n\n\n# puntos de datos por división\nmin_n\n\n\n\n\n\n\n\n\nEs cierto que este es un conjunto más de argumentos para memorizar. Sin embargo, cuando otros tipos de modelos tienen los mismos tipos de argumentos, estos nombres aún se aplican. Por ejemplo, los conjuntos de árboles potenciados también crean una gran cantidad de modelos basados ​​en árboles, por lo que allí también se utilizan trees, al igual que min_n, etc.\nAlgunos de los nombres de los argumentos originales pueden ser bastante jerga. Por ejemplo, para especificar la cantidad de regularización que se utilizará en un modelo glmnet, se utiliza la letra griega lambda. Si bien esta notación matemática se usa comúnmente en la literatura estadística, para muchas personas no es obvio qué representa “lambda” (especialmente aquellos que consumen los resultados del modelo). Dado que esta es la penalización utilizada en la regularización, parsnip estandariza el nombre del argumento penalty. De manera similar, el número de vecinos en un modelo KNN se denomina neighbors en lugar de k. Nuestra regla general al estandarizar los nombres de los argumentos es:\n\nSi un profesional incluyera estos nombres en un gráfico o tabla, ¿entenderían el nombre las personas que vieran esos resultados?\n\nPara comprender cómo los nombres de los argumentos parsnip se asignan a los nombres originales, use el archivo de ayuda para el modelo (disponible a través de ?rand_forest), así como la función translate():\n\nrand_forest(trees = 1000, min_n = 5) %&gt;% \n  set_engine(\"ranger\") %&gt;% \n  set_mode(\"regression\") %&gt;% \n  translate()\n## Random Forest Model Specification (regression)\n## \n## Main Arguments:\n##   trees = 1000\n##   min_n = 5\n## \n## Computational engine: ranger \n## \n## Model fit template:\n## ranger::ranger(x = missing_arg(), y = missing_arg(), weights = missing_arg(), \n##     num.trees = 1000, min.node.size = min_rows(~5, x), num.threads = 1, \n##     verbose = FALSE, seed = sample.int(10^5, 1))\n\nLas funciones de modelado en parsnip separan los argumentos del modelo en dos categorías:\n\nLos argumentos principales se utilizan con más frecuencia y tienden a estar disponibles en todos los motores.\nLos argumentos del motor son específicos de un motor en particular o se usan con menos frecuencia.\n\nPor ejemplo, en la traducción del código de random forest anterior, los argumentos num.threads, verbose y seed se agregaron de forma predeterminada. Estos argumentos son específicos de la implementación ranger de modelos random forest y no tendrían sentido como argumentos principales. Los argumentos específicos del motor se pueden especificar en set_engine(). Por ejemplo, para que la función ranger::ranger() imprima más información sobre el ajuste:\n\nrand_forest(trees = 1000, min_n = 5) %&gt;% \n  set_engine(\"ranger\", verbose = TRUE) %&gt;% \n  set_mode(\"regression\") \n## Random Forest Model Specification (regression)\n## \n## Main Arguments:\n##   trees = 1000\n##   min_n = 5\n## \n## Engine-Specific Arguments:\n##   verbose = TRUE\n## \n## Computational engine: ranger"
  },
  {
    "objectID": "13-grid-search.html#sec-grids",
    "href": "13-grid-search.html#sec-grids",
    "title": "13  Búsqueda de cuadrícula",
    "section": "\n13.1 Cuadrículas regulares y no regulares",
    "text": "13.1 Cuadrículas regulares y no regulares\nHay dos tipos principales de cuadrículas. Una cuadrícula regular combina cada parámetro (con su correspondiente conjunto de valores posibles) factorialmente, es decir, utilizando todas las combinaciones de los conjuntos. Alternativamente, una cuadrícula no regular es aquella en la que las combinaciones de parámetros no se forman a partir de un pequeño conjunto de puntos.\nAntes de analizar cada tipo con más detalle, consideremos un modelo de ejemplo: el modelo de perceptrón multicapa (también conocido como red neuronal artificial de una sola capa). Los parámetros marcados para tuning son:\n\nel número de unidades ocultas\nel número de épocas/iteraciones de ajuste en el entrenamiento del modelo\nla cantidad de penalización por pérdida de peso\n\n\nHistóricamente, el número de épocas estuvo determinado por la detención temprana; un conjunto de validación separado determinó la duración del entrenamiento en función de la tasa de error, ya que volver a predecir el conjunto de entrenamiento conducía a un sobreajuste. En nuestro caso, el uso de una penalización por disminución de peso debería prohibir el sobreajuste, y hay poco daño en ajustar la penalización y el número de épocas.\n\nUsando parsnip, la especificación para un modelo de clasificación que se ajusta usando el paquete nnet es:\n\nlibrary(tidymodels)\ntidymodels_prefer()\n\nmlp_spec &lt;- \n  mlp(hidden_units = tune(), penalty = tune(), epochs = tune()) %&gt;% \n  set_engine(\"nnet\", trace = 0) %&gt;% \n  set_mode(\"classification\")\n\nThe argument trace = 0 prevents extra logging of the training process. As shown in Sección 12.6, the extract_parameter_set_dials() function can extract the set of arguments with unknown values and sets their dials objects:\n\nmlp_param &lt;- extract_parameter_set_dials(mlp_spec)\nmlp_param %&gt;% extract_parameter_dials(\"hidden_units\")\n## # Hidden Units (quantitative)\n## Range: [1, 10]\nmlp_param %&gt;% extract_parameter_dials(\"penalty\")\n## Amount of Regularization (quantitative)\n## Transformer: log-10 [1e-100, Inf]\n## Range (transformed scale): [-10, 0]\nmlp_param %&gt;% extract_parameter_dials(\"epochs\")\n## # Epochs (quantitative)\n## Range: [10, 1000]\n\nThis output indicates that the parameter objects are complete and prints their default ranges. These values will be used to demonstrate how to create different types of parameter grids.\nRegular grids\nRegular grids are combinations of separate sets of parameter values. First, the user creates a distinct set of values for each parameter. The number of possible values need not be the same for each parameter. The tidyr function crossing() is one way to create a regular grid:\n\ncrossing(\n  hidden_units = 1:3,\n  penalty = c(0.0, 0.1),\n  epochs = c(100, 200)\n)\n## # A tibble: 12 × 3\n##   hidden_units penalty epochs\n##          &lt;int&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n## 1            1     0      100\n## 2            1     0      200\n## 3            1     0.1    100\n## 4            1     0.1    200\n## 5            2     0      100\n## 6            2     0      200\n## # ℹ 6 more rows\n\nThe parameter object knows the ranges of the parameters. The dials package contains a set of grid_*() functions that take the parameter object as input to produce different types of grids. For example:\n\ngrid_regular(mlp_param, levels = 2)\n## # A tibble: 8 × 3\n##   hidden_units      penalty epochs\n##          &lt;int&gt;        &lt;dbl&gt;  &lt;int&gt;\n## 1            1 0.0000000001     10\n## 2           10 0.0000000001     10\n## 3            1 1                10\n## 4           10 1                10\n## 5            1 0.0000000001   1000\n## 6           10 0.0000000001   1000\n## # ℹ 2 more rows\n\nThe levels argument is the number of levels per parameter to create. It can also take a named vector of values:\n\nmlp_param %&gt;% \n  grid_regular(levels = c(hidden_units = 3, penalty = 2, epochs = 2))\n## # A tibble: 12 × 3\n##   hidden_units      penalty epochs\n##          &lt;int&gt;        &lt;dbl&gt;  &lt;int&gt;\n## 1            1 0.0000000001     10\n## 2            5 0.0000000001     10\n## 3           10 0.0000000001     10\n## 4            1 1                10\n## 5            5 1                10\n## 6           10 1                10\n## # ℹ 6 more rows\n\nThere are techniques for creating regular grids that do not use all possible values of each parameter set. These fractional factorial designs (Box, Hunter, y Hunter 2005) could also be used. To learn more, consult the CRAN Task View for experimental design.1\n\nRegular grids can be computationally expensive to use, especially when there are a medium-to-large number of tuning parameters. This is true for many models but not all. As discussed in Sección 13.5 below, there are many models whose tuning time decreases with a regular grid!\n\nOne advantage to using a regular grid is that the relationships and patterns between the tuning parameters and the model metrics are easily understood. The factorial nature of these designs allows for examination of each parameter separately with little confounding between parameters.\nIrregular grids\nThere are several options for creating non-regular grids. The first is to use random sampling across the range of parameters. The grid_random() function generates independent uniform random numbers across the parameter ranges. If the parameter object has an associated transformation (such as we have for penalty), the random numbers are generated on the transformed scale. Let’s create a random grid for the parameters from our example neural network:\n\nset.seed(1301)\nmlp_param %&gt;% \n  grid_random(size = 1000) %&gt;% # 'size' is the number of combinations\n  summary()\n##   hidden_units      penalty           epochs   \n##  Min.   : 1.00   Min.   :0.0000   Min.   : 10  \n##  1st Qu.: 3.00   1st Qu.:0.0000   1st Qu.:266  \n##  Median : 5.00   Median :0.0000   Median :497  \n##  Mean   : 5.38   Mean   :0.0437   Mean   :510  \n##  3rd Qu.: 8.00   3rd Qu.:0.0027   3rd Qu.:761  \n##  Max.   :10.00   Max.   :0.9814   Max.   :999\n\nFor penalty, the random numbers are uniform on the log (base-10) scale but the values in the grid are in the natural units.\nThe issue with random grids is that, with small-to-medium grids, random values can result in overlapping parameter combinations. Also, the random grid needs to cover the whole parameter space, but the likelihood of good coverage increases with the number of grid values. Even for a sample of 15 candidate points, Figura 13.1 shows some overlap between points for our example multilayer perceptron.\n\nlibrary(ggforce)\nset.seed(1302)\nmlp_param %&gt;% \n  # The 'original = FALSE' option keeps penalty in log10 units\n  grid_random(size = 20, original = FALSE) %&gt;% \n  ggplot(aes(x = .panel_x, y = .panel_y)) + \n  geom_point() +\n  geom_blank() +\n  facet_matrix(vars(hidden_units, penalty, epochs), layer.diag = 2) + \n  labs(title = \"Random design with 20 candidates\")\n\n\n\n\n\nFigura 13.1: Three tuning parameters with 15 points generated at random\n\n\n\nA much better approach is to use a set of experimental designs called space-filling designs. While different design methods have slightly different goals, they generally find a configuration of points that cover the parameter space with the smallest chance of overlapping or redundant values. Examples of such designs are Latin hypercubes (McKay, Beckman, y Conover 1979), maximum entropy designs (Shewry y Wynn 1987), maximum projection designs (Joseph, Gul, y Ba 2015), and others. See Santner et al. (2003) for an overview.\nThe dials package contains functions for Latin hypercube and maximum entropy designs. As with grid_random(), the primary inputs are the number of parameter combinations and a parameter object. Let’s compare a random design with a Latin hypercube design for 20 candidate parameter values in Figura 13.2.\n\nset.seed(1303)\nmlp_param %&gt;% \n  grid_latin_hypercube(size = 20, original = FALSE) %&gt;% \n  ggplot(aes(x = .panel_x, y = .panel_y)) + \n  geom_point() +\n  geom_blank() +\n  facet_matrix(vars(hidden_units, penalty, epochs), layer.diag = 2) + \n  labs(title = \"Latin Hypercube design with 20 candidates\")\n\n\n\n\n\nFigura 13.2: Three tuning parameters with 20 points generated using a space-filling design\n\n\n\nWhile not perfect, this Latin hypercube design spaces the points farther away from one another and allows a better exploration of the hyperparameter space.\nSpace-filling designs can be very effective at representing the parameter space. The default design used by the tune package is the maximum entropy design. These tend to produce grids that cover the candidate space well and drastically increase the chances of finding good results."
  },
  {
    "objectID": "13-grid-search.html#sec-evaluating-grid",
    "href": "13-grid-search.html#sec-evaluating-grid",
    "title": "13  Búsqueda de cuadrícula",
    "section": "\n13.2 Evaluating the Grid",
    "text": "13.2 Evaluating the Grid\nTo choose the best tuning parameter combination, each candidate set is assessed using data that were not used to train that model. Resampling methods or a single validation set work well for this purpose. The process (and syntax) closely resembles the approach in Sección 10.3 that used the fit_resamples() function from the tune package.\nAfter resampling, the user selects the most appropriate candidate parameter set. It might make sense to choose the empirically best parameter combination or bias the choice towards other aspects of the model fit, such as simplicity.\nWe use a classification data set to demonstrate model tuning in this and the next chapter. The data come from Hill et al. (2007), who developed an automated microscopy laboratory tool for cancer research. The data consists of 56 imaging measurements on 2019 human breast cancer cells. These predictors represent shape and intensity characteristics of different parts of the cells (e.g., the nucleus, the cell boundary, etc.). There is a high degree of correlation between the predictors. For example, there are several different predictors that measure the size and shape of the nucleus and cell boundary. Also, individually, many predictors have skewed distributions.\nEach cell belongs to one of two classes. Since this is part of an automated lab test, the focus was on prediction capability rather than inference.\nThe data are included in the modeldata package. Let’s remove one column not needed for analysis (case):\n\nlibrary(tidymodels)\ndata(cells)\ncells &lt;- cells %&gt;% select(-case)\n\nGiven the dimensions of the data, we can compute performance metrics using 10-fold cross-validation:\n\nset.seed(1304)\ncell_folds &lt;- vfold_cv(cells)\n\nBecause of the high degree of correlation between predictors, it makes sense to use PCA feature extraction to decorrelate the predictors. The following recipe contains steps to transform the predictors to increase symmetry, normalize them to be on the same scale, then conduct feature extraction. The number of PCA components to retain is also tuned, along with the model parameters.\n\nWhile the resulting PCA components are technically on the same scale, the lower-rank components tend to have a wider range than the higher-rank components. For this reason, we normalize again to coerce the predictors to have the same mean and variance.\n\nMany of the predictors have skewed distributions. Since PCA is variance based, extreme values can have a detrimental effect on these calculations. To counter this, let’s add a recipe step estimating a Yeo-Johnson transformation for each predictor (Yeo y Johnson 2000). While originally intended as a transformation of the outcome, it can also be used to estimate transformations that encourage more symmetric distributions. This step step_YeoJohnson() occurs in the recipe just prior to the initial normalization via step_normalize(). Then, let’s combine this feature engineering recipe with our neural network model specification mlp_spec.\n\nmlp_rec &lt;-\n  recipe(class ~ ., data = cells) %&gt;%\n  step_YeoJohnson(all_numeric_predictors()) %&gt;% \n  step_normalize(all_numeric_predictors()) %&gt;% \n  step_pca(all_numeric_predictors(), num_comp = tune()) %&gt;% \n  step_normalize(all_numeric_predictors())\n\nmlp_wflow &lt;- \n  workflow() %&gt;% \n  add_model(mlp_spec) %&gt;% \n  add_recipe(mlp_rec)\n\nLet’s create a parameter object mlp_param to adjust a few of the default ranges. We can change the number of epochs to have a smaller range (50 to 200 epochs). Also, the default range for num_comp() defaults to a very narrow range (one to four components); we can increase the range to 40 components and set the minimum value to zero:\n\nmlp_param &lt;- \n  mlp_wflow %&gt;% \n  extract_parameter_set_dials() %&gt;% \n  Matrix::update(\n    epochs = epochs(c(50, 200)),\n    num_comp = num_comp(c(0, 40))\n  )\n\n\nIn step_pca(), using zero PCA components is a shortcut to skip the feature extraction. In this way, the original predictors can be directly compared to the results that include PCA components.\n\nThe tune_grid() function is the primary function for conducting grid search. Its functionality is very similar to fit_resamples() from Sección 10.3, although it has additional arguments related to the grid:\n\ngrid: An integer or data frame. When an integer is used, the function creates a space-filling design with grid number of candidate parameter combinations. If specific parameter combinations exist, the grid parameter is used to pass them to the function.\nparam_info: An optional argument for defining the parameter ranges. The argument is most useful when grid is an integer.\n\nOtherwise, the interface to tune_grid() is the same as fit_resamples(). The first argument is either a model specification or workflow. When a model is given, the second argument can be either a recipe or formula. The other required argument is an rsample resampling object (such as cell_folds). The following call also passes a metric set so that the area under the ROC curve is measured during resampling.\nTo start, let’s evaluate a regular grid with three levels across the resamples:\n\nroc_res &lt;- metric_set(roc_auc)\nset.seed(1305)\nmlp_reg_tune &lt;-\n  mlp_wflow %&gt;%\n  tune_grid(\n    cell_folds,\n    grid = mlp_param %&gt;% grid_regular(levels = 3),\n    metrics = roc_res\n  )\nmlp_reg_tune\n## # Tuning results\n## # 10-fold cross-validation \n## # A tibble: 10 × 4\n##   splits             id     .metrics          .notes          \n##   &lt;list&gt;             &lt;chr&gt;  &lt;list&gt;            &lt;list&gt;          \n## 1 &lt;split [1817/202]&gt; Fold01 &lt;tibble [81 × 8]&gt; &lt;tibble [0 × 3]&gt;\n## 2 &lt;split [1817/202]&gt; Fold02 &lt;tibble [81 × 8]&gt; &lt;tibble [0 × 3]&gt;\n## 3 &lt;split [1817/202]&gt; Fold03 &lt;tibble [81 × 8]&gt; &lt;tibble [0 × 3]&gt;\n## 4 &lt;split [1817/202]&gt; Fold04 &lt;tibble [81 × 8]&gt; &lt;tibble [0 × 3]&gt;\n## 5 &lt;split [1817/202]&gt; Fold05 &lt;tibble [81 × 8]&gt; &lt;tibble [0 × 3]&gt;\n## 6 &lt;split [1817/202]&gt; Fold06 &lt;tibble [81 × 8]&gt; &lt;tibble [0 × 3]&gt;\n## # ℹ 4 more rows\n\nThere are high-level convenience functions we can use to understand the results. First, the autoplot() method for regular grids shows the performance profiles across tuning parameters in Figura 13.3.\n\nautoplot(mlp_reg_tune) + \n  scale_color_viridis_d(direction = -1) + \n  theme(legend.position = \"top\")\n\n\n\n\n\nFigura 13.3: The regular grid results\n\n\n\nFor these data, the amount of penalization has the largest impact on the area under the ROC curve. The number of epochs doesn’t appear to have a pronounced effect on performance. The change in the number of hidden units appears to matter most when the amount of regularization is low (and harms performance). There are several parameter configurations that have roughly equivalent performance, as seen using the function show_best():\n\nshow_best(mlp_reg_tune) %&gt;% select(-.estimator)\n## # A tibble: 5 × 9\n##   hidden_units penalty epochs num_comp .metric  mean     n std_err .config          \n##          &lt;int&gt;   &lt;dbl&gt;  &lt;int&gt;    &lt;int&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;            \n## 1            5       1     50        0 roc_auc 0.897    10 0.00857 Preprocessor1_Mo…\n## 2           10       1    125        0 roc_auc 0.895    10 0.00898 Preprocessor1_Mo…\n## 3           10       1     50        0 roc_auc 0.894    10 0.00960 Preprocessor1_Mo…\n## 4            5       1    200        0 roc_auc 0.894    10 0.00784 Preprocessor1_Mo…\n## 5            5       1    125        0 roc_auc 0.892    10 0.00822 Preprocessor1_Mo…\n\nBased on these results, it would make sense to conduct another run of grid search with larger values of the weight decay penalty.\nTo use a space-filling design, either the grid argument can be given an integer or one of the grid_*() functions can produce a data frame. To evaluate the same range using a maximum entropy design with 20 candidate values:\n\nset.seed(1306)\nmlp_sfd_tune &lt;-\n  mlp_wflow %&gt;%\n  tune_grid(\n    cell_folds,\n    grid = 20,\n    # Pass in the parameter object to use the appropriate range: \n    param_info = mlp_param,\n    metrics = roc_res\n  )\nmlp_sfd_tune\n## # Tuning results\n## # 10-fold cross-validation \n## # A tibble: 10 × 4\n##   splits             id     .metrics          .notes          \n##   &lt;list&gt;             &lt;chr&gt;  &lt;list&gt;            &lt;list&gt;          \n## 1 &lt;split [1817/202]&gt; Fold01 &lt;tibble [20 × 8]&gt; &lt;tibble [0 × 3]&gt;\n## 2 &lt;split [1817/202]&gt; Fold02 &lt;tibble [20 × 8]&gt; &lt;tibble [0 × 3]&gt;\n## 3 &lt;split [1817/202]&gt; Fold03 &lt;tibble [20 × 8]&gt; &lt;tibble [0 × 3]&gt;\n## 4 &lt;split [1817/202]&gt; Fold04 &lt;tibble [20 × 8]&gt; &lt;tibble [0 × 3]&gt;\n## 5 &lt;split [1817/202]&gt; Fold05 &lt;tibble [20 × 8]&gt; &lt;tibble [0 × 3]&gt;\n## 6 &lt;split [1817/202]&gt; Fold06 &lt;tibble [20 × 8]&gt; &lt;tibble [0 × 3]&gt;\n## # ℹ 4 more rows\n\nThe autoplot() method will also work with these designs, although the format of the results will be different. Figura 13.4 was produced using autoplot(mlp_sfd_tune).\n\n\n\n\nFigura 13.4: The autoplot() method results when used with a space-filling design\n\n\n\nThis marginal effects plot (Figura 13.4) shows the relationship of each parameter with the performance metric.\n\nTake care when examining this plot; since a regular grid is not used, the values of the other tuning parameters can affect each panel.\n\nThe penalty parameter appears to result in better performance with smaller amounts of weight decay. This is the opposite of the results from the regular grid. Since each point in each panel is shared with the other three tuning parameters, the trends in one panel can be affected by the others. Using a regular grid, each point in each panel is equally averaged over the other parameters. For this reason, the effect of each parameter is better isolated with regular grids.\nAs with the regular grid, show_best() can report on the numerically best results:\n\nshow_best(mlp_sfd_tune) %&gt;% select(-.estimator)\n## # A tibble: 5 × 9\n##   hidden_units       penalty epochs num_comp .metric  mean     n std_err .config    \n##          &lt;int&gt;         &lt;dbl&gt;  &lt;int&gt;    &lt;int&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;      \n## 1            8 0.594             97       22 roc_auc 0.880    10 0.00998 Preprocess…\n## 2            3 0.00000000649    135        8 roc_auc 0.878    10 0.00953 Preprocess…\n## 3            9 0.141            177       11 roc_auc 0.873    10 0.0104  Preprocess…\n## 4            8 0.0000000103      74        9 roc_auc 0.869    10 0.00761 Preprocess…\n## 5            6 0.00581          129       15 roc_auc 0.865    10 0.00658 Preprocess…\n\nGenerally, it is a good idea to evaluate the models over multiple metrics so that different aspects of the model fit are taken into account. Also, it often makes sense to choose a slightly suboptimal parameter combination that is associated with a simpler model. For this model, simplicity corresponds to larger penalty values and/or fewer hidden units.\nAs with the results from fit_resamples(), there is usually no value in retaining the intermediary model fits across the resamples and tuning parameters. However, as before, the extract option to control_grid() allows the retention of the fitted models and/or recipes. Also, setting the save_pred option to TRUE retains the assessment set predictions and these can be accessed using collect_predictions()."
  },
  {
    "objectID": "13-grid-search.html#finalizing-the-model",
    "href": "13-grid-search.html#finalizing-the-model",
    "title": "13  Búsqueda de cuadrícula",
    "section": "\n13.3 Finalizing the Model",
    "text": "13.3 Finalizing the Model\nIf one of the sets of possible model parameters found via show_best() were an attractive final option for these data, we might wish to evaluate how well it does on the test set. However, the results of tune_grid() only provide the substrate to choose appropriate tuning parameters. The function does not fit a final model.\nTo fit a final model, a final set of parameter values must be determined. There are two methods to do so:\n\nmanually pick values that appear appropriate or\nuse a select_*() function.\n\nFor example, select_best() will choose the parameters with the numerically best results. Let’s go back to our regular grid results and see which one is best:\n\nselect_best(mlp_reg_tune, metric = \"roc_auc\")\n## # A tibble: 1 × 5\n##   hidden_units penalty epochs num_comp .config              \n##          &lt;int&gt;   &lt;dbl&gt;  &lt;int&gt;    &lt;int&gt; &lt;chr&gt;                \n## 1            5       1     50        0 Preprocessor1_Model08\n\nLooking back at Figura 13.3, we can see that a model with a single hidden unit trained for 125 epochs on the original predictors with a large amount of penalization has performance competitive with this option, and is simpler. This is basically penalized logistic regression! To manually specify these parameters, we can create a tibble with these values and then use a finalization function to splice the values back into the workflow:\n\nlogistic_param &lt;- \n  tibble(\n    num_comp = 0,\n    epochs = 125,\n    hidden_units = 1,\n    penalty = 1\n  )\n\nfinal_mlp_wflow &lt;- \n  mlp_wflow %&gt;% \n  finalize_workflow(logistic_param)\nfinal_mlp_wflow\n## ══ Workflow ═════════════════════════════════════════════════════════════════════════\n## Preprocessor: Recipe\n## Model: mlp()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## 4 Recipe Steps\n## \n## • step_YeoJohnson()\n## • step_normalize()\n## • step_pca()\n## • step_normalize()\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## Single Layer Neural Network Model Specification (classification)\n## \n## Main Arguments:\n##   hidden_units = 1\n##   penalty = 1\n##   epochs = 125\n## \n## Engine-Specific Arguments:\n##   trace = 0\n## \n## Computational engine: nnet\n\nNo more values of tune() are included in this finalized workflow. Now the model can be fit to the entire training set:\n\nfinal_mlp_fit &lt;- \n  final_mlp_wflow %&gt;% \n  fit(cells)\n\nThis object can now be used to make future predictions on new data.\nIf you did not use a workflow, finalization of a model and/or recipe is done using finalize_model() and finalize_recipe()."
  },
  {
    "objectID": "13-grid-search.html#sec-tuning-usemodels",
    "href": "13-grid-search.html#sec-tuning-usemodels",
    "title": "13  Búsqueda de cuadrícula",
    "section": "\n13.4 Tools for Creating Tuning Specifications",
    "text": "13.4 Tools for Creating Tuning Specifications\nThe usemodels package can take a data frame and model formula, then write out R code for tuning the model. The code also creates an appropriate recipe whose steps depend on the requested model as well as the predictor data.\nFor example, for the Ames housing data, xgboost modeling code could be created with:\n\nlibrary(usemodels)\n\nuse_xgboost(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n              Latitude + Longitude, \n            data = ames_train,\n            # Add comments explaining some of the code:\n            verbose = TRUE)\n\nThe resulting code is as follows:\n\nxgboost_recipe &lt;- \n  recipe(formula = Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n    Latitude + Longitude, data = ames_train) %&gt;% \n  step_novel(all_nominal_predictors()) %&gt;% \n  ## This model requires the predictors to be numeric. The most common \n  ## method to convert qualitative predictors to numeric is to create \n  ## binary indicator variables (aka dummy variables) from these \n  ## predictors. However, for this model, binary indicator variables can be \n  ## made for each of the levels of the factors (known as 'one-hot \n  ## encoding'). \n  step_dummy(all_nominal_predictors(), one_hot = TRUE) %&gt;% \n  step_zv(all_predictors()) \n\nxgboost_spec &lt;- \n  boost_tree(trees = tune(), min_n = tune(), tree_depth = tune(), learn_rate = tune(), \n    loss_reduction = tune(), sample_size = tune()) %&gt;% \n  set_mode(\"regression\") %&gt;% \n  set_engine(\"xgboost\") \n\nxgboost_workflow &lt;- \n  workflow() %&gt;% \n  add_recipe(xgboost_recipe) %&gt;% \n  add_model(xgboost_spec) \n\nset.seed(69305)\nxgboost_tune &lt;-\n  tune_grid(xgboost_workflow, \n            resamples = stop(\"add your rsample object\"), \n            grid = stop(\"add number of candidate points\"))\n\nBased on what usemodels understands about the data, this code is the minimal preprocessing required. For other models, operations like step_normalize() are added to fulfill the basic needs of the model. Notice that it is our responsibility, as the modeling practitioner, to choose what resamples to use for tuning, as well as what kind of grid.\n\nThe usemodels package can also be used to create model fitting code with no tuning by setting the argument tune = FALSE."
  },
  {
    "objectID": "13-grid-search.html#sec-efficient-grids",
    "href": "13-grid-search.html#sec-efficient-grids",
    "title": "13  Búsqueda de cuadrícula",
    "section": "\n13.5 Tools for Efficient Grid Search",
    "text": "13.5 Tools for Efficient Grid Search\nIt is possible to make grid search more computationally efficient by applying a few different tricks and optimizations. This section describes several techniques.\n\n13.5.1 Submodel optimization\nThere are types of models where, from a single model fit, multiple tuning parameters can be evaluated without refitting.\nFor example, partial least squares (PLS) is a supervised version of principal component analysis (Geladi y Kowalski 1986). It creates components that maximize the variation in the predictors (like PCA) but simultaneously tries to maximize the correlation between these predictors and the outcome. We’ll explore PLS more in Chapter 16. One tuning parameter is the number of PLS components to retain. Suppose that a data set with 100 predictors is fit using PLS. The number of possible components to retain can range from one to fifty. However, in many implementations, a single model fit can compute predicted values across many values of num_comp. As a result, a PLS model created with 100 components can also make predictions for any num_comp &lt;= 100. This saves time since, instead of creating redundant model fits, a single fit can be used to evaluate many submodels.\nWhile not all models can exploit this feature, many broadly used ones do.\n\nBoosting models can typically make predictions across multiple values for the number of boosting iterations.\nRegularization methods, such as the glmnet model, can make simultaneous predictions across the amount of regularization used to fit the model.\nMultivariate adaptive regression splines (MARS) adds a set of nonlinear features to linear regression models (Friedman 1991). The number of terms to retain is a tuning parameter, and it is computationally fast to make predictions across many values of this parameter from a single model fit.\n\nThe tune package automatically applies this type of optimization whenever an applicable model is tuned.\nFor example, if a boosted C5.0 classification model (M. Kuhn y Johnson 2013) was fit to the cell data, we can tune the number of boosting iterations (trees). With all other parameters set at their default values, we can evaluate iterations from 1 to 100 on the same resamples as used previously:\n\nc5_spec &lt;- \n  boost_tree(trees = tune()) %&gt;% \n  set_engine(\"C5.0\") %&gt;% \n  set_mode(\"classification\")\n\nset.seed(1307)\nc5_spec %&gt;%\n  tune_grid(\n    class ~ .,\n    resamples = cell_folds,\n    grid = data.frame(trees = 1:100),\n    metrics = roc_res\n  )\n\nWithout the submodel optimization, the call to tune_grid() used 62.2 minutes to resample 100 submodels. With the optimization, the same call took 100 seconds (a 37-fold speed-up). The reduced time is the difference in tune_grid() fitting 1000 models versus 10 models.\n\nEven though we fit the model with and without the submodel prediction trick, this optimization is automatically applied by parsnip.\n\n\n13.5.2 Parallel processing\nAs previously mentioned in Sección 10.4, parallel processing is an effective method for decreasing execution time when resampling models. This advantage conveys to model tuning via grid search, although there are additional considerations.\nLet’s consider two different parallel processing schemes.\nWhen tuning models via grid search, there are two distinct loops: one over resamples and another over the unique tuning parameter combinations. In pseudocode, this process would look like:\n\nfor (rs in resamples) {\n  # Create analysis and assessment sets\n  # Preprocess data (e.g. formula or recipe)\n  for (mod in configurations) {\n    # Fit model {mod} to the {rs} analysis set\n    # Predict the {rs} assessment set\n  }\n}\n\nBy default, the tune package parallelizes only over resamples (the outer loop), as opposed to both the outer and inner loops.\nThis is the optimal scenario when the preprocessing method is expensive. However, there are two potential downsides to this approach:\n\nIt limits the achievable speed-ups when the preprocessing is not expensive.\nThe number of parallel workers is limited by the number of resamples. For example, with 10-fold cross-validation you can use only 10 parallel workers even when the computer has more than 10 cores.\n\nTo illustrate how the parallel processing works, we’ll use a case where there are 7 model tuning parameter values, with 5-fold cross-validation. Figura 13.5 shows how the tasks are allocated to the worker processes.\n\n\n\n\nFigura 13.5: Worker processes when parallel processing matches resamples to a specific worker process\n\n\n\nNote that each fold is assigned to its own worker process and, since only model parameters are being tuned, the preprocessing is conducted once per fold/worker. If fewer than five worker processes were used, some workers would receive multiple folds.\nIn the control functions for the tune_*() functions, the argument parallel_over controls how the process is executed. To use the previous parallelization strategy, the argument is parallel_over = \"resamples\".\nInstead of parallel processing the resamples, an alternate scheme combines the loops over resamples and models into a single loop. In pseudocode, this process would look like:\n\nall_tasks &lt;- crossing(resamples, configurations)\n\nfor (iter in all_tasks) {                           \n  # Create analysis and assessment sets for {iter}\n  # Preprocess data (e.g. formula or recipe)\n  # Fit model {iter} to the {iter} analysis set\n  # Predict the {iter} assessment set\n}\n\nIn this case, parallelization now occurs over the single loop. For example, if we use 5-fold cross-validation with \\(M\\) tuning parameter values, the loop is executed over \\(5\\times M\\) iterations. This increases the number of potential workers that can be used. However, the work related to data preprocessing is repeated multiple times. If those steps are expensive, this approach will be inefficient.\nIn tidymodels, validation sets are treated as a single resample. In these cases, this parallelization scheme would be best.\nFigura 13.6 illustrates the delegation of tasks to the workers in this scheme; the same example is used but with 10 workers.\n\n\n\n\nFigura 13.6: Worker processes when preprocessing and modeling tasks are distributed to many workers\n\n\n\nHere, each worker process handles multiple folds, and the preprocessing is needlessly repeated. For example, for the first fold, the preprocessing was computed seven times instead of once.\nFor this scheme, the control function argument is parallel_over = \"everything\".\n\n13.5.3 Benchmarking boosted trees\nTo compare different possible parallelization schemes, we tuned a boosted tree with the xgboost engine using a data set of 4,000 samples, with 5-fold cross-validation and 10 candidate models. These data required some baseline preprocessing that did not require any estimation. The preprocessing was handled three different ways:\n\nPreprocess the data prior to modeling using a dplyr pipeline (labeled as “none” in the later plots).\nConduct the same preprocessing via a recipe (shown as “light” preprocessing).\nWith a recipe, add an additional step that has a high computational cost (labeled as “expensive”).\n\nThe first and second preprocessing options are designed for comparison, to measure the computational cost of the recipe in the second option. The third option measures the cost of performing redundant computations with parallel_over = \"everything\".\nWe evaluated this process using variable numbers of worker processes and using the two parallel_over options, on a computer with 10 physical cores and 20 virtual cores (via hyper-threading).\nFirst, let’s consider the raw execution times in Figura 13.7.\n\n\n\n\nFigura 13.7: Execution times for model tuning versus the number of workers using different delegation schemes\n\n\n\nSince there were only five resamples, the number of cores used when parallel_over = \"resamples\" is limited to five.\nComparing the curves in the first two panels for “none” and “light”:\n\nThere is little difference in the execution times between the panels. This indicates, for these data, there is no real computational penalty for doing the preprocessing steps in a recipe.\nThere is some benefit for using parallel_over = \"everything\" with many cores. However, as shown in the figure, the majority of the benefit of parallel processing occurs in the first five workers.\n\nWith the expensive preprocessing step, there is a considerable difference in execution times. Using parallel_over = \"everything\" is problematic since, even using all cores, it never achieves the execution time that parallel_over = \"resamples\" attains with just five cores. This is because the costly preprocessing step is unnecessarily repeated in the computational scheme.\nWe can also view these data in terms of speed-ups in Figura 13.8.\n\n\n\n\nFigura 13.8: Speed-ups for model tuning versus the number of workers using different delegation schemes. The diagonal black line indicates a linear speedup where the addition of a new worker process has maximal effect.\n\n\n\nThe best speed-ups, for these data, occur when parallel_over = \"resamples\" and when the computations are expensive. However, in the latter case, remember that the previous analysis indicates that the overall model fits are slower.\nWhat is the benefit of using the submodel optimization method in conjunction with parallel processing? The C5.0 classification model shown in Sección 13.5.1 was also run in parallel with ten workers. The parallel computations took 13.3 seconds for a 7.5-fold speed-up (both runs used the submodel optimization trick). Between the submodel optimization trick and parallel processing, there was a total 282-fold speed-up over the most basic grid search code.\n\nOverall, note that the increased computational savings will vary from model to model and are also affected by the size of the grid, the number of resamples, etc. A very computationally efficient model may not benefit as much from parallel processing.\n\n\n13.5.4 Access to global variables\nWhen using tidymodels, it is possible to use values in your local environment (usually the global environment) in model objects.\n\nWhat do we mean by “environment” here? Think of an environment in R as a place to store variables that you can work with. See the “Environments” chapter of Wickham (2019) to learn more.\n\nIf we define a variable to use as a model parameter and then pass it to a function like linear_reg(), the variable is typically defined in the global environment.\n\ncoef_penalty &lt;- 0.1\nspec &lt;- linear_reg(penalty = coef_penalty) %&gt;% set_engine(\"glmnet\")\nspec\n## Linear Regression Model Specification (regression)\n## \n## Main Arguments:\n##   penalty = coef_penalty\n## \n## Computational engine: glmnet\n\nModels created with the parsnip package save arguments like these as quosures; these are objects that track both the name of the object as well as the environment where it lives:\n\nspec$args$penalty\n## &lt;quosure&gt;\n## expr: ^coef_penalty\n## env:  global\n\nNotice that we have env:  global because this variable was created in the global environment. The model specification defined by spec works correctly when run in a user’s regular session because that session is also using the global environment; R can easily find the object coef_penalty.\n\nWhen such a model is evaluated with parallel workers, it may fail. Depending on the particular technology that is used for parallel processing, the workers may not have access to the global environment.\n\nWhen writing code that will be run in parallel, it is a good idea to insert the actual data into the objects rather than the reference to the object. The rlang and dplyr packages can be very helpful for this. For example, the !! operator can splice a single value into an object:\n\nspec &lt;- linear_reg(penalty = !!coef_penalty) %&gt;% set_engine(\"glmnet\")\nspec$args$penalty\n## &lt;quosure&gt;\n## expr: ^0.1\n## env:  empty\n\nNow the output is ^0.1, indicating that the value is there instead of the reference to the object. When you have multiple external values to insert into an object, the !!! operator can help:\n\nmcmc_args &lt;- list(chains = 3, iter = 1000, cores = 3)\n\nlinear_reg() %&gt;% set_engine(\"stan\", !!!mcmc_args)\n## Linear Regression Model Specification (regression)\n## \n## Engine-Specific Arguments:\n##   chains = 3\n##   iter = 1000\n##   cores = 3\n## \n## Computational engine: stan\n\nRecipe selectors are another place where you might want access to global variables. Suppose you have a recipe step that should use all of the predictors in the cell data that were measured using the second optical channel. We can create a vector of these column names:\n\nlibrary(stringr)\nch_2_vars &lt;- str_subset(names(cells), \"ch_2\")\nch_2_vars\n## [1] \"avg_inten_ch_2\"   \"total_inten_ch_2\"\n\nWe could hard-code these into a recipe step but it would be better to reference them programmatically in case the data change. Two ways to do this are:\n\n# Still uses a reference to global data (~_~;)\nrecipe(class ~ ., data = cells) %&gt;% \n  step_spatialsign(all_of(ch_2_vars))\n## \n## ── Recipe ───────────────────────────────────────────────────────────────────────────\n## \n## ── Inputs\n## Number of variables by role\n## outcome:    1\n## predictor: 56\n## \n## ── Operations\n## • Spatial sign on: all_of(ch_2_vars)\n\n# Inserts the values into the step ヽ(•‿•)ノ\nrecipe(class ~ ., data = cells) %&gt;% \n  step_spatialsign(!!!ch_2_vars)\n## \n## ── Recipe ───────────────────────────────────────────────────────────────────────────\n## \n## ── Inputs\n## Number of variables by role\n## outcome:    1\n## predictor: 56\n## \n## ── Operations\n## • Spatial sign on: \"avg_inten_ch_2\", \"total_inten_ch_2\"\n\nThe latter is better for parallel processing because all of the needed information is embedded in the recipe object.\n\n13.5.5 Racing methods\nOne issue with grid search is that all models need to be fit across all resamples before any tuning parameters can be evaluated. It would be helpful if instead, at some point during tuning, an interim analysis could be conducted to eliminate any truly awful parameter candidates. This would be akin to futility analysis in clinical trials. If a new drug is performing excessively poorly (or well), it is potentially unethical to wait until the trial finishes to make a decision.\nIn machine learning, the set of techniques called racing methods provide a similar function (Maron y Moore 1994). Here, the tuning process evaluates all models on an initial subset of resamples. Based on their current performance metrics, some parameter sets are not considered in subsequent resamples.\nAs an example, in the multilayer perceptron tuning process with a regular grid explored in this chapter, what would the results look like after only the first three folds? Using techniques similar to those shown in Chapter 11, we can fit a model where the outcome is the resampled area under the ROC curve and the predictor is an indicator for the parameter combination. The model takes the resample-to-resample effect into account and produces point and interval estimates for each parameter setting. The results of the model are one-sided 95% confidence intervals that measure the loss of the ROC value relative to the currently best performing parameters, as shown in Figura 13.9.\n\n\n\n\nFigura 13.9: The racing process for 20 tuning parameters and 10 resamples\n\n\n\nAny parameter set whose confidence interval includes zero would lack evidence that its performance is statistically different from the best results. We retain 6 settings; these are resampled more. The remaining 14 submodels are no longer considered.\nThe process continues for each resample; after the next set of performance metrics, a new model is fit to these statistics, and more submodels are potentially discarded.2\n\nRacing methods can be more efficient than basic grid search as long as the interim analysis is fast and some parameter settings have poor performance. It also is most helpful when the model does not have the ability to exploit submodel predictions.\n\nThe finetune package contains functions for racing. The tune_race_anova() function conducts an ANOVA model to test for statistical significance of the different model configurations. The syntax to reproduce the filtering shown previously is:\n\nlibrary(finetune)\n\nset.seed(1308)\nmlp_sfd_race &lt;-\n  mlp_wflow %&gt;%\n  tune_race_anova(\n    cell_folds,\n    grid = 20,\n    param_info = mlp_param,\n    metrics = roc_res,\n    control = control_race(verbose_elim = TRUE)\n  )\n\nThe arguments mirror those of tune_grid(). The function control_race() has options for the elimination procedure.\nAs shown in the animation above, there were one tuning parameter combinations under consideration once the full set of resamples were evaluated. show_best() returns the best models (ranked by performance) but returns only the configurations that were never eliminated:\n\nshow_best(mlp_sfd_race, n = 10)\n## # A tibble: 1 × 10\n##   hidden_units penalty epochs num_comp .metric .estimator  mean     n std_err\n##          &lt;int&gt;   &lt;dbl&gt;  &lt;int&gt;    &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;\n## 1            8   0.814    177       15 roc_auc binary     0.890    10 0.00966\n## # ℹ 1 more variable: .config &lt;chr&gt;\n\nThere are other interim analysis techniques for discarding settings. For example, Krueger, Panknin, y Braun (2015) use traditional sequential analysis methods whereas Max Kuhn (2014) treats the data as a sports competition and uses the Bradley-Terry model (Bradley y Terry 1952) to measure the winning ability of parameter settings."
  },
  {
    "objectID": "13-grid-search.html#sec-grid-summary",
    "href": "13-grid-search.html#sec-grid-summary",
    "title": "13  Búsqueda de cuadrícula",
    "section": "\n13.6 Chapter Summary",
    "text": "13.6 Chapter Summary\nThis chapter discussed the two main classes of grid search (regular and non-regular) that can be used for model tuning and demonstrated how to construct these grids, either manually or using the family of grid_*() functions. The tune_grid() function can evaluate these candidate sets of model parameters using resampling. The chapter also showed how to finalize a model, recipe, or workflow to update the parameter values for the final fit. Grid search can be computationally expensive, but thoughtful choices in the experimental design of such searches can make them tractable.\nThe data analysis code that will be reused in the next chapter is:\n\nlibrary(tidymodels)\n\ndata(cells)\ncells &lt;- cells %&gt;% select(-case)\n\nset.seed(1304)\ncell_folds &lt;- vfold_cv(cells)\n\nroc_res &lt;- metric_set(roc_auc)\n\n\n\n\n\nBox, GEP, W Hunter, y J Hunter. 2005. Statistics for Experimenters: An Introduction to Design, Data Analysis, and Model Building. Wiley.\n\n\nBradley, R, y M Terry. 1952. «Rank analysis of incomplete block designs: I. The method of paired comparisons». Biometrika 39 (3/4): 324-45.\n\n\nFriedman, J. 1991. «Multivariate Adaptive Regression Splines». The Annals of Statistics 19 (1): 1-141.\n\n\nGeladi, P., y B Kowalski. 1986. «Partial Least-Squares Regression: A Tutorial». Analytica Chimica Acta 185: 1-17.\n\n\nHill, A, P LaPan, Y Li, y S Haney. 2007. «Impact of Image Segmentation on High-Content Screening Data Quality for SK-BR-3 Cells». BMC Bioinformatics 8 (1): 340.\n\n\nJoseph, V, E Gul, y S Ba. 2015. «Maximum projection designs for computer experiments». Biometrika 102 (2): 371-80.\n\n\nKrueger, T, D Panknin, y M Braun. 2015. «Fast Cross-Validation via Sequential Testing». Journal of Machine Learning Research 16 (33): 1103-55.\n\n\nKuhn, Max. 2014. «Futility Analysis in the Cross-Validation of Machine Learning Models». https://arxiv.org/abs/1405.6974.\n\n\nKuhn, M, y K Johnson. 2013. Applied Predictive Modeling. Springer.\n\n\nMaron, O, y A Moore. 1994. «Hoeffding races: Accelerating model selection search for classification and function approximation». En Advances in neural information processing systems, 59-66.\n\n\nMcKay, M, R Beckman, y W Conover. 1979. «A Comparison of Three Methods for Selecting Values of Input Variables in the Analysis of Output from a Computer Code». Technometrics 21 (2): 239-45.\n\n\nSantner, T, B Williams, W Notz, y B Williams. 2003. The design and analysis of computer experiments. Springer.\n\n\nShewry, M, y H Wynn. 1987. «Maximum entropy sampling». Journal of Applied Statistics 14 (2): 165-70.\n\n\nWickham, H. 2019. Advanced R. 2nd ed. Chapman & Hall/CRC The R Series. Taylor & Francis. https://doi.org/10.1201/9781351201315.\n\n\nYeo, I-K, y R Johnson. 2000. «A new family of power transformations to improve normality or symmetry». Biometrika 87 (4): 954-59."
  },
  {
    "objectID": "13-grid-search.html#footnotes",
    "href": "13-grid-search.html#footnotes",
    "title": "13  Búsqueda de cuadrícula",
    "section": "",
    "text": "https://CRAN.R-project.org/view=ExperimentalDesign↩︎\nSee Max Kuhn (2014) for more details on the computational aspects of this approach.↩︎"
  },
  {
    "objectID": "16-dimensionality-reduction.html#what-problems-can-dimensionality-reduction-solve",
    "href": "16-dimensionality-reduction.html#what-problems-can-dimensionality-reduction-solve",
    "title": "16  Dimensionality Reduction",
    "section": "\n16.1 What Problems Can Dimensionality Reduction Solve?",
    "text": "16.1 What Problems Can Dimensionality Reduction Solve?\nDimensionality reduction can be used either in feature engineering or in exploratory data analysis. For example, in high-dimensional biology experiments, one of the first tasks, before any modeling, is to determine if there are any unwanted trends in the data (e.g., effects not related to the question of interest, such as lab-to-lab differences). Debugging the data is difficult when there are hundreds of thousands of dimensions, and dimensionality reduction can be an aid for exploratory data analysis.\nAnother potential consequence of having a multitude of predictors is possible harm to a model. The simplest example is a method like ordinary linear regression where the number of predictors should be less than the number of data points used to fit the model. Another issue is multicollinearity, where between-predictor correlations can negatively impact the mathematical operations used to estimate a model. If there are an extremely large number of predictors, it is fairly unlikely that there are an equal number of real underlying effects. Predictors may be measuring the same latent effect(s), and thus such predictors will be highly correlated. Many dimensionality reduction techniques thrive in this situation. In fact, most can be effective only when there are such relationships between predictors that can be exploited.\n\nWhen starting a new modeling project, reducing the dimensions of the data may provide some intuition about how hard the modeling problem may be.\n\nPrincipal component analysis (PCA) is one of the most straightforward methods for reducing the number of columns in the data set because it relies on linear methods and is unsupervised (i.e., does not consider the outcome data). For a high-dimensional classification problem, an initial plot of the main PCA components might show a clear separation between the classes. If this is the case, then it is fairly safe to assume that a linear classifier might do a good job. However, the converse is not true; a lack of separation does not mean that the problem is insurmountable.\nThe dimensionality reduction methods discussed in this chapter are generally not feature selection methods. Methods such as PCA represent the original predictors using a smaller subset of new features. All of the original predictors are required to compute these new features. The exception to this are sparse methods that have the ability to completely remove the impact of predictors when creating the new features.\n\nThis chapter has two goals:\n\nDemonstrate how to use recipes to create a small set of features that capture the main aspects of the original predictor set.\nDescribe how recipes can be used on their own (as opposed to being used in a workflow object, as in Section 8.2).\n\n\nThe latter is helpful when testing or debugging a recipe. However, as described in Section 8.2, the best way to use a recipe for modeling is from within a workflow object.\nIn addition to the tidymodels package, this chapter uses the following packages: baguette, beans, bestNormalize, corrplot, discrim, embed, ggforce, klaR, learntidymodels,1 mixOmics,2 and uwot."
  },
  {
    "objectID": "16-dimensionality-reduction.html#sec-beans",
    "href": "16-dimensionality-reduction.html#sec-beans",
    "title": "16  Reducción de Dimensionalidad",
    "section": "\n16.2 Una imagen vale más que mil… Frijoles",
    "text": "16.2 Una imagen vale más que mil… Frijoles\nVeamos cómo usar la reducción de dimensionalidad con recipes para ver un conjunto de datos de ejemplo. Koklu y Ozkan (2020) publicó un conjunto de datos de características visuales de los frijoles secos y describió métodos para determinar las variedades de frijoles secos en una imagen. Si bien la dimensionalidad de estos datos no es muy grande en comparación con muchos problemas de modelado del mundo real, proporciona un buen ejemplo práctico para demostrar cómo reducir la cantidad de funciones. De su manuscrito:\n\nEl objetivo principal de este estudio es proporcionar un método para la obtención de variedades de semillas uniformes a partir de la producción de cultivos, la cual es en forma de población, por lo que las semillas no están certificadas como una única variedad. Así, se desarrolló un sistema de visión por computadora para distinguir siete variedades diferentes registradas de frijol seco con características similares con el fin de obtener una clasificación uniforme de las semillas. Para el modelo de clasificación se tomaron imágenes de 13.611 granos de 7 diferentes frijoles secos registrados con una cámara de alta resolución.\n\nCada imagen contiene varios beans. El proceso de determinar qué píxeles corresponden a un frijol en particular se llama segmentación de imágenes. Estos píxeles se pueden analizar para producir características para cada frijol, como el color y la morfología (es decir, la forma). Estas características se utilizan luego para modelar el resultado (variedad de frijol) porque las diferentes variedades de frijol se ven diferentes. Los datos de entrenamiento provienen de un conjunto de imágenes etiquetadas manualmente, y este conjunto de datos se utiliza para crear un modelo predictivo que puede distinguir entre siete variedades de frijol: Cali, Horoz, Dermason, Seker, Bombay, Barbunya y Sira. Producir un modelo eficaz puede ayudar a los fabricantes a cuantificar la homogeneidad de un lote de granos.\nExisten numerosos métodos para cuantificar las formas de los objetos (Mingqiang, Kidiyo, y Joseph 2008). Muchos están relacionados con los límites o regiones del objeto de interés. Ejemplos de características incluyen:\n\nEl área (o tamaño) se puede estimar utilizando el número de píxeles del objeto o el tamaño del casco convexo alrededor del objeto.\nPodemos medir el perímetro usando el número de píxeles en el límite así como el área del cuadro delimitador (el rectángulo más pequeño que encierra un objeto).\nEl eje mayor cuantifica la línea más larga que conecta las partes más extremas del objeto. El eje menor es perpendicular al eje mayor.\nPodemos medir la compacidad de un objeto usando la relación entre el área del objeto y el área de un círculo con el mismo perímetro. Por ejemplo, los símbolos “•” y “×” tienen compacidades muy diferentes.\nTambién existen diferentes medidas de qué tan alargado u oblongo es un objeto. Por ejemplo, la estadística de excentricidad es la relación entre los ejes mayor y menor. También existen estimaciones relacionadas para la redondez y la convexidad.\n\nObserve la excentricidad de las diferentes formas en Figura 16.1.\n\n\n\n\nFigura 16.1: Algunos ejemplos de formas y sus estadísticas de excentricidad.\n\n\n\nLas formas como círculos y cuadrados tienen una excentricidad baja, mientras que las formas oblongas tienen valores altos. Además, la métrica no se ve afectada por la rotación del objeto.\nMuchas de estas características de la imagen tienen altas correlaciones; es más probable que los objetos con áreas grandes tengan perímetros grandes. A menudo existen varios métodos para cuantificar las mismas características subyacentes (por ejemplo, tamaño).\nEn los datos de los frijoles, se calcularon las características morfológicas de 16: area, perimeter, major axis length, minor axis length, aspect ratio, eccentricity, convex area, equiv diameter, extent, solidity, roundness, compactness, shape factor 1, shape factor 2, shape factor 3, and shape factor 4. Los últimos cuatro se describen en Symons y Fulcher (1988).\nPodemos comenzar cargando los datos:\n\nlibrary(tidymodels)\ntidymodels_prefer()\nlibrary(beans)\n\n\nEs importante mantener una buena disciplina de datos al evaluar técnicas de reducción de dimensionalidad, especialmente si las utilizará dentro de un modelo.\n\nPara nuestros análisis, comenzamos reteniendo un conjunto de pruebas con initial_split(). Los datos restantes se dividen en conjuntos de entrenamiento y validación:\n\nset.seed(1601)\nbean_split &lt;- initial_validation_split(beans, strata = class, prop = c(0.75, 0.125))\n## Warning: Too little data to stratify.\n## • Resampling will be unstratified.\nbean_split\n## &lt;Training/Validation/Testing/Total&gt;\n## &lt;10206/1702/1703/13611&gt;\n\n# Devolver marcos de datos:\nbean_train &lt;- training(bean_split)\nbean_test &lt;- testing(bean_split)\nbean_validation &lt;- validation(bean_split)\n\nset.seed(1602)\n# Devuelve un objeto 'rset' para usarlo con las funciones de sintonización:\nbean_val &lt;- validation_set(bean_split)\nbean_val$splits[[1]]\n## &lt;Training/Validation/Total&gt;\n## &lt;10206/1702/11908&gt;\n\nPara evaluar visualmente qué tan bien funcionan los diferentes métodos, podemos estimar los métodos en el conjunto de entrenamiento (n = 10,206 beans) y mostrar los resultados usando el conjunto de validación ( n = formato r(nrow(bean_validation), big.mark = \",\")).\nAntes de comenzar cualquier reducción de dimensionalidad, podemos dedicar algún tiempo a investigar nuestros datos. Como sabemos que muchas de estas características de forma probablemente miden conceptos similares, echemos un vistazo a la estructura de correlación de los datos en Figura 16.2 usando este código.\n\nlibrary(corrplot)\ntmwr_cols &lt;- colorRampPalette(c(\"#91CBD765\", \"#CA225E\"))\nbean_train %&gt;% \n  select(-class) %&gt;% \n  cor() %&gt;% \n  corrplot(col = tmwr_cols(200), tl.col = \"black\", method = \"ellipse\")\n\n\n\n\n\nFigura 16.2: Matriz de correlación de los predictores con variables ordenadas mediante clustering\n\n\n\nMuchos de estos predictores están altamente correlacionados, como el área y el perímetro o los factores de forma 2 y 3. Si bien no nos tomamos el tiempo para hacerlo aquí, también es importante ver si esta estructura de correlación cambia significativamente entre las categorías de resultados. Esto puede ayudar a crear mejores modelos."
  },
  {
    "objectID": "16-dimensionality-reduction.html#a-starter-recipe",
    "href": "16-dimensionality-reduction.html#a-starter-recipe",
    "title": "16  Dimensionality Reduction",
    "section": "\n16.3 A Starter Recipe",
    "text": "16.3 A Starter Recipe\nIt’s time to look at the beans data in a smaller space. We can start with a basic recipe to preprocess the data prior to any dimensionality reduction steps. Several predictors are ratios and so are likely to have skewed distributions. Such distributions can wreak havoc on variance calculations (such as the ones used in PCA). The bestNormalize package has a step that can enforce a symmetric distribution for the predictors. We’ll use this to mitigate the issue of skewed distributions:\n\nlibrary(bestNormalize)\nbean_rec &lt;-\n  # Use the training data from the bean_val split object\n  recipe(class ~ ., data = bean_train) %&gt;%\n  step_zv(all_numeric_predictors()) %&gt;%\n  step_orderNorm(all_numeric_predictors()) %&gt;% \n  step_normalize(all_numeric_predictors())\n\n\nRemember that when invoking the recipe() function, the steps are not estimated or executed in any way.\n\nThis recipe will be extended with additional steps for the dimensionality reduction analyses. Before doing so, let’s go over how a recipe can be used outside of a workflow."
  },
  {
    "objectID": "16-dimensionality-reduction.html#sec-recipe-functions",
    "href": "16-dimensionality-reduction.html#sec-recipe-functions",
    "title": "16  Reducción de Dimensionalidad",
    "section": "\n16.4 Recetas en la naturaleza",
    "text": "16.4 Recetas en la naturaleza\nComo se menciona en Sección 8.2, un flujo de trabajo que contiene una receta usa fit() para estimar la receta y el modelo, luego predict() para procesar los datos y hacer predicciones del modelo. Hay funciones análogas en el paquete recipes que se pueden usar para el mismo propósito:\n\n\nprep(recipe, training) ajusta la receta al conjunto de entrenamiento.\n\nbake(recipe, new_data) aplica las operaciones de la receta a new_data.\n\nFigura 16.3 resume esto. Veamos cada una de estas funciones con más detalle.\n\n\n\n\nFigura 16.3: Resumen de funciones relacionadas con recetas\n\n\n\n\n16.4.1 Preparando una receta\nEstimemos bean_rec usando los datos del conjunto de entrenamiento, con prep(bean_rec):\n\nbean_rec_trained &lt;- prep(bean_rec)\nbean_rec_trained\n## \n## ── Recipe ───────────────────────────────────────────────────────────────────────────\n## \n## ── Inputs\n## Number of variables by role\n## outcome:    1\n## predictor: 16\n## \n## ── Training information\n## Training data contained 10206 data points and no incomplete rows.\n## \n## ── Operations\n## • Zero variance filter removed: &lt;none&gt; | Trained\n## • orderNorm transformation on: area, perimeter, major_axis_length, ... | Trained\n## • Centering and scaling for: area, perimeter, major_axis_length, ... | Trained\n\n\nRecuerde que prep() para una receta es como fit() para un modelo.\n\nTenga en cuenta en el resultado que los pasos han sido entrenados y que los selectores ya no son generales (es decir, all_numeric_predictors()); ahora muestran las columnas reales que se seleccionaron. Además, prep(bean_rec) no requiere el argumento training. Puede pasar cualquier dato a ese argumento, pero omitirlo significa que se utilizarán los “datos”, data, originales de la llamada a recipe(). En nuestro caso, estos fueron los datos del conjunto de entrenamiento.\nUn argumento importante para prep() es retain. Cuando retain = TRUE (el valor predeterminado), la versión estimada del conjunto de entrenamiento se mantiene dentro de la receta. Este conjunto de datos ha sido preprocesado siguiendo todos los pasos enumerados en la receta. Dado que prep() tiene que ejecutar la receta a medida que avanza, puede ser ventajoso mantener esta versión del conjunto de entrenamiento para que, si ese conjunto de datos se va a utilizar más adelante, se puedan evitar cálculos redundantes. Sin embargo, si el conjunto de entrenamiento es grande, puede resultar problemático mantener una cantidad tan grande de datos en la memoria. Utilice retain = FALSE para evitar esto.\nUna vez que se agregan nuevos pasos a esta receta estimada, volver a aplicar prep() estimará solo los pasos no entrenados. Esto será útil cuando probemos diferentes métodos de extracción de características.\n\nSi encuentra errores al trabajar con una receta, puede usar prep() con su opción verbose para solucionar problemas:\n\n\nbean_rec_trained %&gt;% \n  step_dummy(cornbread) %&gt;%  # &lt;- no es un predictor real\n  prep(verbose = TRUE)\n## oper 1 step zv [pre-trained]\n## oper 2 step orderNorm [pre-trained]\n## oper 3 step normalize [pre-trained]\n## oper 4 step dummy [training]\n## Error in `step_dummy()`:\n## Caused by error in `prep()`:\n## ! Can't subset columns that don't exist.\n## ✖ Column `cornbread` doesn't exist.\n\nOtra opción que puede ayudarte a entender lo que sucede en el análisis es log_changes:\n\nshow_variables &lt;- \n  bean_rec %&gt;% \n  prep(log_changes = TRUE)\n## step_zv (zv_RLYwH): same number of columns\n## \n## step_orderNorm (orderNorm_Jx8oD): same number of columns\n## \n## step_normalize (normalize_GU75D): same number of columns\n\n\n16.4.2 Hornear la receta\n\nUsar bake() con una receta es muy parecido a usar predict() con un modelo; las operaciones estimadas a partir del conjunto de entrenamiento se aplican a cualquier dato, como datos de prueba o datos nuevos en el momento de la predicción.\n\nPor ejemplo, las muestras del conjunto de validación se pueden procesar:\n\nbean_val_processed &lt;- bake(bean_rec_trained, new_data = bean_validation)\n\nFigura 16.4 muestra histogramas del predictor de area antes y después de que se preparara la receta.\n\nlibrary(patchwork)\np1 &lt;- \n  bean_validation %&gt;% \n  ggplot(aes(x = area)) + \n  geom_histogram(bins = 30, color = \"white\", fill = \"blue\", alpha = 1/3) + \n  ggtitle(\"Datos del conjunto de validación original\")\n\np2 &lt;- \n  bean_val_processed %&gt;% \n  ggplot(aes(x = area)) + \n  geom_histogram(bins = 30, color = \"white\", fill = \"red\", alpha = 1/3) + \n  ggtitle(\"Datos del conjunto de validación procesados\")\n\np1 + p2\n\n\n\n\n\nFigura 16.4: El predictor de area antes y después del preprocesamiento\n\n\n\nAquí vale la pena señalar dos aspectos importantes de bake().\nPrimero, como se mencionó anteriormente, el uso de prep(recipe, retener = TRUE) mantiene la versión procesada existente del conjunto de entrenamiento en la receta. Esto permite al usuario utilizar bake(recipe, new_data = NULL), que devuelve ese conjunto de datos sin más cálculos. Por ejemplo:\n\nbake(bean_rec_trained, new_data = NULL) %&gt;% nrow()\n## [1] 10206\nbean_train %&gt;% nrow()\n## [1] 10206\n\nSi el conjunto de entrenamiento no es patológicamente grande, usar este valor de retain puede ahorrar mucho tiempo de cálculo.\nEn segundo lugar, se pueden utilizar selectores adicionales en la llamada para especificar qué columnas devolver. El selector predeterminado es everything(), pero se pueden usar directivas más específicas.\nUsaremos prep() y bake() en la siguiente sección para ilustrar algunas de estas opciones."
  },
  {
    "objectID": "16-dimensionality-reduction.html#feature-extraction-techniques",
    "href": "16-dimensionality-reduction.html#feature-extraction-techniques",
    "title": "16  Dimensionality Reduction",
    "section": "\n16.5 Feature Extraction Techniques",
    "text": "16.5 Feature Extraction Techniques\nSince recipes are the primary option in tidymodels for dimensionality reduction, let’s write a function that will estimate the transformation and plot the resulting data in a scatter plot matrix via the ggforce package:\n\nlibrary(ggforce)\nplot_validation_results &lt;- function(recipe, dat = bean_validation) {\n  recipe %&gt;%\n    # Estimate any additional steps\n    prep() %&gt;%\n    # Process the data (the validation set by default)\n    bake(new_data = dat) %&gt;%\n    # Create the scatterplot matrix\n    ggplot(aes(x = .panel_x, y = .panel_y, color = class, fill = class)) +\n    geom_point(alpha = 0.4, size = 0.5) +\n    geom_autodensity(alpha = .3) +\n    facet_matrix(vars(-class), layer.diag = 2) + \n    scale_color_brewer(palette = \"Dark2\") + \n    scale_fill_brewer(palette = \"Dark2\")\n}\n\nWe will reuse this function several times in this chapter.\nA series of several feature extraction methodologies are explored here. An overview of most can be found in Section 6.3.1 of Kuhn and Johnson (2020) and the references therein. The UMAP method is described in McInnes, Healy, and Melville (2020).\n\n16.5.1 Principal component analysis\nWe’ve mentioned PCA several times already in this book, and it’s time to go into more detail. PCA is an unsupervised method that uses linear combinations of the predictors to define new features. These features attempt to account for as much variation as possible in the original data. We add step_pca() to the original recipe and use our function to visualize the results on the validation set in Figure 16.5 using:\n\nbean_rec_trained %&gt;%\n  step_pca(all_numeric_predictors(), num_comp = 4) %&gt;%\n  plot_validation_results() + \n  ggtitle(\"Principal Component Analysis\")\n\n\n\n\n\nFigure 16.5: Principal component scores for the bean validation set, colored by class\n\n\n\nWe see that the first two components PC1 and PC2, especially when used together, do an effective job distinguishing between or separating the classes. This may lead us to expect that the overall problem of classifying these beans will not be especially difficult.\nRecall that PCA is unsupervised. For these data, it turns out that the PCA components that explain the most variation in the predictors also happen to be predictive of the classes. What features are driving performance? The learntidymodels package has functions that can help visualize the top features for each component. We’ll need the prepared recipe; the PCA step is added in the following code along with a call to prep():\n\nlibrary(learntidymodels)\nbean_rec_trained %&gt;%\n  step_pca(all_numeric_predictors(), num_comp = 4) %&gt;% \n  prep() %&gt;% \n  plot_top_loadings(component_number &lt;= 4, n = 5) + \n  scale_fill_brewer(palette = \"Paired\") +\n  ggtitle(\"Principal Component Analysis\")\n\nThis produces Figure 16.6.\n\n\n\n\nFigure 16.6: Predictor loadings for the PCA transformation\n\n\n\nThe top loadings are mostly related to the cluster of correlated predictors shown in the top-left portion of the previous correlation plot: perimeter, area, major axis length, and convex area. These are all related to bean size. Shape factor 2, from Symons and Fulcher (1988), is the area over the cube of the major axis length and is therefore also related to bean size. Measures of elongation appear to dominate the second PCA component.\n\n16.5.2 Partial least squares\nPLS, which we introduced in Section 13.5.1, is a supervised version of PCA. It tries to find components that simultaneously maximize the variation in the predictors while also maximizing the relationship between those components and the outcome. Figure 16.7 shows the results of this slightly modified version of the PCA code:\n\nbean_rec_trained %&gt;%\n  step_pls(all_numeric_predictors(), outcome = \"class\", num_comp = 4) %&gt;%\n  plot_validation_results() + \n  ggtitle(\"Partial Least Squares\")\n\n\n\n\n\nFigure 16.7: PLS component scores for the bean validation set, colored by class\n\n\n\nThe first two PLS components plotted in Figure 16.7 are nearly identical to the first two PCA components! We find this result because those PCA components are so effective at separating the varieties of beans. The remaining components are different. Figure 16.8 visualizes the loadings, the top features for each component.\n\nbean_rec_trained %&gt;%\n  step_pls(all_numeric_predictors(), outcome = \"class\", num_comp = 4) %&gt;%\n  prep() %&gt;% \n  plot_top_loadings(component_number &lt;= 4, n = 5, type = \"pls\") + \n  scale_fill_brewer(palette = \"Paired\") +\n  ggtitle(\"Partial Least Squares\")\n\n\n\n\n\nFigure 16.8: Predictor loadings for the PLS transformation\n\n\n\nSolidity (i.e., the density of the bean) drives the third PLS component, along with roundness. Solidity may be capturing bean features related to “bumpiness” of the bean surface since it can measure irregularity of the bean boundaries.\n\n16.5.3 Independent component analysis\nICA is slightly different than PCA in that it finds components that are as statistically independent from one another as possible (as opposed to being uncorrelated). It can be thought of as maximizing the “non-Gaussianity” of the ICA components, or separating information instead of compressing information like PCA. Let’s use step_ica() to produce Figure 16.9:\n\nbean_rec_trained %&gt;%\n  step_ica(all_numeric_predictors(), num_comp = 4) %&gt;%\n  plot_validation_results() + \n  ggtitle(\"Independent Component Analysis\")\n\n\n\n\n\nFigure 16.9: ICA component scores for the bean validation set, colored by class\n\n\n\nInspecting this plot, there does not appear to be much separation between the classes in the first few components when using ICA. These independent (or as independent as possible) components do not separate the bean types.\n\n16.5.4 Uniform manifold approximation and projection\nUMAP is similar to the popular t-SNE method for nonlinear dimension reduction. In the original high-dimensional space, UMAP uses a distance-based nearest neighbor method to find local areas of the data where the data points are more likely to be related. The relationship between data points is saved as a directed graph model where most points are not connected.\nFrom there, UMAP translates points in the graph to the reduced dimensional space. To do this, the algorithm has an optimization process that uses cross-entropy to map data points to the smaller set of features so that the graph is well approximated.\nTo create the mapping, the embed package contains a step function for this method, visualized in Figure 16.10.\n\nlibrary(embed)\nbean_rec_trained %&gt;%\n  step_umap(all_numeric_predictors(), num_comp = 4) %&gt;%\n  plot_validation_results() +\n  ggtitle(\"UMAP\")\n\n\n\n\n\nFigure 16.10: UMAP component scores for the bean validation set, colored by class\n\n\n\nWhile the between-cluster space is pronounced, the clusters can contain a heterogeneous mixture of classes.\nThere is also a supervised version of UMAP:\n\nbean_rec_trained %&gt;%\n  step_umap(all_numeric_predictors(), outcome = \"class\", num_comp = 4) %&gt;%\n  plot_validation_results() +\n  ggtitle(\"UMAP (supervised)\")\n\n\n\n\n\nFigure 16.11: Supervised UMAP component scores for the bean validation set, colored by class\n\n\n\nThe supervised method shown in Figure 16.11 looks promising for modeling the data.\nUMAP is a powerful method to reduce the feature space. However, it can be very sensitive to tuning parameters (e.g., the number of neighbors and so on). For this reason, it would help to experiment with a few of the parameters to assess how robust the results are for these data."
  },
  {
    "objectID": "16-dimensionality-reduction.html#sec-bean-models",
    "href": "16-dimensionality-reduction.html#sec-bean-models",
    "title": "16  Reducción de Dimensionalidad",
    "section": "\n16.6 Modelado",
    "text": "16.6 Modelado\nVale la pena investigar tanto el método PLS como el UMAP junto con diferentes modelos. Exploremos una variedad de modelos diferentes con estas técnicas de reducción de dimensionalidad (sin ninguna transformación): una red neuronal de una sola capa, árboles en bolsas, análisis discriminante flexible (FDA), Bayes ingenuo y análisis discriminante regularizado (RDA).\nAhora que volvemos al “modo de modelado”, crearemos una serie de especificaciones de modelo y luego usaremos un conjunto de flujo de trabajo para ajustar los modelos en el siguiente código. Tenga en cuenta que los parámetros del modelo se ajustan junto con los parámetros de la receta (por ejemplo, tamaño de la dimensión reducida, parámetros UMAP).\n\nlibrary(baguette)\nlibrary(discrim)\n\nmlp_spec &lt;-\n  mlp(hidden_units = tune(), penalty = tune(), epochs = tune()) %&gt;%\n  set_engine('nnet') %&gt;%\n  set_mode('classification')\n\nbagging_spec &lt;-\n  bag_tree() %&gt;%\n  set_engine('rpart') %&gt;%\n  set_mode('classification')\n\nfda_spec &lt;-\n  discrim_flexible(\n    prod_degree = tune()\n  ) %&gt;%\n  set_engine('earth')\n\nrda_spec &lt;-\n  discrim_regularized(frac_common_cov = tune(), frac_identity = tune()) %&gt;%\n  set_engine('klaR')\n\nbayes_spec &lt;-\n  naive_Bayes() %&gt;%\n  set_engine('klaR')\n\nTambién necesitamos recetas para los métodos de reducción de dimensionalidad que probaremos. Comencemos con una receta base bean_rec y luego ampliémosla con diferentes pasos de reducción de dimensionalidad:\n\nbean_rec &lt;-\n  recipe(class ~ ., data = bean_train) %&gt;%\n  step_zv(all_numeric_predictors()) %&gt;%\n  step_orderNorm(all_numeric_predictors()) %&gt;%\n  step_normalize(all_numeric_predictors())\n\npls_rec &lt;- \n  bean_rec %&gt;% \n  step_pls(all_numeric_predictors(), outcome = \"class\", num_comp = tune())\n\numap_rec &lt;-\n  bean_rec %&gt;%\n  step_umap(\n    all_numeric_predictors(),\n    outcome = \"class\",\n    num_comp = tune(),\n    neighbors = tune(),\n    min_dist = tune()\n  )\n\nUna vez más, el paquete workflowsets toma los preprocesadores y modelos y los cruza. La opción control parallel_over está configurada para que el procesamiento paralelo pueda funcionar simultáneamente en todas las combinaciones de parámetros de ajuste. La función workflow_map() aplica la búsqueda de cuadrícula para optimizar los parámetros del modelo/preprocesamiento (si los hay) en 10 combinaciones de parámetros. El área multiclase bajo la curva ROC se estima en el conjunto de validación.\n\nctrl &lt;- control_grid(parallel_over = \"everything\")\nbean_res &lt;- \n  workflow_set(\n    preproc = list(basic = class ~., pls = pls_rec, umap = umap_rec), \n    models = list(bayes = bayes_spec, fda = fda_spec,\n                  rda = rda_spec, bag = bagging_spec,\n                  mlp = mlp_spec)\n  ) %&gt;% \n  workflow_map(\n    verbose = TRUE,\n    seed = 1603,\n    resamples = bean_val,\n    grid = 10,\n    metrics = metric_set(roc_auc),\n    control = ctrl\n  )\n\nPodemos clasificar los modelos según sus estimaciones del conjunto de validación del área bajo la curva ROC:\n\nrankings &lt;- \n  rank_results(bean_res, select_best = TRUE) %&gt;% \n  mutate(method = map_chr(wflow_id, ~ str_split(.x, \"_\", simplify = TRUE)[1])) \n\ntidymodels_prefer()\nfilter(rankings, rank &lt;= 5) %&gt;% dplyr::select(rank, mean, model, method)\n## # A tibble: 5 × 4\n##    rank  mean model               method\n##   &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt; \n## 1     1 0.996 mlp                 pls   \n## 2     2 0.996 discrim_regularized pls   \n## 3     3 0.995 discrim_flexible    basic \n## 4     4 0.995 naive_Bayes         pls   \n## 5     5 0.994 naive_Bayes         basic\n\nFigura 16.12 ilustra esta clasificación.\n\n\n\n\nFigura 16.12: Área bajo la curva ROC del conjunto de validación\n\n\n\nDe estos resultados se desprende claramente que la mayoría de los modelos ofrecen muy buen rendimiento; hay pocas malas decisiones aquí. Para la demostración, usaremos el modelo RDA con características PLS como modelo final. Finalizaremos el flujo de trabajo con los mejores parámetros numéricamente, lo ajustaremos al conjunto de entrenamiento y luego lo evaluaremos con el conjunto de prueba:\n\nrda_res &lt;- \n  bean_res %&gt;% \n  extract_workflow(\"pls_rda\") %&gt;% \n  finalize_workflow(\n    bean_res %&gt;% \n      extract_workflow_set_result(\"pls_rda\") %&gt;% \n      select_best(metric = \"roc_auc\")\n  ) %&gt;% \n  last_fit(split = bean_split, metrics = metric_set(roc_auc))\n\nrda_wflow_fit &lt;- extract_workflow(rda_res)\n\n¿Cuáles son los resultados de nuestra métrica (ROC AUC multiclase) en el conjunto de pruebas?\n\ncollect_metrics(rda_res)\n## # A tibble: 1 × 4\n##   .metric .estimator .estimate .config             \n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n## 1 roc_auc hand_till      0.995 Preprocessor1_Model1\n\n¡Bastante bien! Usaremos este modelo en el próximo capítulo para demostrar métodos de importancia variable."
  },
  {
    "objectID": "16-dimensionality-reduction.html#sec-dimensionality-summary",
    "href": "16-dimensionality-reduction.html#sec-dimensionality-summary",
    "title": "16  Reducción de Dimensionalidad",
    "section": "\n16.7 Resumen del capítulo",
    "text": "16.7 Resumen del capítulo\nLa reducción de dimensionalidad puede ser un método útil para el análisis exploratorio de datos y el modelado. Los paquetes recipes y embed contienen pasos para una variedad de métodos diferentes y workflowsets facilita la elección de un método apropiado para un conjunto de datos. Este capítulo también analizó cómo se pueden usar recetas por sí solas, ya sea para depurar problemas con una receta o directamente para análisis exploratorio de datos y visualización de datos.\n\n\n\n\nKoklu, M, y IA Ozkan. 2020. «Multiclass classification of dry beans using computer vision and machine learning techniques». Computers and Electronics in Agriculture 174: 105507.\n\n\nKuhn, M, y K Johnson. 2020. Feature engineering and selection: A practical approach for predictive models. CRC Press.\n\n\nMcInnes, L, J Healy, y J Melville. 2020. «UMAP: Uniform manifold approximation and projection for dimension reduction».\n\n\nMingqiang, Y, K Kidiyo, y R Joseph. 2008. «A survey of shape feature extraction techniques». En Pattern Recognition, editado por PY Yin. Rijeka: IntechOpen. https://doi.org/10.5772/6237.\n\n\nSymons, S, y RG Fulcher. 1988. «Determination of wheat kernel morphological variation by digital image analysis: I. Variation in Eastern Canadian milling quality wheats». Journal of Cereal Science 8 (3): 211-18."
  },
  {
    "objectID": "16-dimensionality-reduction.html#footnotes",
    "href": "16-dimensionality-reduction.html#footnotes",
    "title": "16  Reducción de Dimensionalidad",
    "section": "",
    "text": "El paquete learntidymodels se puede encontrar en su sitio de GitHub: https://github.com/tidymodels/learntidymodels↩︎\nEl paquete mixOmics no está disponible en CRAN, sino en Bioconductor: https://doi.org/doi:10.18129/B9.bioc.mixOmics↩︎"
  },
  {
    "objectID": "17-encoding-categorical-data.html#is-an-encoding-necessary",
    "href": "17-encoding-categorical-data.html#is-an-encoding-necessary",
    "title": "17  Encoding Categorical Data",
    "section": "\n17.1 Is an Encoding Necessary?",
    "text": "17.1 Is an Encoding Necessary?\nA minority of models, such as those based on trees or rules, can handle categorical data natively and do not require encoding or transformation of these kinds of features. A tree-based model can natively partition a variable like Bldg_Type into groups of factor levels, perhaps OneFam alone in one group and Duplex and Twnhs together in another group. Naive Bayes models are another example where the structure of the model can deal with categorical variables natively; distributions are computed within each level, for example, for all the different kinds of Bldg_Type in the data set.\nThese models that can handle categorical features natively can also deal with numeric, continuous features, making the transformation or encoding of such variables optional. Does this help in some way, perhaps with model performance or time to train models? Typically no, as Section 5.7 of Kuhn and Johnson (2020) shows using benchmark data sets with untransformed factor variables compared with transformed dummy variables for those same features. In short, using dummy encodings did not typically result in better model performance but often required more time to train the models.\n\nWe advise starting with untransformed categorical variables when a model allows it; note that more complex encodings often do not result in better performance for such models."
  },
  {
    "objectID": "17-encoding-categorical-data.html#encoding-ordinal-predictors",
    "href": "17-encoding-categorical-data.html#encoding-ordinal-predictors",
    "title": "17  Encoding Categorical Data",
    "section": "\n17.2 Encoding Ordinal Predictors",
    "text": "17.2 Encoding Ordinal Predictors\nSometimes qualitative columns can be ordered, such as “low,” “medium,” and “high”. In base R, the default encoding strategy is to make new numeric columns that are polynomial expansions of the data. For columns that have five ordinal values, like the example shown in Table 17.2, the factor column is replaced with columns for linear, quadratic, cubic, and quartic terms:\n\n\n\n\nTable 17.2: Polynominal expansions for encoding an ordered variable.\n\nRaw Data\nLinear\nQuadratic\nCubic\nQuartic\n\n\n\nnone\n-0.63\n0.53\n-0.32\n0.12\n\n\na little\n-0.32\n-0.27\n0.63\n-0.48\n\n\nsome\n0.00\n-0.53\n0.00\n0.72\n\n\na bunch\n0.32\n-0.27\n-0.63\n-0.48\n\n\ncopious amounts\n0.63\n0.53\n0.32\n0.12\n\n\n\n\n\n\n\n\nWhile this is not unreasonable, it is not an approach that people tend to find useful. For example, an 11-degree polynomial is probably not the most effective way of encoding an ordinal factor for the months of the year. Instead, consider trying recipe steps related to ordered factors, such as step_unorder(), to convert to regular factors, and step_ordinalscore(), which maps specific numeric values to each factor level."
  },
  {
    "objectID": "17-encoding-categorical-data.html#using-the-outcome-for-encoding-predictors",
    "href": "17-encoding-categorical-data.html#using-the-outcome-for-encoding-predictors",
    "title": "17  Encoding Categorical Data",
    "section": "\n17.3 Using the Outcome for Encoding Predictors",
    "text": "17.3 Using the Outcome for Encoding Predictors\nThere are multiple options for encodings more complex than dummy or indicator variables. One method called effect or likelihood encodings replaces the original categorical variables with a single numeric column that measures the effect of those data (Micci-Barreca 2001; Zumel and Mount 2019). For example, for the neighborhood predictor in the Ames housing data, we can compute the mean or median sale price for each neighborhood (as shown in Figure 17.1) and substitute these means for the original data values:\n\names_train %&gt;%\n  group_by(Neighborhood) %&gt;%\n  summarize(mean = mean(Sale_Price),\n            std_err = sd(Sale_Price) / sqrt(length(Sale_Price))) %&gt;% \n  ggplot(aes(y = reorder(Neighborhood, mean), x = mean)) + \n  geom_point() +\n  geom_errorbar(aes(xmin = mean - 1.64 * std_err, xmax = mean + 1.64 * std_err)) +\n  labs(y = NULL, x = \"Price (mean, log scale)\")\n\n\n\nFigure 17.1: Mean home price for neighborhoods in the Ames training set, which can be used as an effect encoding for this categorical variable\n\n\n\nThis kind of effect encoding works well when your categorical variable has many levels. In tidymodels, the embed package includes several recipe step functions for different kinds of effect encodings, such as step_lencode_glm(), step_lencode_mixed(), and step_lencode_bayes(). These steps use a generalized linear model to estimate the effect of each level in a categorical predictor on the outcome. When using a recipe step like step_lencode_glm(), specify the variable being encoded first and then the outcome using vars():\n\nlibrary(embed)\n\names_glm &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n           Latitude + Longitude, data = ames_train) %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_lencode_glm(Neighborhood, outcome = vars(Sale_Price)) %&gt;%\n  step_dummy(all_nominal_predictors()) %&gt;% \n  step_interact( ~ Gr_Liv_Area:starts_with(\"Bldg_Type_\") ) %&gt;% \n  step_ns(Latitude, Longitude, deg_free = 20)\n\names_glm\n## \n## ── Recipe ───────────────────────────────────────────────────────────────────────────\n## \n## ── Inputs\n## Number of variables by role\n## outcome:   1\n## predictor: 6\n## \n## ── Operations\n## • Log transformation on: Gr_Liv_Area\n## • Linear embedding for factors via GLM for: Neighborhood\n## • Dummy variables from: all_nominal_predictors()\n## • Interactions with: Gr_Liv_Area:starts_with(\"Bldg_Type_\")\n## • Natural splines on: Latitude, Longitude\n\nAs detailed in Section 16.4, we can prep() our recipe to fit or estimate parameters for the preprocessing transformations using training data. We can then tidy() this prepared recipe to see the results:\n\nglm_estimates &lt;-\n  prep(ames_glm) %&gt;%\n  tidy(number = 2)\n\nglm_estimates\n## # A tibble: 29 × 4\n##   level              value terms        id               \n##   &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;        &lt;chr&gt;            \n## 1 North_Ames          5.15 Neighborhood lencode_glm_ZsXdy\n## 2 College_Creek       5.29 Neighborhood lencode_glm_ZsXdy\n## 3 Old_Town            5.07 Neighborhood lencode_glm_ZsXdy\n## 4 Edwards             5.09 Neighborhood lencode_glm_ZsXdy\n## 5 Somerset            5.35 Neighborhood lencode_glm_ZsXdy\n## 6 Northridge_Heights  5.49 Neighborhood lencode_glm_ZsXdy\n## # ℹ 23 more rows\n\nWhen we use the newly encoded Neighborhood numeric variable created via this method, we substitute the original level (such as \"North_Ames\") with the estimate for Sale_Price from the GLM.\nEffect encoding methods like this one can also seamlessly handle situations where a novel factor level is encountered in the data. This value is the predicted price from the GLM when we don’t have any specific neighborhood information:\n\nglm_estimates %&gt;%\n  filter(level == \"..new\")\n## # A tibble: 1 × 4\n##   level value terms        id               \n##   &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;        &lt;chr&gt;            \n## 1 ..new  5.23 Neighborhood lencode_glm_ZsXdy\n\n\nEffect encodings can be powerful but should be used with care. The effects should be computed from the training set, after data splitting. This type of supervised preprocessing should be rigorously resampled to avoid overfitting (see Chapter 10).\n\nWhen you create an effect encoding for your categorical variable, you are effectively layering a mini-model inside your actual model. The possibility of overfitting with effect encodings is a representative example for why feature engineering must be considered part of the model process, as described in Chapter @ref(workflows), and why feature engineering must be estimated together with model parameters inside resampling.\n\n17.3.1 Effect encodings with partial pooling\nCreating an effect encoding with step_lencode_glm() estimates the effect separately for each factor level (in this example, neighborhood). However, some of these neighborhoods have many houses in them, and some have only a few. There is much more uncertainty in our measurement of price for the single training set home in the Landmark neighborhood than the 354 training set homes in North Ames. We can use partial pooling to adjust these estimates so that levels with small sample sizes are shrunken toward the overall mean. The effects for each level are modeled all at once using a mixed or hierarchical generalized linear model:\n\names_mixed &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n           Latitude + Longitude, data = ames_train) %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_lencode_mixed(Neighborhood, outcome = vars(Sale_Price)) %&gt;%\n  step_dummy(all_nominal_predictors()) %&gt;% \n  step_interact( ~ Gr_Liv_Area:starts_with(\"Bldg_Type_\") ) %&gt;% \n  step_ns(Latitude, Longitude, deg_free = 20)\n\names_mixed\n## \n## ── Recipe ───────────────────────────────────────────────────────────────────────────\n## \n## ── Inputs\n## Number of variables by role\n## outcome:   1\n## predictor: 6\n## \n## ── Operations\n## • Log transformation on: Gr_Liv_Area\n## • Linear embedding for factors via mixed effects for: Neighborhood\n## • Dummy variables from: all_nominal_predictors()\n## • Interactions with: Gr_Liv_Area:starts_with(\"Bldg_Type_\")\n## • Natural splines on: Latitude, Longitude\n\nLet’s prep() and tidy() this recipe to see the results:\n\nmixed_estimates &lt;-\n  prep(ames_mixed) %&gt;%\n  tidy(number = 2)\n\nmixed_estimates\n## # A tibble: 29 × 4\n##   level              value terms        id                 \n##   &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;        &lt;chr&gt;              \n## 1 North_Ames          5.15 Neighborhood lencode_mixed_SC9hi\n## 2 College_Creek       5.29 Neighborhood lencode_mixed_SC9hi\n## 3 Old_Town            5.07 Neighborhood lencode_mixed_SC9hi\n## 4 Edwards             5.10 Neighborhood lencode_mixed_SC9hi\n## 5 Somerset            5.35 Neighborhood lencode_mixed_SC9hi\n## 6 Northridge_Heights  5.49 Neighborhood lencode_mixed_SC9hi\n## # ℹ 23 more rows\n\nNew levels are then encoded at close to the same value as with the GLM:\n\nmixed_estimates %&gt;%\n  filter(level == \"..new\")\n## # A tibble: 1 × 4\n##   level value terms        id                 \n##   &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;        &lt;chr&gt;              \n## 1 ..new  5.23 Neighborhood lencode_mixed_SC9hi\n\n\nYou can use a fully Bayesian hierarchical model for the effects in the same way with step_lencode_bayes().\n\nLet’s visually compare the effects using partial pooling vs. no pooling in Figure 17.2:\n\nglm_estimates %&gt;%\n  rename(`no pooling` = value) %&gt;%\n  left_join(\n    mixed_estimates %&gt;%\n      rename(`partial pooling` = value), by = \"level\"\n  ) %&gt;%\n  left_join(\n    ames_train %&gt;% \n      count(Neighborhood) %&gt;% \n      mutate(level = as.character(Neighborhood))\n  ) %&gt;%\n  ggplot(aes(`no pooling`, `partial pooling`, size = sqrt(n))) +\n  geom_abline(color = \"gray50\", lty = 2) +\n  geom_point(alpha = 0.7) +\n  coord_fixed()\n## Warning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\nFigure 17.2: Comparing the effect encodings for neighborhood estimated without pooling to those with partial pooling\n\n\n\nNotice in Figure 17.2 that most estimates for neighborhood effects are about the same when we compare pooling to no pooling. However, the neighborhoods with the fewest homes in them have been pulled (either up or down) toward the mean effect. When we use pooling, we shrink the effect estimates toward the mean because we don’t have as much evidence about the price in those neighborhoods."
  },
  {
    "objectID": "17-encoding-categorical-data.html#feature-hashing",
    "href": "17-encoding-categorical-data.html#feature-hashing",
    "title": "17  Encoding Categorical Data",
    "section": "\n17.4 Feature Hashing",
    "text": "17.4 Feature Hashing\nTraditional dummy variables as described in Section 8.4.1 require that all of the possible categories be known to create a full set of numeric features. Feature hashing methods (Weinberger et al. 2009) also create dummy variables, but only consider the value of the category to assign it to a predefined pool of dummy variables. Let’s look at the Neighborhood values in Ames again and use the rlang::hash() function to understand more:\n\nlibrary(rlang)\n\names_hashed &lt;-\n  ames_train %&gt;%\n  mutate(Hash = map_chr(Neighborhood, hash))\n\names_hashed %&gt;%\n  select(Neighborhood, Hash)\n## # A tibble: 2,342 × 2\n##   Neighborhood    Hash                            \n##   &lt;fct&gt;           &lt;chr&gt;                           \n## 1 North_Ames      076543f71313e522efe157944169d919\n## 2 North_Ames      076543f71313e522efe157944169d919\n## 3 Briardale       b598bec306983e3e68a3118952df8cf0\n## 4 Briardale       b598bec306983e3e68a3118952df8cf0\n## 5 Northpark_Villa 6af95b5db968bf393e78188a81e0e1e4\n## 6 Northpark_Villa 6af95b5db968bf393e78188a81e0e1e4\n## # ℹ 2,336 more rows\n\nIf we input Briardale to this hashing function, we will always get the same output. The neighborhoods in this case are called the “keys,” while the outputs are the “hashes.”\n\nA hashing function takes an input of variable size and maps it to an output of fixed size. Hashing functions are commonly used in cryptography and databases.\n\nThe rlang::hash() function generates a 128-bit hash, which means there are 2^128 possible hash values. This is great for some applications but doesn’t help with feature hashing of high cardinality variables (variables with many levels). In feature hashing, the number of possible hashes is a hyperparameter and is set by the model developer through computing the modulo of the integer hashes. We can get sixteen possible hash values by using Hash %% 16:\n\names_hashed %&gt;%\n  ## first make a smaller hash for integers that R can handle\n  mutate(Hash = strtoi(substr(Hash, 26, 32), base = 16L),  \n         ## now take the modulo\n         Hash = Hash %% 16) %&gt;%\n  select(Neighborhood, Hash)\n## # A tibble: 2,342 × 2\n##   Neighborhood     Hash\n##   &lt;fct&gt;           &lt;dbl&gt;\n## 1 North_Ames          9\n## 2 North_Ames          9\n## 3 Briardale           0\n## 4 Briardale           0\n## 5 Northpark_Villa     4\n## 6 Northpark_Villa     4\n## # ℹ 2,336 more rows\n\nNow instead of the 28 neighborhoods in our original data or an incredibly huge number of the original hashes, we have sixteen hash values. This method is very fast and memory efficient, and it can be a good strategy when there are a large number of possible categories.\n\nFeature hashing is useful for text data as well as high cardinality categorical data. See Section 6.7 of Hvitfeldt and Silge (2021) for a case study demonstration with text predictors.\n\nWe can implement feature hashing using a tidymodels recipe step from the textrecipes package:\n\nlibrary(textrecipes)\names_hash &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n           Latitude + Longitude, data = ames_train) %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_dummy_hash(Neighborhood, signed = FALSE, num_terms = 16L) %&gt;%\n  step_dummy(all_nominal_predictors()) %&gt;% \n  step_interact( ~ Gr_Liv_Area:starts_with(\"Bldg_Type_\") ) %&gt;% \n  step_ns(Latitude, Longitude, deg_free = 20)\n\names_hash\n## \n## ── Recipe ───────────────────────────────────────────────────────────────────────────\n## \n## ── Inputs\n## Number of variables by role\n## outcome:   1\n## predictor: 6\n## \n## ── Operations\n## • Log transformation on: Gr_Liv_Area\n## • Feature hashing with: Neighborhood\n## • Dummy variables from: all_nominal_predictors()\n## • Interactions with: Gr_Liv_Area:starts_with(\"Bldg_Type_\")\n## • Natural splines on: Latitude, Longitude\n\nFeature hashing is fast and efficient but has a few downsides. For example, different category values often map to the same hash value. This is called a collision or aliasing. How often did this happen with our neighborhoods in Ames? Table 17.3 presents the distribution of number of neighborhoods per hash value.\n\n## 'as(&lt;dgTMatrix&gt;, \"dgCMatrix\")' is deprecated.\n## Use 'as(., \"CsparseMatrix\")' instead.\n## See help(\"Deprecated\") and help(\"Matrix-deprecated\").\n\n\n\nTable 17.3: The number of hash features at each number of neighborhoods.\n\nNumber of neighborhoods within a hash feature\nNumber of occurrences\n\n\n\n0\n1\n\n\n1\n7\n\n\n2\n4\n\n\n3\n3\n\n\n4\n1\n\n\n\n\n\n\n\n\nThe number of neighborhoods mapped to each hash value varies between zero and four. All of the hash values greater than one are examples of hash collisions.\nWhat are some things to consider when using feature hashing?\n\nFeature hashing is not directly interpretable because hash functions cannot be reversed. We can’t determine what the input category levels were from the hash value, or if a collision occurred.\nThe number of hash values is a tuning parameter of this preprocessing technique, and you should try several values to determine what is best for your particular modeling approach. A lower number of hash values results in more collisions, but a high number may not be an improvement over your original high cardinality variable.\nFeature hashing can handle new category levels at prediction time, since it does not rely on pre-determined dummy variables.\nYou can reduce hash collisions with a signed hash by using signed = TRUE. This expands the values from only 1 to either +1 or -1, depending on the sign of the hash.\n\n\nIt is likely that some hash columns will contain all zeros, as we see in this example. We recommend a zero-variance filter via step_zv() to filter out such columns."
  },
  {
    "objectID": "17-encoding-categorical-data.html#more-encoding-options",
    "href": "17-encoding-categorical-data.html#more-encoding-options",
    "title": "17  Encoding Categorical Data",
    "section": "\n17.5 More Encoding Options",
    "text": "17.5 More Encoding Options\nEven more options are available for transforming factors to a numeric representation.\nWe can build a full set of entity embeddings (Guo and Berkhahn 2016) to transform a categorical variable with many levels to a set of lower-dimensional vectors. This approach is best suited to a nominal variable with many category levels, many more than the example we’ve used with neighborhoods in Ames.\n\nThe idea of entity embeddings comes from the methods used to create word embeddings from text data. See Chapter 5 of Hvitfeldt and Silge (2021) for more on word embeddings.\n\nEmbeddings for a categorical variable can be learned via a TensorFlow neural network with the step_embed() function in embed. We can use the outcome alone or optionally the outcome plus a set of additional predictors. Like in feature hashing, the number of new encoding columns to create is a hyperparameter of the feature engineering. We also must make decisions about the neural network structure (the number of hidden units) and how to fit the neural network (how many epochs to train, how much of the data to use for validation in measuring metrics).\nYet one more option available for dealing with a binary outcome is to transform a set of category levels based on their association with the binary outcome. This weight of evidence (WoE) transformation (Good 1985) uses the logarithm of the “Bayes factor” (the ratio of the posterior odds to the prior odds) and creates a dictionary mapping each category level to a WoE value. WoE encodings can be determined with the step_woe() function in embed."
  },
  {
    "objectID": "17-encoding-categorical-data.html#sec-categorical-summary",
    "href": "17-encoding-categorical-data.html#sec-categorical-summary",
    "title": "17  Codificación de datos categóricos",
    "section": "\n17.6 Resumen del capítulo",
    "text": "17.6 Resumen del capítulo\nEn este capítulo, aprendió a utilizar recetas de preprocesamiento para codificar predictores categóricos. La opción más sencilla para transformar una variable categórica en una representación numérica es crear variables ficticias a partir de los niveles, pero esta opción no funciona bien cuando tienes una variable con alta cardinalidad (demasiados niveles) o cuando puedes ver valores novedosos en tiempo de predicción (nuevos niveles). Una opción en tal situación es crear codificaciones de efectos, un método de codificación supervisado que utiliza el resultado. Las codificaciones de efectos se pueden aprender agrupando o sin las categorías. Otra opción utiliza una función hashing para asignar niveles de categoría a un conjunto nuevo y más pequeño de variables ficticias. El hash de funciones es rápido y ocupa poca memoria. Otras opciones incluyen incorporaciones de entidades (aprendidas a través de una red neuronal) y transformación del peso de la evidencia.\nLa mayoría de los algoritmos modelo requieren algún tipo de transformación o codificación de este tipo para variables categóricas. Una minoría de modelos, incluidos los basados ​​en árboles y reglas, pueden manejar variables categóricas de forma nativa y no requieren dichas codificaciones.\n\n\n\n\nGood, I. J. 1985. «Weight of evidence: A brief survey». Bayesian Statistics 2: 249-70.\n\n\nGuo, Cheng, y Felix Berkhahn. 2016. «Entity Embeddings of Categorical Variables». http://arxiv.org/abs/1604.06737.\n\n\nHvitfeldt, E., y J. Silge. 2021. Supervised Machine Learning for Text Analysis in R. A Chapman & Hall libro. CRC Press. https://smltar.com/.\n\n\nKuhn, M, y K Johnson. 2020. Feature engineering and selection: A practical approach for predictive models. CRC Press.\n\n\nMicci-Barreca, Daniele. 2001. «A Preprocessing Scheme for High-Cardinality Categorical Attributes in Classification and Prediction Problems». SIGKDD Explor. Newsl. 3 (1): 27-32. https://doi.org/10.1145/507533.507538.\n\n\nWeinberger, K, A Dasgupta, J Langford, A Smola, y J Attenberg. 2009. «Feature hashing for large scale multitask learning». En Proceedings of the 26th Annual International Conference on Machine Learning, 1113-20. ACM.\n\n\nZumel, Nina, y John Mount. 2019. «vtreat: a data.frame Processor for Predictive Modeling». http://arxiv.org/abs/1611.09477."
  },
  {
    "objectID": "17-encoding-categorical-data.html#footnotes",
    "href": "17-encoding-categorical-data.html#footnotes",
    "title": "17  Codificación de datos categóricos",
    "section": "",
    "text": "Esto contrasta con el modelado estadístico en Python, donde las variables categóricas a menudo se representan directamente solo con números enteros, como “0, 1, 2” que representa rojo, azul y verde.↩︎"
  },
  {
    "objectID": "18-explaining-models-and-predictions.html#sec-explain-summary",
    "href": "18-explaining-models-and-predictions.html#sec-explain-summary",
    "title": "18  Explaining Models and Predictions",
    "section": "\n18.6 Chapter Summary",
    "text": "18.6 Chapter Summary\nFor some types of models, the answer to why a model made a certain prediction is straightforward, but for other types of models, we must use separate explainer algorithms to understand what features are relatively most important for predictions. You can generate two main kinds of model explanations from a trained model. Global explanations provide information aggregated over an entire data set, while local explanations provide understanding about a model’s predictions for a single observation.\nPackages such as DALEX and its supporting package DALEXtra, vip, and lime can be integrated into a tidymodels analysis to provide these model explainers. Model explanations are just one piece of understanding whether your model is appropriate and effective, along with estimates of model performance; Chapter @ref(trust) further explores the quality and trustworthiness of predictions.\n\n\n\n\nBiecek, Przemyslaw, and Tomasz Burzykowski. 2021. Explanatory Model Analysis. Chapman; Hall/CRC, New York. https://ema.drwhy.ai/.\n\n\nBreiman, L. 2001. “Random Forests.” Machine Learning 45 (1): 5–32.\n\n\nLundberg, Scott M., and Su-In Lee. 2017. “A Unified Approach to Interpreting Model Predictions.” In Proceedings of the 31st International Conference on Neural Information Processing Systems, 4768–77. NIPS’17. Red Hook, NY, USA: Curran Associates Inc.\n\n\nMolnar, Christopher. 2020. Interpretable Machine Learning. lulu.com. https://christophm.github.io/interpretable-ml-book/."
  },
  {
    "objectID": "19-when-should-you-trust-predictions.html#sec-equivocal-zones",
    "href": "19-when-should-you-trust-predictions.html#sec-equivocal-zones",
    "title": "19  ¿Cuándo debería confiar en sus predicciones?",
    "section": "\n19.1 Resultados equívocos",
    "text": "19.1 Resultados equívocos\n\nEn algunos casos, la cantidad de incertidumbre asociada con una predicción es demasiado alta para confiar en ella.\n\nSi el resultado de un modelo indicara que usted tenía un 51% de posibilidades de haber contraído COVID-19, sería natural ver el diagnóstico con cierto escepticismo. De hecho, los organismos reguladores suelen exigir que muchos diagnósticos médicos tengan una zona equívoca. Esta zona es un rango de resultados en los que la predicción no debe informarse a los pacientes, por ejemplo, algún rango de resultados de pruebas de COVID-19 que son demasiado inciertos para informarse a un paciente. Consulte Danowski et al. (1970) y Kerleguer et al. (2003) para ver ejemplos. La misma noción se puede aplicar a modelos creados fuera del diagnóstico médico.\nUsemos una función que pueda simular datos de clasificación con dos clases y dos predictores (x e y). El verdadero modelo es un modelo de regresión logística con la ecuación:\n\\[\n\\mathrm{logit}(p) = -1 - 2x - \\frac{x^2}{5} + 2y^2\n\\]\nLos dos predictores siguen una distribución normal bivariada con una correlación de 0,70. Crearemos un conjunto de entrenamiento de 200 muestras y un conjunto de prueba de 50:\n\nlibrary(tidymodels)\ntidymodels_prefer()\n\nsimulate_two_classes &lt;- \n  function (n, error = 0.1, eqn = quote(-1 - 2 * x - 0.2 * x^2 + 2 * y^2))  {\n    # Predictores ligeramente correlacionados\n    sigma &lt;- matrix(c(1, 0.7, 0.7, 1), nrow = 2, ncol = 2)\n    dat &lt;- MASS::mvrnorm(n = n, mu = c(0, 0), Sigma = sigma)\n    colnames(dat) &lt;- c(\"x\", \"y\")\n    cls &lt;- paste0(\"class_\", 1:2)\n    dat &lt;- \n      as_tibble(dat) %&gt;% \n      mutate(\n        linear_pred = !!eqn,\n        # Agregue algo de ruido de clasificación errónea\n        linear_pred = linear_pred + rnorm(n, sd = error),\n        prob = binomial()$linkinv(linear_pred),\n        class = ifelse(prob &gt; runif(n), cls[1], cls[2]),\n        class = factor(class, levels = cls)\n      )\n    dplyr::select(dat, x, y, class)\n  }\n\nset.seed(1901)\ntraining_set &lt;- simulate_two_classes(200)\ntesting_set  &lt;- simulate_two_classes(50)\n\nEstimamos un modelo de regresión logística utilizando métodos bayesianos (utilizando las distribuciones previas gaussianas predeterminadas para los parámetros):\n\ntwo_class_mod &lt;- \n  logistic_reg() %&gt;% \n  set_engine(\"stan\", seed = 1902) %&gt;% \n  fit(class ~ . + I(x^2)+ I(y^2), data = training_set)\nprint(two_class_mod, digits = 3)\n## parsnip model object\n## \n## stan_glm\n##  family:       binomial [logit]\n##  formula:      class ~ . + I(x^2) + I(y^2)\n##  observations: 200\n##  predictors:   5\n## ------\n##             Median MAD_SD\n## (Intercept)  1.092  0.287\n## x            2.290  0.423\n## y            0.314  0.354\n## I(x^2)       0.077  0.307\n## I(y^2)      -2.465  0.424\n## \n## ------\n## * For help interpreting the printed output see ?print.stanreg\n## * For info on the priors used see ?prior_summary.stanreg\n\nEl límite de clase ajustado se superpone al conjunto de prueba en Figura 19.1. Los puntos de datos más cercanos al límite de clase son los más inciertos. Si sus valores cambiaran ligeramente, su clase prevista podría cambiar. Un método simple para descalificar algunos resultados es llamarlos “equívocos” si los valores están dentro de algún rango alrededor del 50% (o el límite de probabilidad apropiado para una situación determinada). Dependiendo del problema al que se aplique el modelo, esto podría indicar que debemos recopilar otra medición o que necesitamos más información antes de que sea posible una predicción confiable.\n\n\n\n\nFigura 19.1: Conjunto de datos simulado de dos clases con ajuste de regresión logística y límite de decisión.\n\n\n\nPodríamos basar el ancho de la banda alrededor del límite en cómo mejora el rendimiento cuando se eliminan los resultados inciertos. Sin embargo, también debemos estimar la tasa reportable (la proporción esperada de resultados utilizables). Por ejemplo, no sería útil en situaciones del mundo real tener un rendimiento perfecto pero publicar predicciones en solo el 2% de las muestras pasadas al modelo.\nUtilicemos el conjunto de pruebas para determinar el equilibrio entre mejorar el rendimiento y tener suficientes resultados reportables. Las predicciones se crean usando:\n\ntest_pred &lt;- augment(two_class_mod, testing_set)\ntest_pred %&gt;% head()\n## # A tibble: 6 × 6\n##   .pred_class .pred_class_1 .pred_class_2      x      y class  \n##   &lt;fct&gt;               &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;fct&gt;  \n## 1 class_2           0.0256          0.974  1.12  -0.176 class_2\n## 2 class_1           0.555           0.445 -0.126 -0.582 class_2\n## 3 class_2           0.00620         0.994  1.92   0.615 class_2\n## 4 class_2           0.472           0.528 -0.400  0.252 class_2\n## 5 class_2           0.163           0.837  1.30   1.09  class_1\n## 6 class_2           0.0317          0.968  2.59   1.36  class_2\n\nCon tidymodels, el paquete probably contiene funciones para zonas equívocas. Para casos con dos clases, la función make_two_class_pred() crea una columna similar a un factor que tiene las clases predichas con una zona equívoca:\n\nlibrary(probably)\n\nlvls &lt;- levels(training_set$class)\n\ntest_pred &lt;- \n  test_pred %&gt;% \n  mutate(.pred_with_eqz = make_two_class_pred(.pred_class_1, lvls, buffer = 0.15))\n\ntest_pred %&gt;% count(.pred_with_eqz)\n## # A tibble: 3 × 2\n##   .pred_with_eqz     n\n##       &lt;clss_prd&gt; &lt;int&gt;\n## 1           [EQ]     9\n## 2        class_1    20\n## 3        class_2    21\n\nRows that are within \\(0.50\\pm0.15\\) are given a value of [EQ].\n\nLa notación [EQ] en este ejemplo no es un nivel de factor sino un atributo de esa columna.\n\nDado que los niveles de los factores son los mismos que los de los datos originales, las matrices de confusión y otras estadísticas se pueden calcular sin errores. Cuando se utilizan funciones estándar del paquete yardstick, los resultados equívocos se convierten a NA y no se utilizan en los cálculos que utilizan predicciones de clases estrictas. Observe las diferencias en estas matrices de confusión:\n\n# Toda la información\ntest_pred %&gt;% conf_mat(class, .pred_class)\n##           Truth\n## Prediction class_1 class_2\n##    class_1      20       6\n##    class_2       5      19\n\n# Sólo resultados reportables:\ntest_pred %&gt;% conf_mat(class, .pred_with_eqz)\n##           Truth\n## Prediction class_1 class_2\n##    class_1      17       3\n##    class_2       5      16\n\nTambién está disponible una función is_equivocal() para filtrar estas filas de los datos.\n¿La zona equívoca ayuda a mejorar la precisión? Veamos diferentes tamaños de búfer, como se muestra en Figura 19.2:\n\n# Una función para cambiar el búfer y luego calcular el rendimiento.\neq_zone_results &lt;- function(buffer) {\n  test_pred &lt;- \n    test_pred %&gt;% \n    mutate(.pred_with_eqz = make_two_class_pred(.pred_class_1, lvls, buffer = buffer))\n  acc &lt;- test_pred %&gt;% accuracy(class, .pred_with_eqz)\n  rep_rate &lt;- reportable_rate(test_pred$.pred_with_eqz)\n  tibble(accuracy = acc$.estimate, reportable = rep_rate, buffer = buffer)\n}\n\n# Evaluar una secuencia de buffers y trazar los resultados.\nmap(seq(0, .1, length.out = 40), eq_zone_results) %&gt;% \n  list_rbind() %&gt;% \n  pivot_longer(c(-buffer), names_to = \"statistic\", values_to = \"value\") %&gt;% \n  ggplot(aes(x = buffer, y = value, lty = statistic)) + \n  geom_step(linewidth = 1.2, alpha = 0.8) + \n  labs(y = NULL, lty = NULL)\n\n\n\n\n\nFigura 19.2: El efecto de las zonas equívocas en el rendimiento del modelo.\n\n\n\nFigura 19.2 nos muestra que la precisión mejora en unos pocos puntos porcentuales, ¡pero a costa de que casi el 10% de las predicciones sean inutilizables! El valor de tal compromiso depende de cómo se utilizarán las predicciones del modelo.\nEste análisis se centró en utilizar la probabilidad de clase prevista para descalificar puntos, ya que esta es una medida fundamental de incertidumbre en los modelos de clasificación. Un enfoque ligeramente mejor sería utilizar el error estándar de la probabilidad de clase. Dado que utilizamos un modelo bayesiano, las estimaciones de probabilidad que encontramos son en realidad la media de la distribución predictiva posterior. En otras palabras, el modelo bayesiano nos da una distribución para la probabilidad de clase. Medir la desviación estándar de esta distribución nos da un error estándar de predicción de la probabilidad. En la mayoría de los casos, este valor está directamente relacionado con la probabilidad de clase media. Quizás recuerdes que, para una variable aleatoria de Bernoulli con probabilidad \\(p\\), la varianza es \\(p(1-p)\\). Debido a esta relación, el error estándar es mayor cuando la probabilidad es del 50%. En lugar de asignar un resultado equívoco utilizando la probabilidad de clase, podríamos utilizar un límite en el error estándar de predicción.\nUn aspecto importante del error estándar de predicción es que tiene en cuenta algo más que la probabilidad de clase. En los casos en los que hay una extrapolación significativa o valores predictivos aberrantes, el error estándar podría aumentar. El beneficio de utilizar el error estándar de predicción es que también podría señalar predicciones que son problemáticas (en lugar de simplemente inciertas). Una razón por la que utilizamos el modelo bayesiano es que estima naturalmente el error estándar de predicción; No muchos modelos pueden calcular esto. Para nuestro conjunto de prueba, usar type = \"pred_int\" producirá límites superior e inferior y std_error agrega una columna para esa cantidad. Para intervalos del 80%:\n\ntest_pred &lt;- \n  test_pred %&gt;% \n  bind_cols(\n    predict(two_class_mod, testing_set, type = \"pred_int\", std_error = TRUE)\n  )\n\nPara nuestro ejemplo donde el modelo y los datos se comportan bien, Figura 19.3 muestra el error estándar de predicción en todo el espacio:\n\n\n\n\nFigura 19.3: El efecto del error estándar de predicción superpuesto con los datos del conjunto de pruebas\n\n\n\nEl uso del error estándar como medida para evitar que se predigan muestras también se puede aplicar a modelos con resultados numéricos. Sin embargo, como se muestra en la siguiente sección, es posible que esto no siempre funcione."
  },
  {
    "objectID": "19-when-should-you-trust-predictions.html#sec-applicability-domains",
    "href": "19-when-should-you-trust-predictions.html#sec-applicability-domains",
    "title": "19  ¿Cuándo debería confiar en sus predicciones?",
    "section": "\n19.2 Determinación de la aplicabilidad del modelo",
    "text": "19.2 Determinación de la aplicabilidad del modelo\nLas zonas equívocas intentan medir la confiabilidad de una predicción basada en los resultados del modelo. Puede ser que las estadísticas del modelo, como el error estándar de predicción, no puedan medir el impacto de la extrapolación, por lo que necesitamos otra forma de evaluar si debemos confiar en una predicción y responder: “¿Es nuestro modelo aplicable para predecir un punto de datos específico?” Tomemos los datos del tren de Chicago utilizados ampliamente en Kuhn y Johnson (2019) y mostrados por primera vez en Sección 2.2 . El objetivo es predecir la cantidad de clientes que ingresan a la estación de tren de Clark y Lake cada día.\nEl conjunto de datos en el paquete modeldata (un paquete tidymodels con conjuntos de datos de ejemplo) tiene valores diarios entre enero 22, 2001 y formato r(max(Chicago$fecha), \"%B %d, %Y\"). Creemos un pequeño conjunto de pruebas utilizando las últimas dos semanas de datos:\n\n## loads tanto el conjunto de datos de \"Chicago\" como las \"estaciones\"\ndata(Chicago)\n\nChicago &lt;- Chicago %&gt;% select(ridership, date, one_of(stations))\n\nn &lt;- nrow(Chicago)\n\nChicago_train &lt;- Chicago %&gt;% slice(1:(n - 14))\nChicago_test  &lt;- Chicago %&gt;% slice((n - 13):n)\n\nLos principales predictores son los datos retrasados ​​sobre el número de pasajeros en diferentes estaciones de tren, incluidas Clark y Lake, así como la fecha. Los predictores de número de pasajeros están altamente correlacionados entre sí. En la siguiente receta, la columna de fecha se amplía con varias características nuevas y los predictores de número de pasajeros se representan mediante componentes de mínimos cuadrados parciales (PLS). PLS (Geladi y Kowalski 1986), como comentamos en Sección 16.5.2, es una versión supervisada del análisis de componentes principales donde las nuevas características han sido descorrelacionadas pero predicen los datos de resultado.\nUtilizando los datos preprocesados, ajustamos un modelo lineal estándar:\n\nbase_recipe &lt;-\n  recipe(ridership ~ ., data = Chicago_train) %&gt;%\n  # Crear funciones de fecha\n  step_date(date) %&gt;%\n  step_holiday(date, keep_original_cols = FALSE) %&gt;%\n  # Crear variables ficticias a partir de columnas de factores\n  step_dummy(all_nominal()) %&gt;%\n  # Elimine cualquier columna con un único valor único\n  step_zv(all_predictors()) %&gt;%\n  step_normalize(!!!stations)%&gt;%\n  step_pls(!!!stations, num_comp = 10, outcome = vars(ridership))\n\nlm_spec &lt;-\n  linear_reg() %&gt;%\n  set_engine(\"lm\") \n\nlm_wflow &lt;-\n  workflow() %&gt;%\n  add_recipe(base_recipe) %&gt;%\n  add_model(lm_spec)\n\nset.seed(1902)\nlm_fit &lt;- fit(lm_wflow, data = Chicago_train)\n\n¿Qué tan bien encajan los datos en el conjunto de prueba? Podemos predecit() para que el conjunto de pruebas encuentre tanto predicciones como intervalos de predicción:\n\nres_test &lt;-\n  predict(lm_fit, Chicago_test) %&gt;%\n  bind_cols(\n    predict(lm_fit, Chicago_test, type = \"pred_int\"),\n    Chicago_test\n  )\n\nres_test %&gt;% select(date, ridership, starts_with(\".pred\"))\n## # A tibble: 14 × 5\n##   date       ridership .pred .pred_lower .pred_upper\n##   &lt;date&gt;         &lt;dbl&gt; &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n## 1 2016-08-15     20.6  20.3        16.2         24.5\n## 2 2016-08-16     21.0  21.3        17.1         25.4\n## 3 2016-08-17     21.0  21.4        17.3         25.6\n## 4 2016-08-18     21.3  21.4        17.3         25.5\n## 5 2016-08-19     20.4  20.9        16.7         25.0\n## 6 2016-08-20      6.22  7.52        3.34        11.7\n## # ℹ 8 more rows\nres_test %&gt;% rmse(ridership, .pred)\n## # A tibble: 1 × 3\n##   .metric .estimator .estimate\n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n## 1 rmse    standard       0.865\n\nEstos son resultados bastante buenos. Figura 19.4 visualiza las predicciones junto con intervalos de predicción del 95%.\n\n\n\n\nFigura 19.4: Dos semanas de predicciones de 2016 para los datos de Chicago junto con intervalos de predicción del 95%\n\n\n\nDada la escala del número de usuarios, estos resultados parecen particularmente buenos para un modelo tan simple. Si se hubiera implementado este modelo, ¿qué tan bien habría funcionado unos años más tarde, en junio de 2020? El modelo realiza con éxito una predicción, como casi siempre lo hace un modelo predictivo cuando se le dan datos de entrada:\n\nres_2020 &lt;-\n  predict(lm_fit, Chicago_2020) %&gt;%\n  bind_cols(\n    predict(lm_fit, Chicago_2020, type = \"pred_int\"),\n    Chicago_2020\n  ) \n\nres_2020 %&gt;% select(date, contains(\".pred\"))\n## # A tibble: 14 × 4\n##   date       .pred .pred_lower .pred_upper\n##   &lt;date&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n## 1 2020-06-01 20.1        15.9         24.3\n## 2 2020-06-02 21.4        17.2         25.6\n## 3 2020-06-03 21.5        17.3         25.6\n## 4 2020-06-04 21.3        17.1         25.4\n## 5 2020-06-05 20.7        16.6         24.9\n## 6 2020-06-06  9.04        4.88        13.2\n## # ℹ 8 more rows\n\nLos intervalos de predicción tienen aproximadamente el mismo ancho, aunque estos datos están mucho más allá del período de tiempo del conjunto de entrenamiento original. Sin embargo, dada la pandemia mundial en 2020, el desempeño según estos datos es pésimo:\n\nres_2020 %&gt;% select(date, ridership, starts_with(\".pred\"))\n## # A tibble: 14 × 5\n##   date       ridership .pred .pred_lower .pred_upper\n##   &lt;date&gt;         &lt;dbl&gt; &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n## 1 2020-06-01     0.002 20.1        15.9         24.3\n## 2 2020-06-02     0.005 21.4        17.2         25.6\n## 3 2020-06-03     0.566 21.5        17.3         25.6\n## 4 2020-06-04     1.66  21.3        17.1         25.4\n## 5 2020-06-05     1.95  20.7        16.6         24.9\n## 6 2020-06-06     1.08   9.04        4.88        13.2\n## # ℹ 8 more rows\nres_2020 %&gt;% rmse(ridership, .pred)\n## # A tibble: 1 × 3\n##   .metric .estimator .estimate\n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n## 1 rmse    standard        17.2\n\nPuedes ver visualmente el terrible rendimiento de este modelo en Figura 19.5.\n\n\n\n\nFigura 19.5: Dos semanas de predicciones de 2020 para los datos de Chicago junto con intervalos de predicción del 95%\n\n\n\nLos intervalos de confianza y predicción para la regresión lineal se expanden a medida que los datos se alejan cada vez más del centro del conjunto de entrenamiento. Sin embargo, ese efecto no es lo suficientemente dramático como para señalar que estas predicciones son deficientes.\n\nA veces las estadísticas producidas por los modelos no miden muy bien la calidad de las predicciones.\n\nEsta situación se puede evitar teniendo una metodología secundaria que pueda cuantificar qué tan aplicable es el modelo para cualquier nueva predicción (es decir, el dominio de aplicabilidad del modelo). Existe una variedad de métodos para calcular un modelo de dominio de aplicabilidad, como Jaworska, Nikolova-Jeliazkova, y Aldenberg (2005) o Netzeva et al. (2005). El enfoque utilizado en este capítulo es un método no supervisado bastante simple que intenta medir cuánto (si lo hay) un nuevo punto de datos está más allá de los datos de entrenamiento.1\n\nLa idea es acompañar una predicción con una puntuación que mida qué tan similar es el nuevo punto al conjunto de entrenamiento.\n\nUn método que funciona bien utiliza el análisis de componentes principales (PCA) en los valores predictivos numéricos. Ilustraremos el proceso utilizando sólo dos de los predictores que corresponden al número de pasajeros en diferentes estaciones (estaciones de California y Austin). El conjunto de entrenamiento se muestra en el panel (a) en Figura 19.6. Los datos sobre el número de pasajeros de estas estaciones están altamente correlacionados y las dos distribuciones que se muestran en el diagrama de dispersión corresponden al número de pasajeros los fines de semana y días laborables.\nEl primer paso es realizar PCA con los datos de entrenamiento. Las puntuaciones de PCA para el conjunto de entrenamiento se muestran en el panel (b) en Figura 19.6. A continuación, utilizando estos resultados, medimos la distancia de cada punto de ajuste de entrenamiento al centro de los datos de PCA (panel (c) de Figura 19.6). Luego podemos usar esta distribución de referencia (panel (d) de Figura 19.6) para estimar qué tan lejos está un punto de datos de la corriente principal de los datos de entrenamiento.\n\n\n\n\nFigura 19.6: La distribución de referencia de PCA basada en el conjunto de entrenamiento.\n\n\n\nPara una nueva muestra, las puntuaciones de PCA se calculan junto con la distancia al centro del conjunto de entrenamiento.\nSin embargo, ¿qué significa que una nueva muestra tenga una distancia de X? Dado que los componentes de PCA pueden tener diferentes rangos de un conjunto de datos a otro, no existe un límite obvio para decir que una distancia es demasiado grande.\nUn enfoque es tratar las distancias de los datos del conjunto de entrenamiento como “normales”. Para muestras nuevas, podemos determinar cómo se compara la nueva distancia con el rango en la distribución de referencia (del conjunto de entrenamiento). Se puede calcular un percentil para nuevas muestras que refleje qué parte del conjunto de entrenamiento es menos extremo que las nuevas muestras.\n\nUn percentil del 90% significa que la mayoría de los datos del conjunto de entrenamiento están más cerca del centro de datos que la nueva muestra.\n\nEl gráfico en Figura 19.7 superpone una muestra del conjunto de prueba (triángulo y línea discontinua) y una muestra de 2020 (círculo y línea continua) con las distancias PCA del conjunto de entrenamiento.\n\n\n\n\nFigura 19.7: La distribución de referencia con dos nuevos puntos: uno usando el conjunto de prueba y otro a partir de los datos de 2020\n\n\n\nEl punto de ajuste de prueba tiene una distancia de 1.28. Está en el percentil 51.8% de la distribución del conjunto de entrenamiento, lo que indica que está cómodamente dentro de la corriente principal del conjunto de entrenamiento.\nLa muestra de 2020 está más alejada del centro que cualquiera de las muestras del conjunto de entrenamiento (con un percentil de 100%). Esto indica que la muestra es muy extrema y que su predicción correspondiente sería una extrapolación severa (y probablemente no debería informarse).\nEl paquete applicable puede desarrollar un modelo de dominio de aplicabilidad utilizando PCA. Usaremos los predictores de número de pasajeros de 20 estaciones retrasadas como datos de entrada para el análisis de PCA. Hay un argumento adicional llamado umbral, threshold, que determina cuántos componentes se utilizan en el cálculo de la distancia. Para nuestro ejemplo, usaremos un valor grande que indica que debemos usar suficientes componentes para representar el 99 % de la variación en los predictores de número de pasajeros:\n\nlibrary(applicable)\npca_stat &lt;- apd_pca(~ ., data = Chicago_train %&gt;% select(one_of(stations)), \n                    threshold = 0.99)\npca_stat\n## # Predictors:\n##    20\n## # Principal Components:\n##    9 components were needed\n##    to capture at least 99% of the\n##    total variation in the predictors.\n\nEl método autoplot() traza la distribución de referencia. Tiene un argumento opcional para qué datos trazar. Agregaremos un valor de distancia, distance para trazar solo la distribución de distancia del conjunto de entrenamiento. Este código genera la trama en Figura 19.8:\n\nautoplot(pca_stat, distance) + labs(x = \"distance\")\n\n\n\n\n\nFigura 19.8: Los resultados de usar el método autoplot() en un objeto aplicable\n\n\n\nEl eje x muestra los valores de la distancia y el eje y muestra los percentiles de la distribución. Por ejemplo, la mitad de las muestras del conjunto de entrenamiento tenían distancias menores que 3.7.\nPara calcular los percentiles de datos nuevos, la función score() funciona de la misma manera que predict():\n\nscore(pca_stat, Chicago_test) %&gt;% select(starts_with(\"distance\"))\n## # A tibble: 14 × 2\n##   distance distance_pctl\n##      &lt;dbl&gt;         &lt;dbl&gt;\n## 1     4.88          66.7\n## 2     5.21          71.4\n## 3     5.19          71.1\n## 4     5.00          68.5\n## 5     4.36          59.3\n## 6     4.10          55.2\n## # ℹ 8 more rows\n\nEstos parecen bastante razonables. Para los datos de 2020:\n\nscore(pca_stat, Chicago_2020) %&gt;% select(starts_with(\"distance\"))\n## # A tibble: 14 × 2\n##   distance distance_pctl\n##      &lt;dbl&gt;         &lt;dbl&gt;\n## 1     9.39          99.8\n## 2     9.40          99.8\n## 3     9.30          99.7\n## 4     9.30          99.7\n## 5     9.29          99.7\n## 6    10.1            1  \n## # ℹ 8 more rows\n\nLos valores de distancia de 2020 indican que estos valores predictivos están fuera de la gran mayoría de los datos vistos por el modelo en el momento del entrenamiento. Estos deben señalarse para que las predicciones no se informen en absoluto o se vean con escepticismo.\n\nUn aspecto importante de este análisis se refiere a qué predictores se utilizan para desarrollar el modelo de dominio de aplicabilidad. En nuestro análisis, utilizamos las columnas predictoras sin procesar. Sin embargo, al construir el modelo, se utilizaron en su lugar características de puntuación PLS. ¿Cuál de estos debería usar apd_pca()? La función apd_pca() también puede tomar una receta como entrada (en lugar de una fórmula) para que las distancias reflejen las puntuaciones PLS en lugar de las columnas predictivas individuales. Puede evaluar ambos métodos para comprender cuál ofrece resultados más relevantes."
  },
  {
    "objectID": "19-when-should-you-trust-predictions.html#sec-trust-summary",
    "href": "19-when-should-you-trust-predictions.html#sec-trust-summary",
    "title": "19  ¿Cuándo debería confiar en sus predicciones?",
    "section": "\n19.3 Resumen del capítulo",
    "text": "19.3 Resumen del capítulo\nEste capítulo mostró dos métodos para evaluar si las predicciones deben informarse a los consumidores de modelos. Las zonas equívocas se ocupan de resultados/predicciones y pueden resultar útiles cuando la cantidad de incertidumbre en una predicción es demasiado grande.\nLos modelos de dominio de aplicabilidad tratan con características/predictores y cuantifican la cantidad de extrapolación (si la hay) que ocurre al hacer una predicción. Este capítulo mostró un método básico que utiliza el análisis de componentes principales, aunque hay muchas otras formas de medir la aplicabilidad. El paquete applicable también contiene métodos especializados para conjuntos de datos donde todos los predictores son binarios. Este método calcula puntuaciones de similitud entre los puntos de datos del conjunto de entrenamiento para definir la distribución de referencia.\n\n\n\n\nBartley, E AND Schliep, M . AND Hanks. 2019. «Identifying and characterizing extrapolation in multivariate response data». PLOS ONE 14 (diciembre): 1-20.\n\n\nDanowski, T, J Aarons, J Hydovitz, y J Wingert. 1970. «Utility of equivocal glucose tolerances». Diabetes 19 (7): 524-26.\n\n\nGeladi, P., y B Kowalski. 1986. «Partial Least-Squares Regression: A Tutorial». Analytica Chimica Acta 185: 1-17.\n\n\nJaworska, J, N Nikolova-Jeliazkova, y T Aldenberg. 2005. «QSAR Applicability Domain Estimation by Projection of the Training Set in Descriptor Space: A Review». Alternatives to Laboratory Animals 33 (5): 445-59.\n\n\nKerleguer, A., J.-L. Koeck, M. Fabre, P. Gérôme, R. Teyssou, y V. Hervé. 2003. «Use of equivocal zone in interpretation of results of the amplified Mycobacterium Tuberculosis direct test for diagnosis of tuberculosis». Journal of Clinical Microbiology 41 (4): 1783-84.\n\n\nNetzeva, T, A Worth, T Aldenberg, R Benigni, M Cronin, P Gramatica, J Jaworska, et al. 2005. «Current Status of Methods for Defining the Applicability Domain of (Quantitative) Structure-Activity Relationships: The Report and Recommendations of ECVAM Workshop 52». Alternatives to Laboratory Animals 33 (2): 155-73."
  },
  {
    "objectID": "20-ensemble-models.html#sec-data-stack",
    "href": "20-ensemble-models.html#sec-data-stack",
    "title": "20  Conjuntos de modelos",
    "section": "\n20.1 Crear el conjunto de entrenamiento para apilar",
    "text": "20.1 Crear el conjunto de entrenamiento para apilar\nEl primer paso para construir un conjunto apilado se basa en las predicciones del conjunto de evaluación a partir de un esquema de remuestreo con múltiples divisiones. Para cada punto de datos en el conjunto de entrenamiento, el apilamiento requiere algún tipo de predicción fuera de la muestra. Para los modelos de regresión, este es el resultado previsto. Para los modelos de clasificación, las clases o probabilidades predichas están disponibles para su uso, aunque estas últimas contienen más información que las predicciones de clases estrictas. Para un conjunto de modelos, se ensambla un conjunto de datos donde las filas son las muestras del conjunto de entrenamiento y las columnas son las predicciones fuera de la muestra del conjunto de múltiples modelos.\nEn el Capítulo 15, utilizamos cinco repeticiones de validación cruzada 10 veces para volver a muestrear los datos. Este esquema de remuestreo genera cinco predicciones de conjuntos de evaluación para cada muestra de conjunto de entrenamiento. Pueden ocurrir múltiples predicciones fuera de la muestra en varias otras técnicas de remuestreo (por ejemplo, arranque). A los efectos del apilamiento, cualquier predicción replicada para un punto de datos en el conjunto de entrenamiento se promedia de modo que haya una única predicción por muestra del conjunto de entrenamiento por miembro candidato.\n\nTambién se pueden utilizar conjuntos de validación simples con el apilamiento, ya que tidymodels considera que se trata de un remuestreo único.\n\nPara el ejemplo concreto, el conjunto de entrenamiento utilizado para el apilamiento de modelos tiene columnas para todos los resultados de los parámetros de ajuste candidatos. Tabla 20.1 presenta las primeras seis filas y columnas seleccionadas.\n\n\n\n\nTabla 20.1: Predicciones a partir de configuraciones de parámetros de ajuste candidatos.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPredicciones Candidatas Apiladas\n\n\n\nMuestra #\nBagged Tree\nMARS 1\nMARS 2\nCubist 1\n...\nCubist 25\n...\n\n\n\n\n1\n25.18\n17.92\n17.15\n17.79\n\n17.82\n\n\n\n2\n5.18\n-1.77\n-0.73\n2.83\n\n3.87\n\n\n\n3\n9.71\n7.26\n5.91\n6.31\n\n8.60\n\n\n\n4\n25.21\n20.93\n21.52\n23.72\n\n21.61\n\n\n\n5\n6.33\n1.53\n0.15\n3.60\n\n4.57\n\n\n\n6\n7.88\n4.88\n1.74\n7.69\n\n7.55\n\n\n\n\n\n\n\n\n\nHay una sola columna para el modelo de árbol en bolsas ya que no tiene parámetros de ajuste. Además, recuerde que MARS se sintonizó en función de un único parámetro (el grado del producto) con dos configuraciones posibles, por lo que este modelo está representado por dos columnas. La mayoría de los otros modelos tienen 25 columnas correspondientes, como se muestra para Cubist en este ejemplo.\n\nPara los modelos de clasificación, las columnas de predicción candidatas serían probabilidades de clase predichas. Dado que estas columnas suman una para cada modelo, las probabilidades de una de las clases pueden omitirse.\n\nPara resumir dónde nos encontramos hasta ahora, el primer paso para el apilamiento es ensamblar las predicciones del conjunto de evaluación para el conjunto de entrenamiento de cada modelo candidato. Podemos utilizar estas predicciones de conjuntos de evaluación para avanzar y construir un conjunto apilado.\nPara comenzar a ensamblar con el paquete stacks, cree una pila de datos vacía usando la función stacks() y luego agregue modelos candidatos. Recuerde que utilizamos conjuntos de flujos de trabajo para ajustar una amplia variedad de modelos a estos datos. Usaremos los resultados de las carreras:\n\nrace_results\n## # A workflow set/tibble: 12 × 4\n##   wflow_id    info             option    result   \n##   &lt;chr&gt;       &lt;list&gt;           &lt;list&gt;    &lt;list&gt;   \n## 1 MARS        &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;race[+]&gt;\n## 2 CART        &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;race[+]&gt;\n## 3 CART_bagged &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;rsmp[+]&gt;\n## 4 RF          &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;race[+]&gt;\n## 5 boosting    &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;race[+]&gt;\n## 6 Cubist      &lt;tibble [1 × 4]&gt; &lt;opts[3]&gt; &lt;race[+]&gt;\n## # ℹ 6 more rows\n\nEn este caso, nuestra sintaxis es:\n\nlibrary(tidymodels)\nlibrary(stacks)\ntidymodels_prefer()\n\nconcrete_stack &lt;- \n  stacks() %&gt;% \n  add_candidates(race_results)\n\nconcrete_stack\n## # A data stack with 12 model definitions and 18 candidate members:\n## #   MARS: 1 model configuration\n## #   CART: 1 model configuration\n## #   CART_bagged: 1 model configuration\n## #   RF: 1 model configuration\n## #   boosting: 1 model configuration\n## #   Cubist: 1 model configuration\n## #   SVM_radial: 1 model configuration\n## #   SVM_poly: 1 model configuration\n## #   KNN: 3 model configurations\n## #   neural_network: 1 model configuration\n## #   full_quad_linear_reg: 5 model configurations\n## #   full_quad_KNN: 1 model configuration\n## # Outcome: compressive_strength (numeric)\n\nRecuerde que los métodos de carrera (Sección 13.5.5) son más eficientes ya que es posible que no evalúen todas las configuraciones en todos los remuestreos. El apilamiento requiere que todos los miembros candidatos tengan el conjunto completo de remuestras. add_candidates() incluye solo las configuraciones del modelo que tienen resultados completos.\n\n¿Por qué utilizar los resultados de las carreras en lugar del conjunto completo de modelos candidatos contenidos en grid_results? Se puede utilizar cualquiera de los dos. Encontramos un mejor rendimiento para estos datos utilizando los resultados de las carreras. Esto podría deberse a que el método de carrera preselecciona los mejores modelos de la parrilla más grande.\n\nSi no hubiéramos usado el paquete workflowsets, los objetos de tune y finetune también podrían pasarse a add_candidates(). Esto puede incluir objetos de búsqueda iterativos y de cuadrícula."
  },
  {
    "objectID": "20-ensemble-models.html#sec-blend-predictions",
    "href": "20-ensemble-models.html#sec-blend-predictions",
    "title": "20  Conjuntos de modelos",
    "section": "\n20.2 Combina las predicciones",
    "text": "20.2 Combina las predicciones\nLas predicciones del conjunto de entrenamiento y los datos de resultados observados correspondientes se utilizan para crear un modelo de metaaprendizaje donde las predicciones del conjunto de evaluación son los predictores de los datos de resultados observados. El metaaprendizaje se puede lograr utilizando cualquier modelo. El modelo más utilizado es un modelo lineal generalizado regularizado, que abarca modelos lineales, logísticos y multinomiales. Específicamente, la regularización mediante la penalización de lazo (Tibshirani 1996), que utiliza la contracción para atraer puntos hacia un valor central, tiene varias ventajas:\n\nEl uso de la penalización de lazo puede eliminar candidatos (y, a veces, tipos de modelos completos) del conjunto.\nLa correlación entre los candidatos a conjuntos tiende a ser muy alta y la regularización ayuda a aliviar este problema.\n\nBreiman (1996b) también sugirió que, cuando se utiliza un modelo lineal para combinar las predicciones, podría ser útil restringir los coeficientes de combinación para que no sean negativos. En general, hemos encontrado que este es un buen consejo y es el valor predeterminado para el paquete stacks (pero se puede cambiar mediante un argumento opcional).\nDado que nuestro resultado es numérico, se utiliza la regresión lineal para el metamodelo. Ajustar el metamodelo es tan sencillo como usar:\n\nset.seed(2001)\nens &lt;- blend_predictions(concrete_stack)\n\nEsto evalúa el modelo de metaaprendizaje sobre una cuadrícula predefinida de valores de penalización de lazo y utiliza un método de remuestreo interno para determinar el mejor valor. El método autoplot(), que se muestra en Figura 20.1, nos ayuda a comprender si el método de penalización predeterminado fue suficiente:\n\nautoplot(ens)\n\n\n\n\n\nFigura 20.1: Resultados del uso del método autoplot() en el objeto de pilas combinadas\n\n\n\nEl panel superior de Figura 20.1 muestra el número promedio de miembros candidatos del conjunto retenidos por el modelo de metaaprendizaje. Podemos ver que el número de miembros es bastante constante y, a medida que aumenta, el RMSE también aumenta.\nEs posible que el rango predeterminado no nos haya servido bien aquí. Para evaluar el modelo de metaaprendizaje con penalizaciones mayores, pasemos una opción adicional:\n\nset.seed(2002)\nens &lt;- blend_predictions(concrete_stack, penalty = 10^seq(-2, -0.5, length = 20))\n\nAhora, en Figura 20.2, vemos un rango en el que el modelo de conjunto se vuelve peor que con nuestra primera combinación (pero no mucho). Los valores de \\(R^2\\) aumentan con más miembros y sanciones mayores.\n\nautoplot(ens)\n\n\n\n\n\nFigura 20.2: Los resultados del uso del método autoplot() en el objeto de pilas combinadas actualizado\n\n\n\nAl combinar predicciones utilizando un modelo de regresión, es común restringir los parámetros de combinación para que no sean negativos. Para estos datos, esta restricción tiene el efecto de eliminar muchos de los miembros potenciales del conjunto; Incluso con sanciones bastante bajas, el conjunto se limita a una fracción de los dieciocho originales.\nEl valor de penalización asociado con el RMSE más pequeño fue 0.01. Imprimir el objeto muestra los detalles del modelo de metaaprendizaje:\n\nens\n## ── A stacked ensemble model ─────────────────────────────────────\n## \n## \n## Out of 18 possible candidate members, the ensemble retained 5.\n## \n## Penalty: 0.01.\n## \n## Mixture: 1.\n## \n## \n## The 5 highest weighted members are:\n## # A tibble: 5 × 3\n##   member                    type           weight\n##   &lt;chr&gt;                     &lt;chr&gt;           &lt;dbl&gt;\n## 1 boosting_1_16             boost_tree    0.712  \n## 2 neural_network_1_17       mlp           0.208  \n## 3 Cubist_1_25               cubist_rules  0.0759 \n## 4 full_quad_linear_reg_1_16 linear_reg    0.0161 \n## 5 CART_1_05                 decision_tree 0.00476\n## \n## Members have not yet been fitted with `fit_members()`.\n\nEl modelo de metaaprendizaje de regresión lineal regularizado contenía coeficientes de combinación five entre tipos de modelos five. El método autoplot() se puede utilizar nuevamente para mostrar las contribuciones de cada tipo de modelo, para producir Figura 20.3.\n\nautoplot(ens, \"weights\") +\n  geom_text(aes(x = weight + 0.01, label = model), hjust = 0) + \n  theme(legend.position = \"none\") +\n  lims(x = c(-0.01, 0.8))\n\n\n\n\n\nFigura 20.3: Coeficientes de mezcla para el conjunto de apilamiento.\n\n\n\nLos modelos boosted tree and neural network tienen las mayores contribuciones al conjunto. Para este conjunto, el resultado se predice con la ecuación:\n\n\\[\\begin{align}\n\\text{ensemble prediction} &=-0.62 \\\\\n    +&0.71 \\times \\text{boost tree prediction} \\notag \\\\\n    +&0.21 \\times \\text{mlp prediction} \\notag \\\\\n    +&0.076 \\times \\text{cubist rules prediction} \\notag \\\\\n    +&0.016 \\times \\text{linear reg prediction} \\notag \\\\\n    +&0.0048 \\times \\text{decision tree prediction} \\notag\n\\end{align}\\]\n\ndonde los predictores en la ecuación son los valores de resistencia a la compresión pronosticados a partir de esos modelos."
  },
  {
    "objectID": "20-ensemble-models.html#sec-fit-members",
    "href": "20-ensemble-models.html#sec-fit-members",
    "title": "20  Conjuntos de modelos",
    "section": "\n20.3 Ajustar los modelos de miembros",
    "text": "20.3 Ajustar los modelos de miembros\nEl conjunto contiene miembros candidatos five y ahora sabemos cómo se pueden combinar sus predicciones en una predicción final para el conjunto. Sin embargo, estos ajustes de modelos individuales aún no se han creado. Para poder utilizar el modelo de apilamiento, se requieren ajustes de modelo adicionales five. Estos utilizan todo el conjunto de entrenamiento con los predictores originales.\nLos modelos five a ajustar son:\n\n\nboosting: number of trees = 1800, minimal node size = 25, tree depth = 4, learning rate = 0.109, minimum loss reduction = 9.84e-10, and proportion of observations sampled = 0.85\nCubist: number of committees = 98 and number of nearest neighbors = 2\nCART: cost-complexity parameter = 5e-08 and minimal node size = 3\nlinear regression (quadratic features): amount of regularization = 6.28e-09 and proportion of lasso penalty = 0.636\nneural network: number of hidden units = 26, amount of regularization = 0.0149, and number of epochs = 203\n\n\nEl paquete stacks tiene una función, fit_members(), que entrena y devuelve estos modelos:\n\nens &lt;- fit_members(ens)\n\nEsto actualiza el objeto de apilamiento con los objetos de flujo de trabajo ajustados para cada miembro. En este punto, el modelo de apilamiento se puede utilizar para la predicción."
  },
  {
    "objectID": "20-ensemble-models.html#sec-ensembles-summary",
    "href": "20-ensemble-models.html#sec-ensembles-summary",
    "title": "20  Conjuntos de modelos",
    "section": "\n20.5 Resumen del capítulo",
    "text": "20.5 Resumen del capítulo\nEste capítulo demostró cómo combinar diferentes modelos en un conjunto para obtener un mejor rendimiento predictivo. El proceso de creación del conjunto puede eliminar automáticamente los modelos candidatos para encontrar un pequeño subconjunto que mejore el rendimiento. El paquete stacks tiene una interfaz fluida para combinar resultados de remuestreo y ajuste en un metamodelo.\n\n\n\n\nBreiman, L. 1996a. «Bagging predictors». Machine learning 24 (2): 123-40.\n\n\n———. 1996b. «Stacked regressions». Machine Learning 24 (1): 49-64.\n\n\n———. 2001. «Random forests». Machine learning 45 (1): 5-32.\n\n\nFreund, Y, y R Schapire. 1997. «A decision-theoretic generalization of on-line learning and an application to boosting». Journal of Computer and System Sciences 55 (1): 119-39.\n\n\nHo, T. 1995. «Random decision forests». En Proceedings of 3rd International Conference on Document Analysis and Recognition, 1:278-82. IEEE.\n\n\nTibshirani, Robert. 1996. «Regression Shrinkage and Selection via the Lasso». Journal of the Royal Statistical Society. Series B (Methodological) 58 (1): 267-88. http://www.jstor.org/stable/2346178.\n\n\nWolpert, D. 1992. «Stacked generalization». Neural Networks 5 (2): 241-59."
  },
  {
    "objectID": "21-inferential-analysis.html#sec-inference-options",
    "href": "21-inferential-analysis.html#sec-inference-options",
    "title": "21  Análisis inferencial",
    "section": "\n21.5 Más análisis inferencial",
    "text": "21.5 Más análisis inferencial\nEste capítulo demostró solo un pequeño subconjunto de lo que está disponible para el análisis inferencial en modelos tidy y se ha centrado en los métodos frecuentistas y de remuestreo. Podría decirse que el análisis bayesiano es un enfoque de inferencia muy eficaz y, a menudo, superior. Hay una variedad de modelos bayesianos disponibles a través de parsnip. Además, el paquete multilevelmod permite a los usuarios ajustarse a modelos jerárquicos bayesianos y no bayesianos (por ejemplo, modelos mixtos). Los paquetes broom.mixed y tidybayes son excelentes herramientas para extraer datos para gráficos y resúmenes. Finalmente, para conjuntos de datos con una única jerarquía, como datos de medidas longitudinales o repetidas simples, la función group_vfold_cv() de rsample facilita caracterizaciones directas fuera de la muestra del rendimiento del modelo."
  },
  {
    "objectID": "21-inferential-analysis.html#sec-inference-summary",
    "href": "21-inferential-analysis.html#sec-inference-summary",
    "title": "21  Análisis inferencial",
    "section": "\n21.6 Resumen del capítulo",
    "text": "21.6 Resumen del capítulo\nEl marco tidymodels sirve para algo más que el modelado predictivo. Los paquetes y funciones de tidymodels se pueden utilizar para probar hipótesis, así como para ajustar y evaluar modelos inferenciales. El marco tidymodels brinda soporte para trabajar con modelos R que no son tidymodels y puede ayudar a evaluar las cualidades estadísticas de sus modelos.\n\n\n\n\nClaeskens, G. 2016. «Statistical model choice». Annual Review of Statistics and its Application 3: 233-56.\n\n\nDavison, A, y D Hinkley. 1997. Bootstrap methods and their application. Vol. 1. Cambridge university press.\n\n\nDobson, A. 1999. An introduction to generalized linear models. Chapman; Hall: Boca Raton.\n\n\nIsmay, C, y A Kim. 2021. Statistical Inference via Data Science: A ModernDive into R and the Tidyverse. Chapman; Hall/CRC. https://moderndive.com/.\n\n\nLambert, D. 1992. «Zero-Inflated Poisson Regression, with an Application to Defects in Manufacturing». Technometrics 34 (1): 1-14.\n\n\nLong, J. 1992. «Measures of Sex Differences in Scientific Productivity*». Social Forces 71 (1): 159-78.\n\n\nMcCullagh, P, y J Nelder. 1989. Generalized Linear Models. London: Chapman; Hall.\n\n\nMullahy, J. 1986. «Specification and testing of some modified count data models». Journal of Econometrics 33 (3): 341-65.\n\n\nWasserstein, R, y N Lazar. 2016. «The ASA statement on p-values: Context, process, and purpose». The American Statistician 70 (2): 129-33.\n\n\nZeileis, A, C Kleiber, y S Jackman. 2008. «Regression models for count data in R». Journal of Statistical Software 27 (8): 1-25. https://www.jstatsoft.org/v027/i08."
  },
  {
    "objectID": "index.html#reconocimientos",
    "href": "index.html#reconocimientos",
    "title": "Modelado Ordenado con R",
    "section": "Reconocimientos",
    "text": "Reconocimientos\nEstamos muy agradecidos por las contribuciones, la ayuda y las perspectivas de las personas que nos han apoyado en este proyecto. Hay varios a los que nos gustaría agradecer en particular.\nNos gustaría agradecer a nuestros colegas de RStudio en el equipo tidymodels (Davis Vaughan, Hannah Frick, Emil Hvitfeldt y Simon Couch), así como al resto de nuestros compañeros de trabajo en el equipo de código abierto de RStudio. Gracias a Desirée De Leon por el diseño del sitio del trabajo en línea. También nos gustaría agradecer a nuestros revisores técnicos, Chelsea Parlett-Pelleriti y Dan Simpson, por sus comentarios detallados y perspicaces que mejoraron sustancialmente este libro, así como a nuestros editores, Nicole Tache y Rita Fernando, por su perspectiva y orientación durante el proceso. de escritura y publicación.\n\nEste libro se escribió abiertamente y varias personas contribuyeron a través de solicitudes de extracción o problemas. Un agradecimiento especial para las thirty-eight personas que contribuyeron a través de pull requests de GitHub (en orden alfabético por nombre de usuario): @arisp99, Brad Hill (@bradisbrad), Bryce Roney (@bryceroney), Cedric Batailler (@cedricbatailler), Ildikó Czeller (@czeildi), David Kane (@davidkane9), @DavZim, @DCharIAA, Emil Hvitfeldt (@EmilHvitfeldt), Emilio (@emilopezcano), Fgazzelloni (@Fgazzelloni), Hannah Frick (@hfrick), Hlynur (@hlynurhallgrims), Howard Baek (@howardbaek), Jae Yeon Kim (@jaeyk), Jonathan D. Trattner (@jdtrat), Jeffrey Girard (@jmgirard), John W Pickering (@JohnPickering), Jon Harmon (@jonthegeek), Joseph B. Rickert (@joseph-rickert), Maximilian Rohde (@maxdrohde), Michael Grund (@michaelgrund), @MikeJohnPage, Mine Cetinkaya-Rundel (@mine-cetinkaya-rundel), Mohammed Hamdy (@mmhamdy), @nattalides, Y. Yu (@PursuitOfDataScience), Riaz Hedayati (@riazhedayati), Rob Wiederstein (@RobWiederstein), Scott (@scottyd22), Simon Schölzel (@simonschoe), Simon Sayz (@tagasimon), @thrkng, Tanner Stauss (@tmstauss), Tony ElHabr (@tonyelhabr), Dmitry Zotikov (@x1o), Xiaochi (@xiaochi-liu), Zach Bogart (@zachbogart)."
  },
  {
    "objectID": "index.html#usando-ejemplos-de-código",
    "href": "index.html#usando-ejemplos-de-código",
    "title": "Modelado Ordenado con R",
    "section": "Usando ejemplos de código",
    "text": "Usando ejemplos de código\nEste libro fue escrito con RStudio usando bookdown. El sito web está alojado a través de Netlify, y construido automáticamente después de cada push por GitHub Actions. La fuente completa está disponible en GitHub. Generamos todos los gráficos de este libro usando ggplot2 y su tema blanco y negro (theme_bw()).\nEsta versión del libro fue construida con R version 4.3.1 (2023-06-16 ucrt), pandoc versión 3.1.1, y los siguientes paquetes: applicable (0.1.0, CRAN), av (0.8.5, CRAN), baguette (1.0.1, CRAN), beans (0.1.0, CRAN), bestNormalize (1.9.1, CRAN), bookdown (0.35, CRAN), broom (1.0.5, CRAN), censored (0.2.0, CRAN), corrplot (0.92, CRAN), corrr (0.4.4, CRAN), Cubist (0.4.2.1, CRAN), DALEXtra (2.3.0, CRAN), dials (1.2.0, CRAN), dimRed (0.2.6, CRAN), discrim (1.0.1, CRAN), doMC (1.3.5, R-Forge), dplyr (1.1.3, CRAN), earth (5.3.2, CRAN), embed (1.1.2, CRAN), fastICA (1.2-3, CRAN), finetune (1.1.0, CRAN), forcats (1.0.0, CRAN), ggforce (0.4.1, CRAN), ggplot2 (3.4.3, CRAN), glmnet (4.1-8, CRAN), gridExtra (2.3, CRAN), infer (1.0.5, CRAN), kableExtra (1.3.4, CRAN), kernlab (0.9-32, CRAN), kknn (1.3.1, CRAN), klaR (1.7-2, CRAN), knitr (1.44, CRAN), learntidymodels (0.0.0.9001, Github), lime (0.5.3, CRAN), lme4 (1.1-34, CRAN), lubridate (1.9.3, CRAN), mda (0.5-4, CRAN), mixOmics (6.24.0, Bioconductor), modeldata (1.2.0, CRAN), multilevelmod (1.0.0, CRAN), nlme (3.1-162, CRAN), nnet (7.3-19, CRAN), parsnip (1.1.1, CRAN), patchwork (1.1.3, CRAN), pillar (1.9.0, CRAN), poissonreg (1.0.1, CRAN), prettyunits (1.2.0, CRAN), probably (1.0.2, CRAN), pscl (1.5.5.1, CRAN), purrr (1.0.2, CRAN), ranger (0.15.1, CRAN), recipes (1.0.8, CRAN), rlang (1.1.1, CRAN), rmarkdown (2.25, CRAN), rpart (4.1.19, CRAN), rsample (1.2.0, CRAN), rstanarm (2.26.1, CRAN), rules (1.0.2, CRAN), sessioninfo (1.2.2, CRAN), stacks (1.0.2, CRAN), stringr (1.5.0, CRAN), svglite (2.1.1, CRAN), text2vec (0.6.3, CRAN), textrecipes (1.0.4, CRAN), themis (1.0.2, CRAN), tibble (3.2.1, CRAN), tidymodels (1.1.1, CRAN), tidyposterior (1.0.0, CRAN), tidyverse (2.0.0, CRAN), tune (1.1.2, CRAN), uwot (0.1.16, CRAN), workflows (1.1.3, CRAN), workflowsets (1.0.1, CRAN), xgboost (1.7.5.1, CRAN), and yardstick (1.2.0, CRAN)."
  },
  {
    "objectID": "index.html#sobre-la-traducción",
    "href": "index.html#sobre-la-traducción",
    "title": "Modelado Ordenado con R",
    "section": "Sobre la traducción",
    "text": "Sobre la traducción\n Esta traducción de “Modelado Ordenado con R” es un proyecto personal de David Díaz Rodríguez con el objetivo de facilitar el estudio de construcción de modelos mediante el uso de R, tanto al propio traductor como a todas aquellas personas de habla hispana que deseen aprender sobre este tema.\nSeñalar que esta es una traducción textual del libro por lo que cuando los autores se refieren así mismo en primera persona, serán Max Kuhn & Julia Slige no el traductor.\nLa traducción fue realizada usando Google Translate y fueron corregidos algunos errores gramaticales y de coherencia. Si detecta algún error relacionado con el contenido de la traducción, siéntase libre de abrir un issue o un pull request en este repositorio.\n\n\n\n\nFox, J. 2008. Applied Regression Analysis and Generalized Linear Models. Second. Thousand Oaks, CA: Sage.\n\n\nGoodfellow, I, Y Bengio, y A Courville. 2016. Deep Learning. MIT Press.\n\n\nKuhn, M, y K Johnson. 2013. Applied Predictive Modeling. Springer.\n\n\n———. 2020. Feature engineering and selection: A practical approach for predictive models. CRC Press."
  },
  {
    "objectID": "01-software-modeling.html#fundamentos-del-software-de-modelado",
    "href": "01-software-modeling.html#fundamentos-del-software-de-modelado",
    "title": "1  Software para modelar",
    "section": "\n1.1 Fundamentos del software de modelado",
    "text": "1.1 Fundamentos del software de modelado\nEs importante que el software de modelado que utilice sea fácil de utilizar correctamente. La interfaz de usuario no debe estar tan mal diseñada que el usuario no sepa que la utilizó de manera inapropiada. Por ejemplo, Baggerly y Coombes (2009) informa innumerables problemas en los análisis de datos de una publicación de biología computacional de alto perfil. Uno de los problemas estaba relacionado con cómo se requería que los usuarios agregaran los nombres de las entradas del modelo. La interfaz de usuario del software facilitó la compensación de los nombres de las columnas de datos de las columnas de datos reales. Esto dio lugar a que se identificaran genes equivocados como importantes para el tratamiento de pacientes con cáncer y, finalmente, contribuyó a la interrupción de varios ensayos clínicos. (Carlson 2012).\nSi necesitamos modelos de alta calidad, el software debe facilitar su uso adecuado. Abrams (2003) describe un principio interesante para guiarnos:\n\nEl pozo del éxito: en marcado contraste con una cumbre, un pico o un viaje a través de un desierto para encontrar la victoria a través de muchas pruebas y sorpresas, queremos que nuestros clientes simplemente adopten prácticas ganadoras utilizando nuestra plataforma y marcos.\n\nEl software de análisis y modelado de datos debería abrazar esta idea.\nEn segundo lugar, el software de modelado debería promover una buena metodología científica. Cuando se trabaja con modelos predictivos complejos, puede resultar fácil cometer errores, sin saberlo, relacionados con falacias lógicas o suposiciones inapropiadas. Muchos modelos de aprendizaje automático son tan hábiles en descubrir patrones que pueden encontrar sin esfuerzo patrones empíricos en los datos que no logran reproducir más adelante. Algunos de los errores metodológicos son insidiosos en el sentido de que el problema puede pasar desapercibido hasta un momento posterior, cuando se obtienen nuevos datos que contienen el resultado verdadero.\n\nA medida que nuestros modelos se han vuelto más poderosos y complejos, también se ha vuelto más fácil cometer errores latentes.\n\nEste mismo principio también se aplica a la programación. Siempre que sea posible, el software debería poder proteger a los usuarios de cometer errores. El software debería facilitar a los usuarios hacer lo correcto.\nEstos dos aspectos del desarrollo de modelos (facilidad de uso adecuado y buenas prácticas metodológicas) son cruciales. Dado que las herramientas para crear modelos son fácilmente accesibles y los modelos pueden tener un impacto tan profundo, muchas más personas los están creando. En términos de experiencia técnica y capacitación, los antecedentes de los creadores variarán. Es importante que sus herramientas sean sólidas para la experiencia del usuario. Las herramientas deben ser lo suficientemente potentes como para crear modelos de alto rendimiento, pero, por otro lado, deben ser fáciles de utilizar de forma adecuada. Este libro describe un conjunto de software para modelado que ha sido diseñado teniendo en cuenta estas características.\nEl software está basado en el lenguaje de programación R (R Core Team 2014). R ha sido diseñado especialmente para el análisis y modelado de datos. Es una implementación del lenguaje S (con reglas de alcance léxico adaptadas de Scheme y Lisp) que se creó en la década de 1970 para\n\n“convertir ideas en software, de forma rápida y fiel” (Chambers 1998)\n\nR es de código abierto y gratuito. Es un poderoso lenguaje de programación que se puede utilizar para muchos propósitos diferentes, pero se especializa en análisis de datos, modelado, visualización y aprendizaje automático. R es fácilmente extensible; Tiene un vasto ecosistema de paquetes, en su mayoría módulos aportados por los usuarios que se centran en un tema específico, como modelado, visualización, etc.\nUna colección de paquetes se llama tidyverse (Wickham et al. 2019). Tidyverse es una colección obstinada de paquetes R diseñados para la ciencia de datos. Todos los paquetes comparten una filosofía de diseño, gramática y estructuras de datos subyacentes. Varias de estas filosofías de diseño están directamente informadas por los aspectos del software para modelado descritos en este capítulo. Si nunca ha usado los paquetes tidyverse, el Capítulo 2 contiene una revisión de los conceptos básicos. Dentro de tidyverse, el subconjunto de paquetes centrados específicamente en el modelado se conoce como paquetes tidymodels. Este libro es una guía práctica para realizar modelados utilizando los paquetes tidyverse y tidymodels. Muestra cómo utilizar un conjunto de paquetes, cada uno con su propósito específico, juntos para crear modelos de alta calidad."
  },
  {
    "objectID": "01-software-modeling.html#conexiones-entre-tipos-de-modelos",
    "href": "01-software-modeling.html#conexiones-entre-tipos-de-modelos",
    "title": "1  Software para modelar",
    "section": "\n1.3 Conexiones entre tipos de modelos",
    "text": "1.3 Conexiones entre tipos de modelos\n\nTenga en cuenta que hemos definido el tipo de modelo por cómo se utiliza, más que por sus cualidades matemáticas.\n\nUn modelo de regresión lineal ordinario podría pertenecer a cualquiera de estas tres clases de modelos, dependiendo de cómo se utilice:\n\nSe puede utilizar un suavizador descriptivo, similar a LOESS, llamado splines de suavizado restringido (Durrleman y Simon 1989) para describir tendencias en datos usando regresión lineal ordinaria con términos especializados.\nUn modelo de análisis de varianza (ANOVA) es un método popular para producir los valores p utilizados para la inferencia. Los modelos ANOVA son un caso especial de regresión lineal.\nSi un modelo de regresión lineal simple produce predicciones precisas, puede utilizarse como modelo predictivo.\n\nHay muchos ejemplos de modelos predictivos que no pueden (o al menos no deberían) usarse para inferencias. Incluso si se hicieran suposiciones probabilísticas para los datos, la naturaleza del modelo K de vecinos más cercanos, por ejemplo, hace que las matemáticas necesarias para la inferencia sean intratables.\nExiste una conexión adicional entre los tipos de modelos. Si bien el propósito principal de los modelos descriptivos e inferenciales puede no estar relacionado con la predicción, no se debe ignorar la capacidad predictiva del modelo. Por ejemplo, la regresión logística es un modelo popular para datos en los que el resultado es cualitativo con dos valores posibles. Puede modelar cómo se relacionan las variables con la probabilidad de los resultados. Cuando se utiliza de manera inferencial, se presta mucha atención a las cualidades estadísticas del modelo. Por ejemplo, los analistas tienden a centrarse fuertemente en la selección de variables independientes contenidas en el modelo. Se pueden utilizar muchas iteraciones de la construcción de modelos para determinar un subconjunto mínimo de variables independientes que tengan una relación “estadísticamente significativa” con la variable de resultado. Esto generalmente se logra cuando todos los valores p de las variables independientes están por debajo de cierto valor (por ejemplo, 0,05). A partir de aquí, el analista puede centrarse en hacer afirmaciones cualitativas sobre la influencia relativa que tienen las variables en el resultado (por ejemplo, “Existe una relación estadísticamente significativa entre la edad y las probabilidades de enfermedad cardíaca”).\nSin embargo, este enfoque puede resultar peligroso cuando se utiliza la significación estadística como única medida de la calidad del modelo. Es posible que este modelo estadísticamente optimizado tenga una precisión deficiente o que tenga un desempeño deficiente en alguna otra medida de capacidad predictiva. Si bien es posible que el modelo no se utilice para la predicción, ¿cuánto se debe confiar en las inferencias de un modelo que tiene valores p significativos pero una precisión lamentable? El rendimiento predictivo tiende a estar relacionado con qué tan cerca están los valores ajustados del modelo a los datos observados.\n\nSi un modelo tiene una fidelidad limitada a los datos, las inferencias generadas por el modelo deberían ser muy sospechosas. En otras palabras, la significancia estadística puede no ser prueba suficiente de que un modelo es apropiado.\n\nEsto puede parecer intuitivamente obvio, pero a menudo se ignora en el análisis de datos del mundo real."
  },
  {
    "objectID": "02-tidyverse.html#principios-de-tidyverse",
    "href": "02-tidyverse.html#principios-de-tidyverse",
    "title": "2  Una introducción tidyverse",
    "section": "\n2.1 Principios de Tidyverse",
    "text": "2.1 Principios de Tidyverse\nEl conjunto completo de estrategias y tácticas para escribir código R en el estilo tidyverse se puede encontrar en el sitio web https://design.tidyverse.org. Aquí podemos describir brevemente varios de los principios generales de diseño de tidyverse, su motivación y cómo pensamos sobre el modelado como una aplicación de estos principios.\n\n2.1.1 Diseño para humanos\nTidyverse se centra en diseñar paquetes y funciones de R que puedan ser fácilmente comprendidos y utilizados por una amplia gama de personas. Tanto históricamente como hoy, un porcentaje sustancial de usuarios de R no son personas que crean software o herramientas, sino personas que crean análisis o modelos. Como tal, los usuarios de R normalmente no tienen (ni necesitan) experiencia en informática, y muchos no están interesados ​​en escribir sus propios paquetes R.\nPor esta razón, es fundamental que sea fácil trabajar con el código R para lograr sus objetivos. La documentación, la formación, la accesibilidad y otros factores juegan un papel importante para lograrlo. Sin embargo, si la sintaxis en sí es difícil de comprender para las personas, la documentación es una mala solución. El software en sí debe ser intuitivo.\nPara contrastar el enfoque tidyverse con la semántica R más tradicional, considere ordenar un marco de datos. Los marcos de datos pueden representar diferentes tipos de datos en cada columna y varios valores en cada fila. Usando solo el lenguaje central, podemos ordenar un marco de datos usando una o más columnas reordenando las filas mediante las reglas de subíndice de R junto con order(); no puedes utilizar con éxito una función que podrías sentirte tentado a probar en tal situación debido a su nombre, sort(). Para ordenar los datos de mtcars por dos de sus columnas, la llamada podría verse así:\n\nmtcars[order(mtcars$gear, mtcars$mpg), ]\n\nSi bien es muy eficiente desde el punto de vista computacional, sería difícil argumentar que se trata de una interfaz de usuario intuitiva. En dplyr, por el contrario, la función tidyverse arrange() toma un conjunto de nombres de variables como argumentos de entrada directamente:\n\nlibrary(dplyr)\narrange(.data = mtcars, gear, mpg)\n\n\nLos nombres de variables utilizados aquí están “sin comillas”; muchas funciones tradicionales de R requieren una cadena de caracteres para especificar variables, pero las funciones tidyverse toman nombres sin comillas o funciones de selección. Los selectores permiten una o más reglas legibles que se aplican a los nombres de las columnas. Por ejemplo, ends_with(\"t\") seleccionaría las columnas drat y wt del marco de datos mtcars.\n\nAdemás, el nombramiento es crucial. Si era nuevo en R y estaba escribiendo análisis de datos o código de modelado que involucra álgebra lineal, es posible que se sienta bloqueado al buscar una función que calcule la matriz inversa. El uso de apropos(\"inv\") no produce candidatos. Resulta que la función R base para esta tarea es solve(), para resolver sistemas de ecuaciones lineales. Para una matriz X, usarías solve(X) para invertir X (sin vector para el lado derecho de la ecuación). Esto sólo está documentado en la descripción de uno de los argumentos en el archivo de ayuda. En esencia, necesita saber el nombre de la solución para poder encontrarla.\nEl enfoque de tidyverse consiste en utilizar nombres de funciones que sean descriptivos y explícitos en lugar de aquellos que sean breves e implícitos. Hay un enfoque en los verbos (por ejemplo, “adaptar”, “arreglar”, etc.) para los métodos generales. Los pares verbo-sustantivo son particularmente eficaces; considere invert_matrix() como un nombre de función hipotético. En el contexto del modelado, también es importante evitar jergas muy técnicas, como letras griegas o términos oscuros. Los nombres deben ser lo más autodocumentados posible.\nCuando hay funciones similares en un paquete, los nombres de las funciones están diseñados para optimizarse para completarse con tabulaciones. Por ejemplo, el paquete glue tiene una colección de funciones que comienzan con un prefijo común (glue_) que permite a los usuarios encontrar rápidamente la función que buscan.\n\n2.1.2 Reutilizar estructuras de datos existentes\nSiempre que sea posible, las funciones deben evitar devolver una estructura de datos novedosa. Si los resultados son propicios para una estructura de datos existente, se debe utilizar. Esto reduce la carga cognitiva al utilizar software; no se requieren sintaxis ni métodos adicionales.\nEl marco de datos es la estructura de datos preferida en los paquetes tidyverse y tidymodels, porque su estructura se adapta bien a una gama tan amplia de tareas de ciencia de datos. Específicamente, los modelos tidyverse y tidy favorecen el tibble, una reinvención moderna del marco de datos de R que describimos en la siguiente sección sobre el ejemplo de sintaxis de tidyverse.\nComo ejemplo, el paquete rsample se puede utilizar para crear resamples de un conjunto de datos, como la validación cruzada o el bootstrap (descrito en el Capítulo 10). Las funciones de remuestreo devuelven un tibble con una columna llamada “divisiones” de objetos que definen los conjuntos de datos remuestreados. Tres muestras de arranque de un conjunto de datos podrían verse así:\n\nboot_samp &lt;- rsample::bootstraps(mtcars, times = 3)\nboot_samp\n## # Bootstrap sampling \n## # A tibble: 3 × 2\n##   splits          id        \n##   &lt;list&gt;          &lt;chr&gt;     \n## 1 &lt;split [32/11]&gt; Bootstrap1\n## 2 &lt;split [32/8]&gt;  Bootstrap2\n## 3 &lt;split [32/8]&gt;  Bootstrap3\nclass(boot_samp)\n## [1] \"bootstraps\" \"rset\"       \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nCon este enfoque, se pueden usar funciones basadas en vectores con estas columnas, como vapply() o purrr::map().1 Este objeto boot_samp tiene múltiples clases pero hereda métodos para marcos de datos (\"data.frame\") y tibbles (\"tbl_df\"). Además, se pueden agregar nuevas columnas a los resultados sin afectar la clase de los datos. Es mucho más fácil y versátil para los usuarios trabajar con esto que un tipo de objeto completamente nuevo que no hace que su estructura de datos sea obvia.\nUna desventaja de depender de estructuras de datos comunes es la posible pérdida de rendimiento computacional. En algunas situaciones, los datos se pueden codificar en formatos especializados que son representaciones más eficientes de los datos. Por ejemplo:\n\nEn química computacional, el formato de archivo de datos estructurales (SDF) es una herramienta para tomar estructuras químicas y codificarlas en un formato con el que sea computacionalmente eficiente trabajar.\nLos datos que tienen una gran cantidad de valores iguales (como ceros para datos binarios) se pueden almacenar en un formato de matriz dispersa. Este formato puede reducir el tamaño de los datos y permitir técnicas computacionales más eficientes.\n\nEstos formatos son ventajosos cuando el problema tiene un alcance adecuado y los posibles métodos de procesamiento de datos están bien definidos y son adecuados para dicho formato.2 Sin embargo, una vez que se violan dichas restricciones, los formatos de datos especializados son menos útiles. Por ejemplo, si realizamos una transformación de los datos que los convierte en números fraccionarios, la salida ya no es escasa; La representación matricial dispersa es útil para un paso algorítmico específico en el modelado, pero a menudo esto no es cierto antes o después de ese paso específico.\n\nUna estructura de datos especializada no es lo suficientemente flexible para un flujo de trabajo de modelado completo como lo es una estructura de datos común.\n\nUna característica importante del tibble producido por rsample es que la columna splits es una lista. En este caso, cada elemento de la lista tiene el mismo tipo de objeto: un objeto rsplit que contiene información sobre qué filas de mtcars pertenecen a la muestra de arranque. Las columnas de lista pueden ser muy útiles en el análisis de datos y, como se verá a lo largo de este libro, son importantes para los modelos ordenados.\n\n2.1.3 Diseño para la tubería y programación funcional.\nEl operador de canalización magrittr (%&gt;%) es una herramienta para encadenar una secuencia de funciones R.3 Para demostrarlo, considere los siguientes comandos que ordenan un marco de datos y luego conserve las primeras 10 filas:\n\nsmall_mtcars &lt;- arrange(mtcars, gear)\nsmall_mtcars &lt;- slice(small_mtcars, 1:10)\n\n# or more compactly: \nsmall_mtcars &lt;- slice(arrange(mtcars, gear), 1:10)\n\nEl operador de tubería sustituye el valor del lado izquierdo del operador como primer argumento del lado derecho, por lo que podemos implementar el mismo resultado que antes con:\n\nsmall_mtcars &lt;- \n  mtcars %&gt;% \n  arrange(gear) %&gt;% \n  slice(1:10)\n\nLa versión canalizada de esta secuencia es más legible; esta legibilidad aumenta a medida que se agregan más operaciones a una secuencia. Este enfoque de programación funciona en este ejemplo porque todas las funciones que utilizamos devuelven la misma estructura de datos (un marco de datos) que luego es el primer argumento de la siguiente función. Esto es por diseño. Cuando sea posible, cree funciones que puedan incorporarse a un conjunto de operaciones.\nSi ha utilizado ggplot2, esto no es diferente a la superposición de componentes de la trama en un objeto ggplot con el operador +. Para hacer un diagrama de dispersión con una línea de regresión, la llamada inicial a ggplot() se aumenta con dos operaciones adicionales:\n\nlibrary(ggplot2)\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point() + \n  geom_smooth(method = lm)\n\nSi bien es similar a la canalización dplyr, tenga en cuenta que el primer argumento de esta canalización es un conjunto de datos (mtcars) y que cada llamada de función devuelve un objeto ggplot. No todas las canalizaciones necesitan mantener los valores devueltos (objetos de trazado) iguales que el valor inicial (un marco de datos). El uso del operador de canalización con operaciones dplyr ha hecho que muchos usuarios de R esperen devolver un marco de datos cuando se utilizan canalizaciones; como se muestra con ggplot2, no tiene por qué ser así. Las canalizaciones son increíblemente útiles para modelar flujos de trabajo, pero el modelado de canalizaciones puede devolver, en lugar de un marco de datos, objetos como componentes del modelo.\nR tiene excelentes herramientas para crear, cambiar y operar funciones, lo que lo convierte en un excelente lenguaje para la programación funcional. Este enfoque puede reemplazar los bucles iterativos en muchas situaciones, como cuando una función devuelve un valor sin otros efectos secundarios.4\nVeamos un ejemplo. Suponga que está interesado en el logaritmo de la relación entre la eficiencia del combustible y el peso del automóvil. Para aquellos nuevos en R y/o que vienen de otros lenguajes de programación, un bucle puede parecer una buena opción:\n\nn &lt;- nrow(mtcars)\nratios &lt;- rep(NA_real_, n)\nfor (car in 1:n) {\n  ratios[car] &lt;- log(mtcars$mpg[car]/mtcars$wt[car])\n}\nhead(ratios)\n## [1] 2.081 1.988 2.285 1.896 1.693 1.655\n\nAquellos con más experiencia en R sabrán que existe una versión vectorizada mucho más simple y rápida que se puede calcular mediante:\n\nratios &lt;- log(mtcars$mpg/mtcars$wt)\n\nSin embargo, en muchos casos del mundo real, la operación de interés por elementos es demasiado compleja para una solución vectorizada. En tal caso, un buen enfoque es escribir una función para realizar los cálculos. Cuando diseñamos para programación funcional, es importante que la salida dependa sólo de las entradas y que la función no tenga efectos secundarios. Las violaciones de estas ideas en la siguiente función se muestran con comentarios:\n\ncompute_log_ratio &lt;- function(mpg, wt) {\n  log_base &lt;- getOption(\"log_base\", default = exp(1)) # obtiene datos externos\n  results &lt;- log(mpg/wt, base = log_base)\n  print(mean(results))                                # imprime en la consola\n  done &lt;&lt;- TRUE                                       # establece datos externos\n  results\n}\n\nUna mejor versión sería:\n\ncompute_log_ratio &lt;- function(mpg, wt, log_base = exp(1)) {\n  log(mpg/wt, base = log_base)\n}\n\nThe purrr package contains tools for functional programming. Let’s focus on the map() family of functions, which operates on vectors and always returns the same type of output. The most basic function, map(), always returns a list and uses the basic syntax of map(vector, function). For example, to take the square root of our data, we could:\n\nmap(head(mtcars$mpg, 3), sqrt)\n## [[1]]\n## [1] 4.583\n## \n## [[2]]\n## [1] 4.583\n## \n## [[3]]\n## [1] 4.775\n\nExisten variantes especializadas de map() que devuelven valores cuando sabemos o esperamos que la función genere uno de los tipos de vectores básicos. Por ejemplo, dado que la raíz cuadrada devuelve un número de doble precisión:\n\nmap_dbl(head(mtcars$mpg, 3), sqrt)\n## [1] 4.583 4.583 4.775\n\nTambién hay funciones de mapeo que operan en múltiples vectores:\n\nlog_ratios &lt;- map2_dbl(mtcars$mpg, mtcars$wt, compute_log_ratio)\nhead(log_ratios)\n## [1] 2.081 1.988 2.285 1.896 1.693 1.655\n\nLas funciones map() también permiten funciones temporales y anónimas definidas usando el carácter de tilde. Los valores de los argumentos son .x y .y para map2():\n\nmap2_dbl(mtcars$mpg, mtcars$wt, ~ log(.x/.y)) %&gt;% \n  head()\n## [1] 2.081 1.988 2.285 1.896 1.693 1.655\n\nEstos ejemplos han sido triviales pero, en secciones posteriores, se aplicarán a problemas más complejos.\n\nPara la programación funcional en el modelado ordenado, las funciones deben definirse de modo que funciones como map() puedan usarse para cálculos iterativos."
  },
  {
    "objectID": "02-tidyverse.html#sec-examples-of-tidyverse-syntax",
    "href": "02-tidyverse.html#sec-examples-of-tidyverse-syntax",
    "title": "2  Una introducción tidyverse",
    "section": "\n2.2 Ejemplos de sintaxis de Tidyverse",
    "text": "2.2 Ejemplos de sintaxis de Tidyverse\nComencemos nuestra discusión sobre la sintaxis de tidyverse explorando más profundamente qué es un tibble y cómo funcionan. Los tibbles tienen reglas ligeramente diferentes a los marcos de datos básicos en R. Por ejemplo, los tibbles funcionan naturalmente con nombres de columnas que no son nombres de variables sintácticamente válidos:\n\n# Quiere nombres válidos:\ndata.frame(`variable 1` = 1:2, two = 3:4)\n##   variable.1 two\n## 1          1   3\n## 2          2   4\n# Pero se puede obligar a utilizarlos con una opción adicional:\ndf &lt;- data.frame(`variable 1` = 1:2, two = 3:4, check.names = FALSE)\ndf\n##   variable 1 two\n## 1          1   3\n## 2          2   4\n\n# Pero los tibbles simplemente funcionan:\ntbbl &lt;- tibble(`variable 1` = 1:2, two = 3:4)\ntbbl\n## # A tibble: 2 × 2\n##   `variable 1`   two\n##          &lt;int&gt; &lt;int&gt;\n## 1            1     3\n## 2            2     4\n\nLos marcos de datos estándar permiten coincidencia parcial de argumentos para que el código que utiliza solo una parte de los nombres de las columnas siga funcionando. Tibbles evita que esto suceda, ya que puede provocar errores accidentales.\n\ndf$tw\n## [1] 3 4\n\ntbbl$tw\n## Warning: Unknown or uninitialised column: `tw`.\n## NULL\n\nTibbles también previene uno de los errores de R más comunes: eliminar dimensiones. Si un marco de datos estándar subconjunto de columnas en una sola columna, el objeto se convierte en un vector. Tibbles nunca hace esto:\n\ndf[, \"two\"]\n## [1] 3 4\n\ntbbl[, \"two\"]\n## # A tibble: 2 × 1\n##     two\n##   &lt;int&gt;\n## 1     3\n## 2     4\n\nHay otras ventajas al usar tibbles en lugar de marcos de datos, como una mejor impresión y más.5\nPara demostrar algo de sintaxis, usemos funciones tidyverse para leer datos que podrían usarse en el modelado. El conjunto de datos proviene del portal de datos de la ciudad de Chicago y contiene datos diarios sobre el número de pasajeros de las estaciones de trenes elevados de la ciudad. El conjunto de datos tiene columnas para:\n\nel identificador de la estación (númerico)\nel nombre de la estación (texto)\nla fecha (texto en formato mm/dd/yyyy)\nel día de la semana (texto)\nel número de pasajeros (númerico)\n\nNuestro canalización tidyverse llevará a cabo las siguientes tareas, en orden:\n\nUtilice el paquete tidyverse readr para leer los datos del sitio web de origen y convertirlos en un tibble. Para hacer esto, la función read_csv() puede determinar el tipo de datos leyendo un número inicial de filas. Alternativamente, si los nombres y tipos de las columnas ya se conocen, se puede crear una especificación de columna en R y pasarla a read_csv().\nFiltre los datos para eliminar algunas columnas que no son necesarias (como el ID de la estación) y cambie la columna “nombre de la estación” a “estación”. Para esto se utiliza la función select(). Al filtrar, utilice los nombres de las columnas o una función selectora dplyr. Al seleccionar nombres, se puede declarar un nuevo nombre de variable utilizando el formato de argumento nuevo_nombre = antiguo_nombre.\nConvierta el campo de fecha al formato de fecha R usando la función mdy() del paquete lubridate. También convertimos los números de pasajeros a miles. Ambos cálculos se ejecutan utilizando la función dplyr::mutate().\nUtilice el número máximo de viajes para cada estación y combinación de días. Esto mitiga el problema de una pequeña cantidad de días que tienen más de un registro de número de pasajeros en determinadas estaciones. Agrupamos los datos de número de pasajeros por estación y día, y luego resumimos dentro de cada una de las combinaciones únicas 1999 con la estadística máxima.\n\nEl código tidyverse para estos pasos es:\n\nlibrary(tidyverse)\nlibrary(lubridate)\n\nurl &lt;- \"https://data.cityofchicago.org/api/views/5neh-572f/rows.csv?accessType=DOWNLOAD&bom=true&format=true\"\n\nall_stations &lt;- \n  # Paso 1: leer los datos.\n  read_csv(url) %&gt;% \n  # Paso 2: filtrar columnas y cambiar el nombre de la estación\n  dplyr::select(station = stationname, date, rides) %&gt;% \n  # Paso 3: convierta el campo de fecha de caracteres a una codificación de fecha.\n  # Además, coloque los datos en unidades de 1K viajes.\n  mutate(date = mdy(date), rides = rides / 1000) %&gt;% \n  # Paso 4: resuma los múltiples registros utilizando el máximo.\n  group_by(date, station) %&gt;% \n  summarize(rides = max(rides), .groups = \"drop\")\n\nEsta canalización de operaciones ilustra por qué tidyverse es popular. Se utiliza una serie de manipulaciones de datos que tienen funciones simples y fáciles de entender para cada transformación; La serie se presenta de forma simplificada y legible. La atención se centra en cómo el usuario interactúa con el software. Este enfoque permite que más personas aprendan R y alcancen sus objetivos de análisis, y adoptar estos mismos principios para modelar en R tiene los mismos beneficios."
  },
  {
    "objectID": "02-tidyverse.html#resumen-del-capítulo",
    "href": "02-tidyverse.html#resumen-del-capítulo",
    "title": "2  Una introducción tidyverse",
    "section": "\n2.3 Resumen del capítulo",
    "text": "2.3 Resumen del capítulo\nEste capítulo presentó tidyverse, centrándose en las aplicaciones para modelado y cómo los principios de diseño de tidyverse informan el marco de trabajo de tidymodels. Piense en el marco de tidymodels como una aplicación de los principios de tidyverse al dominio de la construcción de modelos. Describimos las diferencias en las convenciones entre tidyverse y base R, e introdujimos dos componentes importantes del sistema tidyverse, tibbles y el operador de canalización %&gt;%. La limpieza y el procesamiento de datos pueden parecer mundanos a veces, pero estas tareas son importantes para el modelado en el mundo real; Ilustramos cómo usar las funciones tibbles, pipe y tidyverse en un ejercicio de ejemplo de importación y procesamiento de datos.\n\n\n\n\nWickham, H, M Averick, J Bryan, W Chang, L McGowan, R François, G Grolemund, et al. 2019. «Welcome to the Tidyverse». Journal of Open Source Software 4 (43).\n\n\nWickham, H, y G Grolemund. 2016. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. O’Reilly Media, Inc."
  },
  {
    "objectID": "03-base-r.html#un-ejemplo",
    "href": "03-base-r.html#un-ejemplo",
    "title": "3  Una revisión de los fundamentos del modelado con R",
    "section": "\n3.1 Un ejemplo",
    "text": "3.1 Un ejemplo\nPara demostrar algunos fundamentos del modelado en base R, usemos datos experimentales de McDonald (2009), a través de Mangiafico (2015), sobre la relación entre la temperatura ambiente y la tasa de chirridos de los grillos por minuto. Se recolectaron datos para dos especies: O. exclamationis y O. niveus. Los datos están contenidos en un marco de datos llamado “crickets” (grillos en español) con un total de puntos de datos “r nrow(crickets)”. Estos datos se muestran en Figura 3.1 usando el siguiente código ggplot2.\n\nlibrary(tidyverse)\n\ndata(crickets, package = \"modeldata\")\nnames(crickets)\n\n# Grápica de la temperatura en el eje x, la tasa de chirrido en el eje y. Los elementos\n# de la gráfica se colorean de forma diferente para cada especie:\nggplot(crickets, \n       aes(x = temp, y = rate, color = species, pch = species, lty = species)) + \n  # Traza puntos para cada punto de datos y color por especie.\n  geom_point(size = 2) + \n  # Muestra un ajuste de modelo lineal simple creado por separado para cada especie:\n  geom_smooth(method = lm, se = FALSE, alpha = 0.5) + \n  scale_color_brewer(palette = \"Paired\") +\n  labs(x = \"Temperatura (C)\", y = \"Tasa de chirrido (por minuto)\")\n\n\n## [1] \"species\" \"temp\"    \"rate\"\n\n\n\nFigura 3.1: Relación entre la tasa de chirrido y la temperatura de dos especies diferentes de grillos\n\n\n\nLos datos muestran tendencias bastante lineales para cada especie. Para una temperatura dada, O. exclamationis parece chirriar más por minuto que las otras especies. Para un modelo inferencial, los investigadores podrían haber especificado las siguientes hipótesis nulas antes de ver los datos:\n\nLa temperatura no tiene ningún efecto sobre la tasa de chirrido.\nNo hay diferencias entre la tasa de chirrido de las especies.\n\nPuede haber algún valor científico o práctico en predecir la tasa de chirrido, pero en este ejemplo nos centraremos en la inferencia.\nPara ajustar un modelo lineal ordinario en R, se usa comúnmente la función lm(). Los argumentos importantes de esta función son una fórmula modelo y un marco de datos que contiene los datos. La fórmula es simbólica. Por ejemplo, la fórmula simple:\nrate ~ temp\nespecifica que la tasa de chirrido es el resultado (ya que está en el lado izquierdo de la tilde ~) y que el valor de la temperatura es el predictor.1 Supongamos que los datos contienen la hora del día en el que se obtuvieron las medidas en una columna llamada hora. La formula:\nrate ~ temp + time\nno sumaría los valores de tiempo y temperatura. Esta fórmula representaría simbólicamente que la temperatura y el tiempo deben agregarse como efectos principales separados al modelo. Un efecto principal es un término del modelo que contiene una única variable predictiva.\nNo hay mediciones de tiempo en estos datos pero las especies se pueden agregar al modelo de la misma manera:\nrate ~ temp + species\nLa especie no es una variable cuantitativa; en el marco de datos, se representa como una columna de factor con niveles \"O. exclamationis\" y \"O. niveus\". La gran mayoría de las funciones del modelo no pueden operar con datos no numéricos. Para las especies, el modelo necesita codificar los datos de las especies en un formato numérico. El enfoque más común es utilizar variables indicadoras (también conocidas como variables ficticias) en lugar de los valores cualitativos originales. En este caso, dado que la especie tiene dos valores posibles, la fórmula del modelo codificará automáticamente esta columna como numérica agregando una nueva columna que tiene un valor de cero cuando la especie es \"O. exclamationis\" y un valor de uno cuando la especie es \"O. niveus\". La maquinaria de fórmulas subyacente convierte automáticamente estos valores para el conjunto de datos utilizado para crear el modelo, así como para cualquier punto de datos nuevo (por ejemplo, cuando el modelo se utiliza para predicción).\n\nSupongamos que hubiera cinco especies en lugar de dos. La fórmula del modelo, en este caso, crearía cuatro columnas binarias que son indicadores binarios para cuatro de las especies. El nivel de referencia del factor (es decir, el primer nivel) siempre se deja fuera del conjunto de predictores. La idea es que, si se conocen los valores de las cuatro variables indicadoras, se pueda determinar el valor de la especie. Analizamos las variables de los indicadores binarios con más detalle en la Sección 8.4.1.\n\nLa fórmula del modelo rate ~ temp + species crea un modelo con diferentes intersecciones en el eje y para cada especie; las pendientes de las líneas de regresión también podrían ser diferentes para cada especie. Para adaptarse a esta estructura, se puede agregar un término de interacción al modelo. Esto se puede especificar de varias maneras diferentes, y la más básica utiliza los dos puntos:\nrate ~ temp + species + temp:species\n\n# Se puede utilizar un atajo para expandir todas las interacciones que contienen\n# dos variables:\nrate ~ (temp + species) ^ 2\n\n# Otro atajo para ampliar los factores para incluir todos las posibles\n# interacciones (equivalentes para este ejemplo):\nrate ~ temp * species\nAdemás de la conveniencia de crear variables indicadoras automáticamente, la fórmula ofrece algunas otras sutilezas:\n\nLas funciones en línea se pueden utilizar en la fórmula. Por ejemplo, para utilizar el registro natural de la temperatura, podemos crear la fórmula rate ~ log(temp). Dado que la fórmula es simbólica por defecto, la matemática literal también se puede aplicar a los predictores usando la función de identidad I(). Para usar unidades Fahrenheit, la fórmula podría ser rate ~ I( (temp * 9/5) + 32 ) para convertir de Celsius.\nR tiene muchas funciones que son útiles dentro de las fórmulas. Por ejemplo, “poly(x, 3)” agrega términos lineales, cuadráticos y cúbicos para “x” al modelo como efectos principales. El paquete splines también tiene varias funciones para crear términos spline no lineales en la fórmula.\nPara conjuntos de datos donde hay muchos predictores, el acceso directo al período está disponible. El punto representa los efectos principales para todas las columnas que no están en el lado izquierdo de la tilde. El uso de ~ (.)^3 agregaría efectos principales, así como todas las interacciones de dos y tres variables, al modelo.\n\nVolviendo a nuestros grillos cantando, usemos un modelo de interacción bidireccional. En este libro, utilizamos el sufijo _fit para objetos R que son modelos ajustados.\n\ninteraction_fit &lt;-  lm(rate ~ (temp + species)^2, data = crickets) \n\n# Para imprimir un breve resumen del modelo:\ninteraction_fit\n## \n## Call:\n## lm(formula = rate ~ (temp + species)^2, data = crickets)\n## \n## Coefficients:\n##           (Intercept)                   temp       speciesO. niveus  \n##               -11.041                  3.751                 -4.348  \n## temp:speciesO. niveus  \n##                -0.234\n\nEste resultado es un poco difícil de leer. Para las variables indicadoras de especies, R combina el nombre de la variable (species) con el nivel del factor (O. niveus) sin delimitador.\nAntes de entrar en resultados inferenciales para este modelo, se debe evaluar el ajuste mediante gráficos de diagnóstico. Podemos usar el método plot() para objetos lm. Este método produce un conjunto de cuatro gráficos para el objeto, cada uno de los cuales muestra diferentes aspectos del ajuste, como se muestra en Figura 3.2.\n\n# Coloca dos gráficas una juunto a la otra:\npar(mfrow = c(1, 2))\n\n# Muestra residuos frente a valores previstos:\nplot(interaction_fit, which = 1)\n\n# Una gráfica de cuantiles normales sobre los residuos:\nplot(interaction_fit, which = 2)\n\n\n\n\n\nFigura 3.2: Gráficos de diagnóstico residuales para el modelo lineal con interacciones, que parecen lo suficientemente razonables para realizar análisis inferenciales.\n\n\n\n\nCuando se trata de los detalles técnicos de la evaluación de expresiones, R es perezoso (en lugar de entusiasta). Esto significa que las funciones de ajuste del modelo normalmente calculan las cantidades mínimas posibles en el último momento posible. Por ejemplo, si está interesado en la tabla de coeficientes para cada término del modelo, esto no se calcula automáticamente con el modelo, sino que se calcula mediante el método summary().\n\nNuestra siguiente tarea con los grillos es evaluar si es necesaria la inclusión del término de interacción. El enfoque más apropiado para este modelo es recalcular el modelo sin el término de interacción y utilizar el método anova().\n\n# Montar un modelo reducido:\nmain_effect_fit &lt;-  lm(rate ~ temp + species, data = crickets) \n\n# Comparar los modelos\nanova(main_effect_fit, interaction_fit)\n## Analysis of Variance Table\n## \n## Model 1: rate ~ temp + species\n## Model 2: rate ~ (temp + species)^2\n##   Res.Df  RSS Df Sum of Sq    F Pr(&gt;F)\n## 1     28 89.3                         \n## 2     27 85.1  1      4.28 1.36   0.25\n\nEsta prueba estadística genera un valor p de 0.25. Esto implica que falta evidencia contra la hipótesis nula de que el modelo no necesita el término de interacción. Por esta razón, realizaremos más análisis del modelo sin la interacción.\nLos gráficos residuales deben reevaluarse para asegurarnos de que nuestros supuestos teóricos sean lo suficientemente válidos como para confiar en los valores p producidos por el modelo (los gráficos no se muestran aquí, pero alerta de spoiler: lo son).\nPodemos usar el método summary() para inspeccionar los coeficientes, errores estándar y valores p de cada término del modelo:\n\nsummary(main_effect_fit)\n## \n## Call:\n## lm(formula = rate ~ temp + species, data = crickets)\n## \n## Residuals:\n##    Min     1Q Median     3Q    Max \n## -3.013 -1.130 -0.391  0.965  3.780 \n## \n## Coefficients:\n##                  Estimate Std. Error t value Pr(&gt;|t|)    \n## (Intercept)       -7.2109     2.5509   -2.83   0.0086 ** \n## temp               3.6028     0.0973   37.03  &lt; 2e-16 ***\n## speciesO. niveus -10.0653     0.7353  -13.69  6.3e-14 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 1.79 on 28 degrees of freedom\n## Multiple R-squared:  0.99,   Adjusted R-squared:  0.989 \n## F-statistic: 1.33e+03 on 2 and 28 DF,  p-value: &lt;2e-16\n\nLa tasa de chirrido para cada especie aumenta en 3.6 chirridos a medida que la temperatura aumenta en un solo grado. Este término muestra una fuerte significación estadística como lo demuestra el valor p. El término de especie tiene un valor de -10.07. Esto indica que, en todos los valores de temperatura, O. niveus tiene una frecuencia de chirrido que es aproximadamente 10 menos chirridos por minuto que O. exclamationis. De manera similar al término de temperatura, el efecto de especie se asocia con un valor p muy pequeño.\nEl único problema en este análisis es el valor de la intersección. Indica que a 0° C, hay chirridos negativos por minuto para ambas especies. Si bien esto no tiene sentido, los datos solo llegan a 17.2° C e interpretar el modelo a 0° C sería una extrapolación. Esta sería una mala idea. Dicho esto, el ajuste del modelo es bueno dentro del rango aplicable de los valores de temperatura; las conclusiones deben limitarse al rango de temperatura observado.\nSi necesitáramos estimar la tasa de chirrido a una temperatura que no se observó en el experimento, podríamos usar el método predecit(). Toma el objeto modelo y un marco de datos de nuevos valores para la predicción. Por ejemplo, el modelo estima la tasa de chirrido para O. exclamationis para temperaturas entre 15° C y 20° C se puede calcular mediante:\n\nnew_values &lt;- data.frame(species = \"O. exclamationis\", temp = 15:20)\npredict(main_effect_fit, new_values)\n##     1     2     3     4     5     6 \n## 46.83 50.43 54.04 57.64 61.24 64.84\n\n\nTenga en cuenta que el valor no numérico de species se pasa al método de predicción, a diferencia de la variable indicadora binaria numérica.\n\nSi bien este análisis obviamente no ha sido una demostración exhaustiva de las capacidades de modelado de R, sí resalta algunas características importantes para el resto de este libro:\n\nEl lenguaje tiene una sintaxis expresiva para especificar términos de modelo tanto para modelos simples como para modelos bastante complejos.\nEl método de la fórmula R tiene muchas ventajas para el modelado que también se aplican a datos nuevos cuando se generan predicciones.\nExisten numerosas funciones auxiliares (por ejemplo, anova(), summary() y predict()) que puede utilizar para realizar cálculos específicos después de crear el modelo ajustado.\n\nFinalmente, como se mencionó anteriormente, este marco se publicó por primera vez en 1992. La mayoría de estas ideas y métodos se desarrollaron en ese período, pero siguen siendo notablemente relevantes hasta el día de hoy. Destaca que el lenguaje S y, por extensión, R, ha sido diseñado para el análisis de datos desde sus inicios."
  },
  {
    "objectID": "03-base-r.html#combinando-modelos-base-r-y-tidyverse",
    "href": "03-base-r.html#combinando-modelos-base-r-y-tidyverse",
    "title": "3  Una revisión de los fundamentos del modelado con R",
    "section": "\n3.4 Combinando modelos Base R y Tidyverse",
    "text": "3.4 Combinando modelos Base R y Tidyverse\nLas funciones de modelado de R del lenguaje central u otros paquetes de R se pueden usar junto con tidyverse, especialmente con los paquetes dplyr, purrr y tidyr. Por ejemplo, si quisiéramos ajustar modelos separados para cada especie de grillo, primero podemos desglosar los datos del grillo en esta columna usando dplyr::group_nest():\n\nsplit_by_species &lt;- \n  crickets %&gt;% \n  group_nest(species) \nsplit_by_species\n## # A tibble: 2 × 2\n##   species                        data\n##   &lt;fct&gt;            &lt;list&lt;tibble[,2]&gt;&gt;\n## 1 O. exclamationis           [14 × 2]\n## 2 O. niveus                  [17 × 2]\n\nLa columna data contiene las columnas rate y temp de crickets en una columna de lista. A partir de esto, la función purrr::map() puede crear modelos individuales para cada especie:\n\nmodel_by_species &lt;- \n  split_by_species %&gt;% \n  mutate(model = map(data, ~ lm(rate ~ temp, data = .x)))\nmodel_by_species\n## # A tibble: 2 × 3\n##   species                        data model \n##   &lt;fct&gt;            &lt;list&lt;tibble[,2]&gt;&gt; &lt;list&gt;\n## 1 O. exclamationis           [14 × 2] &lt;lm&gt;  \n## 2 O. niveus                  [17 × 2] &lt;lm&gt;\n\nPara recopilar los coeficientes de cada uno de estos modelos, use broom::tidy() para convertirlos a un formato de marco de datos consistente para que se puedan desanidar:\n\nmodel_by_species %&gt;% \n  mutate(coef = map(model, tidy)) %&gt;% \n  select(species, coef) %&gt;% \n  unnest(cols = c(coef))\n## # A tibble: 4 × 6\n##   species          term        estimate std.error statistic  p.value\n##   &lt;fct&gt;            &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n## 1 O. exclamationis (Intercept)   -11.0      4.77      -2.32 3.90e- 2\n## 2 O. exclamationis temp            3.75     0.184     20.4  1.10e-10\n## 3 O. niveus        (Intercept)   -15.4      2.35      -6.56 9.07e- 6\n## 4 O. niveus        temp            3.52     0.105     33.6  1.57e-15\n\n\nLas columnas de lista pueden ser muy poderosas en proyectos de modelado. Las columnas de lista proporcionan contenedores para cualquier tipo de objetos R, desde un modelo ajustado hasta la importante estructura del marco de datos."
  },
  {
    "objectID": "03-base-r.html#el-metapaquete-tidymodels",
    "href": "03-base-r.html#el-metapaquete-tidymodels",
    "title": "3  Una revisión de los fundamentos del modelado con R",
    "section": "\n3.5 El metapaquete tidymodels",
    "text": "3.5 El metapaquete tidymodels\nEl tidyverse (Capítulo 2) está diseñado como un conjunto de paquetes R modulares, cada uno con un alcance bastante limitado. El marco tidymodels sigue un diseño similar. Por ejemplo, el paquete rsample se centra en la división y el remuestreo de datos. Aunque los métodos de remuestreo son críticos para otras actividades de modelado (por ejemplo, medir el desempeño), residen en un solo paquete y las métricas de desempeño están contenidas en un paquete diferente e independiente, yardstick. Hay muchos beneficios al adoptar esta filosofía de paquetes modulares, desde una implementación de modelos menos inflada hasta un mantenimiento de paquetes más fluido.\nLa desventaja de esta filosofía es que hay muchos paquetes en el marco de tidymodels. Para compensar esto, el paquete tidymodels (que puedes considerar como un metapaquete como el paquete tidyverse) carga un conjunto central de paquetes tidymodels y tidyverse. Al cargar el paquete se muestran qué paquetes están adjuntos:\n\nlibrary(tidymodels)\n## ── Attaching packages ─────────────────────────────────────────── tidymodels 1.1.1 ──\n## ✔ dials        1.2.0     ✔ rsample      1.2.0\n## ✔ infer        1.0.5     ✔ tune         1.1.2\n## ✔ modeldata    1.2.0     ✔ workflows    1.1.3\n## ✔ parsnip      1.1.1     ✔ workflowsets 1.0.1\n## ✔ recipes      1.0.8     ✔ yardstick    1.2.0\n## ── Conflicts ────────────────────────────────────────────── tidymodels_conflicts() ──\n## ✖ scales::discard()        masks purrr::discard()\n## ✖ dplyr::filter()          masks stats::filter()\n## ✖ recipes::fixed()         masks stringr::fixed()\n## ✖ kableExtra::group_rows() masks dplyr::group_rows()\n## ✖ dplyr::lag()             masks stats::lag()\n## ✖ yardstick::spec()        masks readr::spec()\n## ✖ recipes::step()          masks stats::step()\n## • Dig deeper into tidy modeling with R at https://www.tmwr.org\n\nSi ha utilizado tidyverse, notará algunos nombres familiares ya que algunos paquetes de tidyverse, como dplyr y ggplot2, se cargan junto con los paquetes tidymodels. Ya hemos dicho que el marco tidymodels aplica los principios de tidyverse al modelado, pero el marco tidymodels también se basa literalmente en algunos de los paquetes tidyverse más fundamentales, como estos.\nLa carga del metapaquete también muestra si hay conflictos de nombres de funciones con paquetes cargados previamente. Como ejemplo de un conflicto de nombres, antes de cargar tidymodels, al invocar la función filter() se ejecutará la función en el paquete stats. Después de cargar tidymodels, ejecutará la función dplyr del mismo nombre.\nHay algunas formas de manejar los conflictos de nombres. La función se puede llamar con su espacio de nombres (por ejemplo, stats::filter()). Esta no es una mala práctica, pero hace que el código sea menos legible.\nOtra opción es utilizar el paquete conflicted. Podemos establecer una regla que permanezca vigente hasta el final de la sesión de R para garantizar que siempre se ejecute una función específica si no se proporciona ningún espacio de nombres en el código. Como ejemplo, si preferimos la versión dplyr de la función anterior:\n\nlibrary(conflicted)\nconflict_prefer(\"filter\", winner = \"dplyr\")\n\nPor conveniencia, tidymodels contiene una función que captura la mayoría de los conflictos de nombres comunes que podemos encontrar:\n\ntidymodels_prefer(quiet = FALSE)\n## [conflicted] Will prefer agua::refit over any other package.\n## [conflicted] Will prefer dials::Laplace over any other package.\n## [conflicted] Will prefer dials::max_rules over any other package.\n## [conflicted] Will prefer dials::neighbors over any other package.\n## [conflicted] Will prefer dials::prune over any other package.\n## [conflicted] Will prefer dials::smoothness over any other package.\n## [conflicted] Will prefer dplyr::collapse over any other package.\n## [conflicted] Will prefer dplyr::combine over any other package.\n## [conflicted] Will prefer dplyr::filter over any other package.\n## [conflicted] Will prefer dplyr::rename over any other package.\n## [conflicted] Will prefer dplyr::select over any other package.\n## [conflicted] Will prefer dplyr::slice over any other package.\n## [conflicted] Will prefer ggplot2::`%+%` over any other package.\n## [conflicted] Will prefer ggplot2::margin over any other package.\n## [conflicted] Will prefer parsnip::bart over any other package.\n## [conflicted] Will prefer parsnip::fit over any other package.\n## [conflicted] Will prefer parsnip::mars over any other package.\n## [conflicted] Will prefer parsnip::pls over any other package.\n## [conflicted] Will prefer purrr::cross over any other package.\n## [conflicted] Will prefer purrr::invoke over any other package.\n## [conflicted] Will prefer purrr::map over any other package.\n## [conflicted] Will prefer recipes::discretize over any other package.\n## [conflicted] Will prefer recipes::step over any other package.\n## [conflicted] Will prefer rsample::populate over any other package.\n## [conflicted] Will prefer scales::rescale over any other package.\n## [conflicted] Will prefer themis::step_downsample over any other package.\n## [conflicted] Will prefer themis::step_upsample over any other package.\n## [conflicted] Will prefer tidyr::expand over any other package.\n## [conflicted] Will prefer tidyr::extract over any other package.\n## [conflicted] Will prefer tidyr::pack over any other package.\n## [conflicted] Will prefer tidyr::unpack over any other package.\n## [conflicted] Will prefer tune::parameters over any other package.\n## [conflicted] Will prefer tune::tune over any other package.\n## [conflicted] Will prefer yardstick::get_weights over any other package.\n## [conflicted] Will prefer yardstick::precision over any other package.\n## [conflicted] Will prefer yardstick::recall over any other package.\n## [conflicted] Will prefer yardstick::spec over any other package.\n## [conflicted] Will prefer recipes::update over Matrix::update.\n## ── Conflicts ───────────────────────────────────────────────── tidymodels_prefer() ──\n\n\nTenga en cuenta que el uso de esta función le permite optar por utilizar conflicted::conflict_prefer() para todos los conflictos de espacios de nombres, lo que convierte cada conflicto en un error y le obliga a elegir qué función utilizar. La función tidymodels::tidymodels_prefer() maneja los conflictos más comunes de las funciones de tidymodels, pero necesitarás manejar otros conflictos en tu sesión de R tú mismo."
  },
  {
    "objectID": "03-base-r.html#resumen-del-capítulo",
    "href": "03-base-r.html#resumen-del-capítulo",
    "title": "3  Una revisión de los fundamentos del modelado con R",
    "section": "\n3.6 Resumen del capítulo",
    "text": "3.6 Resumen del capítulo\nEste capítulo revisó las convenciones básicas del lenguaje R para crear y usar modelos que son una base importante para el resto de este libro. El operador de fórmula es un aspecto expresivo e importante del ajuste de modelos en R y, a menudo, sirve para múltiples propósitos en funciones que no son de tidymodels. Los enfoques tradicionales de R para modelar tienen algunas limitaciones, especialmente cuando se trata de manejar y visualizar con fluidez los resultados del modelo. El metapaquete tidymodels aplica la filosofía de diseño tidyverse a los paquetes de modelado.\n\n\n\n\nChambers, J, y T Hastie, eds. 1992. Statistical Models in S. Boca Raton, FL: CRC Press, Inc.\n\n\nMangiafico, S. 2015. «An R companion for the handbook of biological statistics». https://rcompanion.org/handbook/.\n\n\nMcDonald, J. 2009. Handbook of Biological Statistics. Sparky House Publishing.\n\n\nWickham, H, M Averick, J Bryan, W Chang, L McGowan, R François, G Grolemund, et al. 2019. «Welcome to the Tidyverse». Journal of Open Source Software 4 (43)."
  },
  {
    "objectID": "04-ames.html#sec-exploring-features-of-homes-in-ames",
    "href": "04-ames.html#sec-exploring-features-of-homes-in-ames",
    "title": "4  Los datos de vivienda de Ames",
    "section": "\n4.1 Explorando las características de las casas en Ames",
    "text": "4.1 Explorando las características de las casas en Ames\nComencemos nuestro análisis exploratorio de datos centrándonos en el resultado que queremos predecir: el último precio de venta de la casa (en USD). Podemos crear un histograma para ver la distribución de los precios de venta en Figura 4.1.\n\nlibrary(tidymodels)\ntidymodels_prefer()\n\nggplot(ames, aes(x = Sale_Price)) + \n  geom_histogram(bins = 50, col= \"white\")\n\n\n\n\n\nFigura 4.1: Precios de venta de casas en Ames (Iowa)\n\n\n\nEste gráfico nos muestra que los datos están sesgados hacia la derecha; Hay más casas baratas que caras. El precio de venta medio fue $160,000, y la casa más cara era $755,000. Al modelar este resultado, se puede argumentar con fuerza que el precio debe transformarse logarítmicamente. Las ventajas de este tipo de transformación son que no se pronosticarían casas con precios de venta negativos y que los errores al predecir casas caras no tendrán una influencia indebida en el modelo. Además, desde una perspectiva estadística, una transformada logarítmica también puede estabilizar la varianza de una manera que haga que la inferencia sea más legítima. Podemos usar pasos similares para visualizar ahora los datos transformados, que se muestran en Figura 4.2.\n\nggplot(ames, aes(x = Sale_Price)) + \n  geom_histogram(bins = 50, col= \"white\") +\n  scale_x_log10()\n\n\n\n\n\nFigura 4.2: Precios de venta de casas en Ames, Iowa después de una transformación logarítmica (base 10)\n\n\n\nSi bien no es perfecto, esto probablemente dará como resultado mejores modelos que el uso de datos no transformados, por las razones que acabamos de describir.\n\nLas desventajas de transformar el resultado se relacionan principalmente con la interpretación de los resultados del modelo.\n\nLas unidades de los coeficientes del modelo podrían ser más difíciles de interpretar, al igual que las medidas de desempeño. Por ejemplo, el error cuadrático medio (RMSE) es una métrica de rendimiento común que se utiliza en los modelos de regresión. Utiliza la diferencia entre los valores observados y predichos en sus cálculos. Si el precio de venta está en la escala logarítmica, estas diferencias (es decir, los residuos) también están en la escala logarítmica. Puede resultar difícil comprender la calidad de un modelo cuyo RMSE es 0,15 en una escala logarítmica de este tipo.\nA pesar de estos inconvenientes, los modelos utilizados en este libro utilizan la transformación logarítmica para este resultado. A partir de este momento, la columna de resultados está preregistrada en el marco de datos ames:\n\names &lt;- ames %&gt;% mutate(Sale_Price = log10(Sale_Price))\n\nOtro aspecto importante de estos datos para nuestro modelado es su ubicación geográfica. Esta información espacial está contenida en los datos de dos maneras: una etiqueta cualitativa de Vecindario y datos cuantitativos de longitud y latitud. Para visualizar la información espacial, usemos ambos juntos para trazar los datos en un mapa en Figura 4.3.\n\n\n\n\nFigura 4.3: Barrios en Ames, IA\n\n\n\nPodemos ver algunos patrones notables. Primero, hay un vacío de puntos de datos en el centro de Ames. Esto corresponde al campus de la Universidad Estatal de Iowa donde no hay casas residenciales. En segundo lugar, si bien hay varios barrios adyacentes, otros están geográficamente aislados. Por ejemplo, como muestra Figura 4.4, Timberland está ubicado aparte de casi todos los demás vecindarios.\n\n\n\n\nFigura 4.4: Ubicaciones de casas en Timberland\n\n\n\nFigura 4.5 visualiza cómo el barrio de Meadow Village en el suroeste de Ames es como una isla de propiedades dentro del mar de propiedades que conforman el barrio de Mitchell.\n\n\n\n\nFigura 4.5: Ubicación de las casas en Meadow Village y Mitchell\n\n\n\nUna inspección detallada del mapa también muestra que las etiquetas de los barrios no son totalmente fiables. Por ejemplo, Figura 4.6 muestra que algunas propiedades etiquetadas como ubicadas en Northridge están rodeadas de casas en el vecindario adyacente de Somerset.\n\n\n\n\nFigura 4.6: Ubicación de las casas en Somerset y Northridge\n\n\n\nAdemás, hay diez casas aisladas etiquetadas como en Crawford que, como puedes ver en Figura 4.7, no están cerca de la mayoría de las otras casas en ese vecindario.\n\n\n\n\nFigura 4.7: Ubicación de las casas en Crawford\n\n\n\nTambién es notable el vecindario del “Departamento de Transporte de Iowa (DOT) y Ferrocarriles” adyacente a la carretera principal en el lado este de Ames, que se muestra en Figura 4.8. Hay varios grupos de viviendas dentro de este vecindario, así como algunos valores atípicos longitudinales; las dos casas más al este están aisladas de las otras ubicaciones.\n\n\n\n\nFigura 4.8: Casas etiquetadas como Departamento de Transporte de Iowa (DOT) y Ferrocarril\n\n\n\nComo se describe en el Capítulo 1, es fundamental realizar un análisis de datos exploratorio antes de comenzar cualquier modelado. Estos datos sobre vivienda tienen características que presentan desafíos interesantes sobre cómo se deben procesar y modelar los datos. Describimos muchos de estos en capítulos posteriores. Algunas preguntas básicas que podrían examinarse durante esta etapa exploratoria incluyen:\n\n¿Hay algo extraño o notable en las distribuciones de los predictores individuales? ¿Hay mucha asimetría o distribuciones patológicas?\n¿Existen altas correlaciones entre los predictores? Por ejemplo, existen múltiples predictores relacionados con el tamaño de la casa. ¿Algunas son redundantes?\n¿Existen asociaciones entre los predictores y los resultados?\n\nMuchas de estas preguntas serán revisadas a medida que estos datos se utilicen a lo largo de este libro."
  },
  {
    "objectID": "05-data-spending.html#datos-multinivel",
    "href": "05-data-spending.html#datos-multinivel",
    "title": "5  Gastar nuestros datos",
    "section": "\n5.3 Datos multinivel",
    "text": "5.3 Datos multinivel\nCon los datos de vivienda de Ames, una propiedad se considera la unidad experimental independiente. Es seguro asumir que, estadísticamente, los datos de una propiedad son independientes de otras propiedades. Para otras aplicaciones, ese no es siempre el caso:\n\nPara datos longitudinales, por ejemplo, la misma unidad experimental independiente se puede medir en múltiples puntos de tiempo. Un ejemplo sería un sujeto humano en un ensayo médico.\nUn lote de producto manufacturado también podría considerarse la unidad experimental independiente. En los diseños de medidas repetidas, los puntos de datos replicados de un lote se recopilan varias veces.\nJohnson et al. (2018) Informe un experimento en el que se tomaron muestras de diferentes árboles en las partes superior e inferior de un tallo. Aquí, el árbol es la unidad experimental y la jerarquía de datos es la muestra dentro de la posición del tallo dentro del árbol.\n\nEl capítulo 9 de Kuhn y Johnson (2020) contiene otros ejemplos.\nEn estas situaciones, el conjunto de datos tendrá varias filas por unidad experimental. Un simple remuestreo entre filas llevaría a que algunos datos dentro de una unidad experimental estuvieran en el conjunto de entrenamiento y otros en el conjunto de prueba. La división de datos debe ocurrir en el nivel de unidad experimental independiente de los datos. Por ejemplo, para producir una división 80/20 del conjunto de datos de vivienda de Ames, el 80% de las propiedades deben asignarse al conjunto de entrenamiento."
  },
  {
    "objectID": "05-data-spending.html#otras-consideraciones-para-un-presupuesto-de-datos",
    "href": "05-data-spending.html#otras-consideraciones-para-un-presupuesto-de-datos",
    "title": "5  Gastar nuestros datos",
    "section": "\n5.4 Otras Consideraciones para un Presupuesto de Datos",
    "text": "5.4 Otras Consideraciones para un Presupuesto de Datos\nAl decidir cómo gastar los datos disponibles, tenga en cuenta algunas cosas más. En primer lugar, es fundamental poner en cuarentena el conjunto de pruebas de cualquier actividad de construcción de modelos. Mientras lee este libro, observe qué datos están expuestos al modelo en un momento dado.\n\nEl problema de la fuga de información ocurre cuando en el proceso de modelado se utilizan datos fuera del conjunto de entrenamiento.\n\nPor ejemplo, en una competencia de aprendizaje automático, los datos del conjunto de pruebas podrían proporcionarse sin los valores reales de los resultados para que el modelo pueda calificarse y clasificarse. Un método potencial para mejorar la puntuación podría ser ajustar el modelo utilizando los puntos de ajuste de entrenamiento que sean más similares a los valores del conjunto de prueba. Si bien el conjunto de prueba no se utiliza directamente para ajustar el modelo, aún tiene una gran influencia. En general, esta técnica es muy problemática ya que reduce el error de generalización del modelo para optimizar el rendimiento en un conjunto de datos específico. Hay formas más sutiles de utilizar los datos del conjunto de prueba durante el entrenamiento. Mantener los datos de entrenamiento en un marco de datos separado del conjunto de prueba es una pequeña verificación para garantizar que la fuga de información no se produzca por accidente.\nEn segundo lugar, las técnicas para submuestrear el conjunto de capacitación pueden mitigar problemas específicos (por ejemplo, desequilibrios de clases). Esta es una técnica válida y común que deliberadamente da como resultado que los datos del conjunto de entrenamiento diverjan de la población de la que se extrajeron los datos. Es fundamental que el conjunto de prueba siga reflejando lo que el modelo encontraría en la naturaleza. En otras palabras, el conjunto de prueba siempre debe parecerse a los datos nuevos que se proporcionarán al modelo.\nA continuación, al comienzo de este capítulo, advertimos sobre el uso de los mismos datos para diferentes tareas. El Capítulo 10 discutirá metodologías sólidas basadas en datos para el uso de datos que reducirán los riesgos relacionados con el sesgo, el sobreajuste y otros problemas. Muchos de estos métodos aplican las herramientas de división de datos presentadas en este capítulo.\nFinalmente, las consideraciones de este capítulo se aplican al desarrollo y elección de un modelo confiable, el tema principal de este libro. Al entrenar un modelo elegido final para producción, después de determinar el rendimiento esperado con nuevos datos, los profesionales suelen utilizar todos los datos disponibles para una mejor estimación de los parámetros."
  },
  {
    "objectID": "06-fitting-models.html#utilizar-los-resultados-del-modelo",
    "href": "06-fitting-models.html#utilizar-los-resultados-del-modelo",
    "title": "6  Creando Modelos con parsnip",
    "section": "\n6.2 Utilizar los Resultados del Modelo",
    "text": "6.2 Utilizar los Resultados del Modelo\nUna vez creado y ajustado el modelo, podemos utilizar los resultados de diversas formas; es posible que queramos trazar, imprimir o examinar de otro modo el resultado del modelo. Varias cantidades se almacenan en un objeto modelo parsnip, incluido el modelo ajustado. Esto se puede encontrar en un elemento llamado fit, que se puede devolver usando la función extract_fit_engine():\n\nlm_form_fit %&gt;% extract_fit_engine()\n## \n## Call:\n## stats::lm(formula = Sale_Price ~ Longitude + Latitude, data = data)\n## \n## Coefficients:\n## (Intercept)    Longitude     Latitude  \n##     -302.97        -2.07         2.71\n\nSe pueden aplicar métodos normales a este objeto, como imprimir y trazar:\n\nlm_form_fit %&gt;% extract_fit_engine() %&gt;% vcov()\n##             (Intercept) Longitude Latitude\n## (Intercept)     207.311   1.57466 -1.42397\n## Longitude         1.575   0.01655 -0.00060\n## Latitude         -1.424  -0.00060  0.03254\n\n\nNunca pase el elemento fit de un modelo parsnip a una función de predicción del modelo, es decir, use predict(lm_form_fit) pero no use predict(lm_form_fit$fit). Si los datos fueron preprocesados ​​de alguna manera, se generarán predicciones incorrectas (a veces, sin errores). La función de predicción del modelo subyacente no tiene idea de si se ha realizado alguna transformación en los datos antes de ejecutar el modelo. Consulte Sección 6.3 para obtener más información sobre cómo hacer predicciones.\n\nUn problema con algunos métodos existentes en base R es que los resultados se almacenan de una manera que puede no ser la más útil. Por ejemplo, el método summary() para objetos lm se puede utilizar para imprimir los resultados del ajuste del modelo, incluida una tabla con los valores de los parámetros, sus estimaciones de incertidumbre y los valores p. Estos resultados particulares también se pueden guardar:\n\nmodel_res &lt;- \n  lm_form_fit %&gt;% \n  extract_fit_engine() %&gt;% \n  summary()\n\n# Se puede acceder a la tabla de coeficientes del modelo mediante el método \"coef\".\nparam_est &lt;- coef(model_res)\nclass(param_est)\n## [1] \"matrix\" \"array\"\nparam_est\n##             Estimate Std. Error t value  Pr(&gt;|t|)\n## (Intercept) -302.974    14.3983  -21.04 3.640e-90\n## Longitude     -2.075     0.1286  -16.13 1.395e-55\n## Latitude       2.710     0.1804   15.02 9.289e-49\n\nHay algunas cosas a tener en cuenta sobre este resultado. Primero, el objeto es una matriz numérica. Lo más probable es que se haya elegido esta estructura de datos, ya que todos los resultados calculados son numéricos y un objeto de matriz se almacena de manera más eficiente que un marco de datos. Esta elección probablemente se hizo a finales de la década de 1970, cuando la eficiencia computacional era extremadamente crítica. En segundo lugar, los datos no numéricos (las etiquetas de los coeficientes) están contenidos en los nombres de las filas. Mantener las etiquetas de los parámetros como nombres de filas es muy coherente con las convenciones del lenguaje S original.\nUn siguiente paso razonable podría ser crear una visualización de los valores de los parámetros. Para ello, sería sensato convertir la matriz de parámetros en un marco de datos. Podríamos agregar los nombres de las filas como una columna para que puedan usarse en un gráfico. Sin embargo, observe que varios de los nombres de columnas de matriz existentes no serían nombres de columnas R válidos para marcos de datos ordinarios (por ejemplo, \"Pr(&gt;|t|)\"). Otra complicación es la coherencia de los nombres de las columnas. Para objetos lm, la columna para el valor p es \"Pr(&gt;|t|)\", pero para otros modelos, se podría usar una prueba diferente y, como resultado, el nombre de la columna sería diferente ( por ejemplo, \"Pr(&gt;|z|)\") y el tipo de prueba se codificaría en el nombre de la columna.\nSi bien estos pasos adicionales de formato de datos no son imposibles de superar, son un obstáculo, especialmente porque pueden ser diferentes para distintos tipos de modelos. La matriz no es una estructura de datos altamente reutilizable, principalmente porque limita los datos a ser de un solo tipo (por ejemplo, numéricos). Además, mantener algunos datos en los nombres de las dimensiones también es problemático, ya que esos datos deben extraerse para que sean de uso general.\nComo solución, el paquete broom puede convertir muchos tipos de objetos modelo en una estructura ordenada. Por ejemplo, usar el método tidy() en el modelo lineal produce:\n\ntidy(lm_form_fit)\n## # A tibble: 3 × 5\n##   term        estimate std.error statistic  p.value\n##   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n## 1 (Intercept)  -303.      14.4       -21.0 3.64e-90\n## 2 Longitude      -2.07     0.129     -16.1 1.40e-55\n## 3 Latitude        2.71     0.180      15.0 9.29e-49\n\nLos nombres de las columnas están estandarizados en todos los modelos y no contienen ningún dato adicional (como el tipo de prueba estadística). Los datos que antes estaban contenidos en los nombres de las filas ahora están en una columna llamada term (término). Un principio importante en el ecosistema de tidymodels es que una función debe devolver valores que sean predecibles, consistentes y no sorprendentes."
  },
  {
    "objectID": "06-fitting-models.html#paquetes-de-extensión-de-parsnip",
    "href": "06-fitting-models.html#paquetes-de-extensión-de-parsnip",
    "title": "6  Creando Modelos con parsnip",
    "section": "\n6.4 Paquetes de Extensión de parsnip",
    "text": "6.4 Paquetes de Extensión de parsnip\nEl paquete parsnip en sí contiene interfaces para varios modelos. Sin embargo, para facilitar la instalación y el mantenimiento del paquete, existen otros paquetes tidymodels que tienen definiciones de modelo parsnip para otros conjuntos de modelos. El paquete discrim tiene definiciones de modelos para el conjunto de técnicas de clasificación llamadas métodos de análisis discriminante (como análisis discriminante lineal o cuadrático). De esta manera, se reducen las dependencias de paquetes necesarias para instalar parsnip. Puede encontrar una lista de todos los modelos que se pueden usar con parsnip (en diferentes paquetes que están en CRAN) en https://www.tidymodels.org/find/."
  },
  {
    "objectID": "07-the-model-workflow.html#sec-workflow-encoding",
    "href": "07-the-model-workflow.html#sec-workflow-encoding",
    "title": "7  Un Flujo de Modelado",
    "section": "\n7.4 ¿Cómo Utiliza un workflow() la Fórmula?",
    "text": "7.4 ¿Cómo Utiliza un workflow() la Fórmula?\nRecuerde de Sección 3.2 que el método de fórmula en R tiene múltiples propósitos (lo discutiremos más a fondo en el Capítulo 8). Uno de ellos es codificar correctamente los datos originales en un formato listo para el análisis. Esto puede implicar la ejecución de transformaciones en línea (por ejemplo, log(x)), la creación de columnas de variables ficticias, la creación de interacciones u otras expansiones de columnas, etc. Sin embargo, muchos métodos estadísticos requieren diferentes tipos de codificaciones:\n\nLa mayoría de los paquetes para modelos basados en árboles utilizan la interfaz de fórmulas pero no codifican los predictores categóricos como variables ficticias.\nLos paquetes pueden utilizar funciones en línea especiales que le indican a la función del modelo cómo tratar el predictor en el análisis. Por ejemplo, en los modelos de análisis de supervivencia, un término de fórmula como strata(site) indicaría que la columna site es una variable de estratificación. Esto significa que no debe tratarse como un predictor regular y no tiene una estimación de parámetro de ubicación correspondiente en el modelo.\nAlgunos paquetes de R han ampliado la fórmula de manera que las funciones básicas de R no pueden analizar ni ejecutar. En modelos multinivel (por ejemplo, modelos mixtos o modelos bayesianos jerárquicos), un término de modelo como (semana | sujeto) indica que la columna semana es un efecto aleatorio que tiene diferentes estimaciones de parámetros de pendiente para cada valor de la columna sujeto.\n\nUn flujo de trabajo es una interfaz de propósito general. Cuando se utiliza add_formula(), ¿cómo debería el flujo de trabajo preprocesar los datos? Dado que el preprocesamiento depende del modelo, workflows intenta emular lo que haría el modelo subyacente siempre que sea posible. Si no es posible, el procesamiento de la fórmula no debe afectar las columnas utilizadas en la fórmula. Veamos esto con más detalle.\nModelos basados en árboles\nCuando ajustamos un árbol a los datos, el paquete parsnip comprende lo que haría la función de modelado. Por ejemplo, si un modelo de bosque aleatorio se ajusta usando los paquetes ranger o randomForest, el flujo de trabajo sabe que las columnas de predictores que son factores deben dejarse como están.\nComo contraejemplo, un árbol potenciado creado con el paquete xgboost requiere que el usuario cree variables ficticias a partir de predictores de factores (ya que xgboost::xgb.train() no lo hará). Este requisito está integrado en el objeto de especificación del modelo y un flujo de trabajo que utiliza xgboost creará las columnas indicadoras para este motor. También tenga en cuenta que un motor diferente para árboles potenciados, C5.0, no requiere variables ficticias, por lo que el flujo de trabajo no crea ninguna.\nEsta determinación se realiza para cada combinación de modelo y motor.\n\n7.4.1 Fórmulas especiales y funciones en línea.\nVarios modelos multinivel se han estandarizado según una especificación de fórmula diseñada en el paquete lme4. Por ejemplo, para ajustar un modelo de regresión que tenga efectos aleatorios para los sujetos, usaríamos la siguiente fórmula:\nlibrary(lme4)\nlmer(distance ~ Sex + (age | Subject), data = Orthodont)\nEl efecto de esto es que cada sujeto tendrá un parámetro estimado de intersección y pendiente para la “edad”.\nEl problema es que los métodos estándar de R no pueden procesar adecuadamente esta fórmula:\n\nmodel.matrix(distance ~ Sex + (age | Subject), data = Orthodont)\n## Warning in Ops.ordered(age, Subject): '|' is not meaningful for ordered factors\n##      (Intercept) SexFemale age | SubjectTRUE\n## attr(,\"assign\")\n## [1] 0 1 2\n## attr(,\"contrasts\")\n## attr(,\"contrasts\")$Sex\n## [1] \"contr.treatment\"\n## \n## attr(,\"contrasts\")$`age | Subject`\n## [1] \"contr.treatment\"\n\nEl resultado es un marco de datos de cero filas.\n\nEl problema es que la fórmula especial debe ser procesada por el código del paquete subyacente, no por el enfoque estándar model.matrix().\n\nIncluso si esta fórmula pudiera usarse con model.matrix(), esto aún presentaría un problema ya que la fórmula también especifica los atributos estadísticos del modelo.\nLa solución en workflows es una fórmula de modelo suplementaria opcional que se puede pasar a add_model(). La especificación add_variables() proporciona los nombres de las columnas básicas, y luego la fórmula real dada al modelo se establece dentro de add_model():\n\nlibrary(multilevelmod)\n\nmultilevel_spec &lt;- linear_reg() %&gt;% set_engine(\"lmer\")\n\nmultilevel_workflow &lt;- \n  workflow() %&gt;% \n  # Pase los datos tal cual:\n  add_variables(outcome = distance, predictors = c(Sex, age, Subject)) %&gt;% \n  add_model(multilevel_spec, \n            # Esta fórmula se le da al modelo.\n            formula = distance ~ Sex + (age | Subject))\n\nmultilevel_fit &lt;- fit(multilevel_workflow, data = Orthodont)\nmultilevel_fit\n## ══ Workflow [trained] ═══════════════════════════════════════════════════════════════\n## Preprocessor: Variables\n## Model: linear_reg()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## Outcomes: distance\n## Predictors: c(Sex, age, Subject)\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## Linear mixed model fit by REML ['lmerMod']\n## Formula: distance ~ Sex + (age | Subject)\n##    Data: data\n## REML criterion at convergence: 471.2\n## Random effects:\n##  Groups   Name        Std.Dev. Corr \n##  Subject  (Intercept) 7.391         \n##           age         0.694    -0.97\n##  Residual             1.310         \n## Number of obs: 108, groups:  Subject, 27\n## Fixed Effects:\n## (Intercept)    SexFemale  \n##       24.52        -2.15\n\nIncluso podemos usar la función strata() mencionada anteriormente del paquete survival para el análisis de supervivencia:\n\nlibrary(censored)\n\nparametric_spec &lt;- survival_reg()\n\nparametric_workflow &lt;- \n  workflow() %&gt;% \n  add_variables(outcome = c(fustat, futime), predictors = c(age, rx)) %&gt;% \n  add_model(parametric_spec, \n            formula = Surv(futime, fustat) ~ age + strata(rx))\n\nparametric_fit &lt;- fit(parametric_workflow, data = ovarian)\nparametric_fit\n## ══ Workflow [trained] ═══════════════════════════════════════════════════════════════\n## Preprocessor: Variables\n## Model: survival_reg()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## Outcomes: c(fustat, futime)\n## Predictors: c(age, rx)\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## Call:\n## survival::survreg(formula = Surv(futime, fustat) ~ age + strata(rx), \n##     data = data, model = TRUE)\n## \n## Coefficients:\n## (Intercept)         age \n##     12.8734     -0.1034 \n## \n## Scale:\n##   rx=1   rx=2 \n## 0.7696 0.4704 \n## \n## Loglik(model)= -89.4   Loglik(intercept only)= -97.1\n##  Chisq= 15.36 on 1 degrees of freedom, p= 9e-05 \n## n= 26\n\nObserve cómo en ambas convocatorias se utilizó la fórmula específica del modelo."
  },
  {
    "objectID": "07-the-model-workflow.html#conceptos-básicos-del-flujo-de-trabajo",
    "href": "07-the-model-workflow.html#conceptos-básicos-del-flujo-de-trabajo",
    "title": "7  Un Flujo de Modelado",
    "section": "\n7.2 Conceptos Básicos del Flujo de Trabajo",
    "text": "7.2 Conceptos Básicos del Flujo de Trabajo\nEl paquete workflows permite al usuario vincular objetos de modelado y preprocesamiento. Empecemos de nuevo con los datos de Ames y un modelo lineal simple:\n\nlibrary(tidymodels)  # Incluye el paquete de flujos de trabajo.\ntidymodels_prefer()\n\nlm_model &lt;- \n  linear_reg() %&gt;% \n  set_engine(\"lm\")\n\nUn flujo de trabajo siempre requiere un objeto modelo parsnip:\n\nlm_wflow &lt;- \n  workflow() %&gt;% \n  add_model(lm_model)\n\nlm_wflow\n## ══ Workflow ═════════════════════════════════════════════════════════════════════════\n## Preprocessor: None\n## Model: linear_reg()\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## Linear Regression Model Specification (regression)\n## \n## Computational engine: lm\n\nTenga en cuenta que aún no hemos especificado cómo este flujo de trabajo debe preprocesar los datos: Preprocessor: None.\nSi nuestro modelo es muy simple, se puede utilizar una fórmula R estándar como preprocesador:\n\nlm_wflow &lt;- \n  lm_wflow %&gt;% \n  add_formula(Sale_Price ~ Longitude + Latitude)\n\nlm_wflow\n## ══ Workflow ═════════════════════════════════════════════════════════════════════════\n## Preprocessor: Formula\n## Model: linear_reg()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## Sale_Price ~ Longitude + Latitude\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## Linear Regression Model Specification (regression)\n## \n## Computational engine: lm\n\nLos flujos de trabajo tienen un método fit() que se puede utilizar para crear el modelo. Usando los objetos creados en Sección 6.6:\n\nlm_fit &lt;- fit(lm_wflow, ames_train)\nlm_fit\n## ══ Workflow [trained] ═══════════════════════════════════════════════════════════════\n## Preprocessor: Formula\n## Model: linear_reg()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## Sale_Price ~ Longitude + Latitude\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## \n## Call:\n## stats::lm(formula = ..y ~ ., data = data)\n## \n## Coefficients:\n## (Intercept)    Longitude     Latitude  \n##     -302.97        -2.07         2.71\n\nTambién podemos predict() en el flujo de trabajo ajustado:\n\npredict(lm_fit, ames_test %&gt;% slice(1:3))\n## # A tibble: 3 × 1\n##   .pred\n##   &lt;dbl&gt;\n## 1  5.22\n## 2  5.21\n## 3  5.28\n\nEl método predict() sigue las mismas reglas y convenciones de nomenclatura que describimos para el paquete parsnip en Sección 6.3.\nTanto el modelo como el preprocesador se pueden eliminar o actualizar:\n\nlm_fit %&gt;% update_formula(Sale_Price ~ Longitude)\n## ══ Workflow ═════════════════════════════════════════════════════════════════════════\n## Preprocessor: Formula\n## Model: linear_reg()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## Sale_Price ~ Longitude\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## Linear Regression Model Specification (regression)\n## \n## Computational engine: lm\n\nTenga en cuenta que, en este nuevo objeto, el resultado muestra que el modelo ajustado anterior se eliminó ya que la nueva fórmula es inconsistente con el ajuste del modelo anterior."
  },
  {
    "objectID": "07-the-model-workflow.html#agregar-variables-sin-procesar-al-workflow",
    "href": "07-the-model-workflow.html#agregar-variables-sin-procesar-al-workflow",
    "title": "7  Un Flujo de Modelado",
    "section": "\n7.3 Agregar Variables sin Procesar al workflow()\n",
    "text": "7.3 Agregar Variables sin Procesar al workflow()\n\nHay otra interfaz para pasar datos al modelo, la función add_variables(), que usa una sintaxis similar a dplyr para elegir variables. La función tiene dos argumentos principales: outcomes y predictors. Estos utilizan un enfoque de selección similar al backend tidyselect de los paquetes tidyverse para capturar múltiples selectores usando c().\n\nlm_wflow &lt;- \n  lm_wflow %&gt;% \n  remove_formula() %&gt;% \n  add_variables(outcome = Sale_Price, predictors = c(Longitude, Latitude))\nlm_wflow\n## ══ Workflow ═════════════════════════════════════════════════════════════════════════\n## Preprocessor: Variables\n## Model: linear_reg()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## Outcomes: Sale_Price\n## Predictors: c(Longitude, Latitude)\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## Linear Regression Model Specification (regression)\n## \n## Computational engine: lm\n\nLos predictores también podrían haberse especificado utilizando un selector más general, como\n\npredictors = c(ends_with(\"tude\"))\n\nUna ventaja es que cualquier columna de resultados especificada accidentalmente en el argumento de los predictores se eliminará silenciosamente. Esto facilita el uso de:\n\npredictors = everything()\n\nCuando el modelo se ajusta, la especificación reúne estos datos, sin modificar, en un marco de datos y los pasa a la función subyacente:\n\nfit(lm_wflow, ames_train)\n## ══ Workflow [trained] ═══════════════════════════════════════════════════════════════\n## Preprocessor: Variables\n## Model: linear_reg()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## Outcomes: Sale_Price\n## Predictors: c(Longitude, Latitude)\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## \n## Call:\n## stats::lm(formula = ..y ~ ., data = data)\n## \n## Coefficients:\n## (Intercept)    Longitude     Latitude  \n##     -302.97        -2.07         2.71\n\nSi desea que el método de modelado subyacente haga lo que normalmente haría con los datos, add_variables() puede ser una interfaz útil. Como veremos en Sección 7.4.1, también facilita especificaciones de modelado más complejas. Sin embargo, como mencionamos en la siguiente sección, modelos como glmnet y xgboost esperan que el usuario cree variables indicadoras a partir de predictores de factores. En estos casos, una interfaz de receta o fórmula suele ser una mejor opción.\nEn el próximo capítulo, veremos un preprocesador más potente (llamado recipe) que también se puede agregar a un flujo de trabajo."
  },
  {
    "objectID": "07-the-model-workflow.html#evaluación-del-conjunto-de-prueba",
    "href": "07-the-model-workflow.html#evaluación-del-conjunto-de-prueba",
    "title": "7  Un Flujo de Modelado",
    "section": "\n7.6 Evaluación del Conjunto de Prueba",
    "text": "7.6 Evaluación del Conjunto de Prueba\nDigamos que hemos concluido el desarrollo de nuestro modelo y nos hemos decidido por un modelo final. Hay una función de conveniencia llamada last_fit() que ajustará el modelo a todo el conjunto de entrenamiento y lo evaluará con el conjunto de prueba.\nUsando lm_wflow como ejemplo, podemos pasar el modelo y la división inicial de entrenamiento/prueba a la función:\n\nfinal_lm_res &lt;- last_fit(lm_wflow, ames_split)\nfinal_lm_res\n## # Resampling results\n## # Manual resampling \n## # A tibble: 1 × 6\n##   splits             id               .metrics .notes   .predictions .workflow \n##   &lt;list&gt;             &lt;chr&gt;            &lt;list&gt;   &lt;list&gt;   &lt;list&gt;       &lt;list&gt;    \n## 1 &lt;split [2342/588]&gt; train/test split &lt;tibble&gt; &lt;tibble&gt; &lt;tibble&gt;     &lt;workflow&gt;\n\n\nObserve que last_fit() toma una división de datos como entrada, no un marco de datos. Esta función utiliza la división para generar los conjuntos de entrenamiento y prueba para el ajuste y la evaluación finales.\n\nLa columna .workflow contiene el flujo de trabajo ajustado y se puede extraer de los resultados usando:\n\nfitted_lm_wflow &lt;- extract_workflow(final_lm_res)\n\nDe manera similar, collect_metrics() y collect_predictions() proporcionan acceso a las métricas de rendimiento y predicciones, respectivamente.\n\ncollect_metrics(final_lm_res)\ncollect_predictions(final_lm_res) %&gt;% slice(1:5)\n\nVeremos más sobre last_fit() en acción y cómo usarlo nuevamente en Sección 16.6.\n\nCuando se usan conjuntos de validación, last_fit() tiene un argumento llamado add_validation_set para especificar si debemos entrenar el modelo final únicamente en el conjunto de entrenamiento (el predeterminado) o la combinación de los conjuntos de entrenamiento y validación."
  },
  {
    "objectID": "08-feature-engineering.html#una-recipe-simple-para-los-datos-de-vivienda-de-ames",
    "href": "08-feature-engineering.html#una-recipe-simple-para-los-datos-de-vivienda-de-ames",
    "title": "8  Ingeniería de Características con recipes",
    "section": "\n8.1 Una recipe() Simple para los Datos de Vivienda de Ames",
    "text": "8.1 Una recipe() Simple para los Datos de Vivienda de Ames\nEn esta sección, nos centraremos en un pequeño subconjunto de los predictores disponibles en los datos de vivienda de Ames:\n\nEl vecindario (cualitativo, con vecindarios 29 en el conjunto de entrenamiento)\nLa superficie habitable bruta sobre el nivel del suelo (continua, denominada Gr_Liv_Area)\nEl año de construcción (Year_Built)\nEl tipo de edificio (Bldg_Type con valores OneFam (\\(n = 1,936\\)), TwoFmCon (\\(n = 50\\)), Duplex (\\(n = 88\\)), Twnhs (\\(n = 77\\)), and TwnhsE (\\(n = 191\\)))\n\nSupongamos que se ajustara un modelo de regresión lineal ordinaria inicial a estos datos. Recordando que, en el Capítulo 4, los precios de venta estaban registrados previamente, una llamada estándar a lm() podría verse así:\n\nlm(Sale_Price ~ Neighborhood + log10(Gr_Liv_Area) + Year_Built + Bldg_Type, data = ames)\n\nCuando se ejecuta esta función, los datos se convierten de un marco de datos a una matriz de diseño numérica (también llamada matriz de modelo) y luego se utiliza el método de mínimos cuadrados para estimar los parámetros. En Sección 3.2 enumeramos los múltiples propósitos de la fórmula del modelo R; Centrémonos sólo en los aspectos de manipulación de datos por ahora. Lo que hace esta fórmula se puede descomponer en una serie de pasos:\n\nEl precio de venta se define como el resultado, mientras que las variables de vecindario, superficie habitable bruta, año de construcción y tipo de edificio se definen como predictores.\nSe aplica una transformación logarítmica al predictor de superficie habitable bruta.\nLas columnas de vecindario y tipo de edificio se convierten de un formato no numérico a un formato numérico (ya que los mínimos cuadrados requieren predictores numéricos).\n\nAs mentioned in Chapter 3, the formula method will apply these data manipulations to any data, including new data, that are passed to the predict() function.\nUna receta también es un objeto que define una serie de pasos para el procesamiento de datos. A diferencia del método de fórmula dentro de una función de modelado, la receta define los pasos mediante funciones step_*() sin ejecutarlas inmediatamente; es sólo una especificación de lo que se debe hacer. Aquí hay una receta equivalente a la fórmula anterior que se basa en el resumen del código en Sección 5.5:\n\nlibrary(tidymodels) # Incluye el paquete de recetas.\ntidymodels_prefer()\n\nsimple_ames &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type,\n         data = ames_train) %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_dummy(all_nominal_predictors())\nsimple_ames\n## \n## ── Recipe ───────────────────────────────────────────────────────────────────────────\n## \n## ── Inputs\n## Number of variables by role\n## outcome:   1\n## predictor: 4\n## \n## ── Operations\n## • Log transformation on: Gr_Liv_Area\n## • Dummy variables from: all_nominal_predictors()\n\nAnalicemos esto:\n\nLa llamada a recipe() (recipe es receta en español) con una fórmula le dice a la receta las funciones de los “ingredientes” o variables (por ejemplo, predictor, resultado). Solo utiliza los datos ames_train para determinar los tipos de datos de las columnas.\nstep_log() declara que Gr_Liv_Area debe transformarse en registros.\nstep_dummy() especifica qué variables deben convertirse de un formato cualitativo a un formato cuantitativo, en este caso, utilizando variables ficticias o indicadoras. Un indicador o variable ficticia es una variable numérica binaria (una columna de unos y ceros) que codifica información cualitativa; Profundizaremos en este tipo de variables en Sección 8.4.1.\n\nLa función all_nominal_predictors() captura los nombres de cualquier columna predictora que actualmente sea de naturaleza factor o carácter (es decir, nominal). Esta es una función selectora similar a dplyr similar a starts_with() o matches() pero que solo se puede usar dentro de una receta.\n\nOtros selectores específicos del paquete recipes son: all_numeric_predictors(), all_numeric(), all_predictors() y all_outcomes(). Al igual que con dplyr, se pueden usar una o más expresiones sin comillas, separadas por comas, para seleccionar qué columnas se ven afectadas por cada paso.\n\n¿Cuál es la ventaja de utilizar una receta sobre una fórmula o predictores sin procesar? Hay algunos, que incluyen:\n\nEstos cálculos se pueden reciclar entre modelos, ya que no están estrechamente vinculados a la función de modelado.\nUna receta permite un conjunto más amplio de opciones de procesamiento de datos que las que pueden ofrecer las fórmulas.\nLa sintaxis puede ser muy compacta. Por ejemplo, all_nominal_predictors() se puede utilizar para capturar muchas variables para tipos específicos de procesamiento, mientras que una fórmula requeriría que cada una de ellas se enumere explícitamente.\nTodo el procesamiento de datos se puede capturar en un único objeto R en lugar de en scripts que se repiten o incluso se distribuyen en diferentes archivos."
  },
  {
    "objectID": "08-feature-engineering.html#sec-using-recipes",
    "href": "08-feature-engineering.html#sec-using-recipes",
    "title": "8  Ingeniería de Características con recipes",
    "section": "\n8.2 Usando Recetas",
    "text": "8.2 Usando Recetas\nComo comentamos en el Capítulo 7, las opciones de preprocesamiento y la ingeniería de características normalmente deben considerarse parte de un flujo de trabajo de modelado, no una tarea separada. El paquete workflows contiene funciones de alto nivel para manejar diferentes tipos de preprocesadores. Nuestro flujo de trabajo anterior (lm_wflow) usaba un conjunto simple de selectores dplyr. Para mejorar ese enfoque con ingeniería de características más compleja, usemos la receta simple_ames para preprocesar datos para modelar.\nEste objeto se puede adjuntar al flujo de trabajo:\n\nlm_wflow %&gt;% \n  add_recipe(simple_ames)\n## Error in `add_recipe()`:\n## ! A recipe cannot be added when variables already exist.\n\n¡Eso no funcionó! Solo podemos tener un método de preprocesamiento a la vez, por lo que debemos eliminar el preprocesador existente antes de agregar la receta.\n\nlm_wflow &lt;- \n  lm_wflow %&gt;% \n  remove_variables() %&gt;% \n  add_recipe(simple_ames)\nlm_wflow\n## ══ Workflow ═════════════════════════════════════════════════════════════════════════\n## Preprocessor: Recipe\n## Model: linear_reg()\n## \n## ── Preprocessor ─────────────────────────────────────────────────────────────────────\n## 2 Recipe Steps\n## \n## • step_log()\n## • step_dummy()\n## \n## ── Model ────────────────────────────────────────────────────────────────────────────\n## Linear Regression Model Specification (regression)\n## \n## Computational engine: lm\n\nEstimemos tanto la receta como el modelo usando una simple llamada a fit():\n\nlm_fit &lt;- fit(lm_wflow, ames_train)\n\nEl método predict() aplica el mismo preprocesamiento que se usó en el conjunto de entrenamiento a los nuevos datos antes de pasarlos al método predict() del modelo:\n\npredict(lm_fit, ames_test %&gt;% slice(1:3))\n## # A tibble: 3 × 1\n##   .pred\n##   &lt;dbl&gt;\n## 1  5.08\n## 2  5.32\n## 3  5.28\n\nSi necesitamos el objeto del modelo básico o la receta, existen funciones extract_* que pueden recuperarlos:\n\n# Obtén la receta una vez estimada:\nlm_fit %&gt;% \n  extract_recipe(estimated = TRUE)\n## \n## ── Recipe ───────────────────────────────────────────────────────────────────────────\n## \n## ── Inputs\n## Number of variables by role\n## outcome:   1\n## predictor: 4\n## \n## ── Training information\n## Training data contained 2342 data points and no incomplete rows.\n## \n## ── Operations\n## • Log transformation on: Gr_Liv_Area | Trained\n## • Dummy variables from: Neighborhood, Bldg_Type | Trained\n\n# Para ordenar el ajuste del modelo:\nlm_fit %&gt;% \n  # Esto devuelve el objeto parsnip:\n  extract_fit_parsnip() %&gt;% \n  # Ahora ordena el objeto del modelo lineal:\n  tidy() %&gt;% \n  slice(1:5)\n## # A tibble: 5 × 5\n##   term                       estimate std.error statistic   p.value\n##   &lt;chr&gt;                         &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n## 1 (Intercept)                -0.669    0.231        -2.90 3.80e-  3\n## 2 Gr_Liv_Area                 0.620    0.0143       43.2  2.63e-299\n## 3 Year_Built                  0.00200  0.000117     17.1  6.16e- 62\n## 4 Neighborhood_College_Creek  0.0178   0.00819       2.17 3.02e-  2\n## 5 Neighborhood_Old_Town      -0.0330   0.00838      -3.93 8.66e-  5\n\n\nLas herramientas para usar (y depurar) recetas fuera de los objetos del flujo de trabajo se describen en Sección 16.4."
  },
  {
    "objectID": "08-feature-engineering.html#cómo-se-utilizan-los-datos-en-recipe",
    "href": "08-feature-engineering.html#cómo-se-utilizan-los-datos-en-recipe",
    "title": "8  Ingeniería de Características con recipes",
    "section": "\n8.3 Cómo se Utilizan los Datos en recipe()\n",
    "text": "8.3 Cómo se Utilizan los Datos en recipe()\n\nLos datos se pasan a recetas en diferentes etapas.\nPrimero, al llamar a recipe(..., data), el conjunto de datos se usa para determinar los tipos de datos de cada columna, de modo que se puedan usar selectores como all_numeric() o all_numeric_predictors().\nEn segundo lugar, cuando se preparan los datos usando “fit(workflow, data)”, los datos de entrenamiento se utilizan para todas las operaciones de estimación, incluida una receta que puede ser parte del “workflow”, desde determinar los niveles de los factores hasta calcular los componentes de PCA y todo lo demás.\n\nTodos los pasos de preprocesamiento e ingeniería de funciones utilizan solo los datos de entrenamiento. De lo contrario, la fuga de información puede afectar negativamente el rendimiento del modelo cuando se utiliza con datos nuevos.\n\nFinalmente, cuando se usa predict(workflow, new_data), ningún modelo o parámetro de preprocesador como los de las recetas se reestima usando los valores en new_data. Tome el centrado y el escalado usando step_normalize() como ejemplo. Con este paso, las medias y las desviaciones estándar de las columnas apropiadas se determinan a partir del conjunto de entrenamiento; Las nuevas muestras en el momento de la predicción se estandarizan utilizando estos valores del entrenamiento cuando se invoca predict()."
  },
  {
    "objectID": "08-feature-engineering.html#ordenar-recipe",
    "href": "08-feature-engineering.html#ordenar-recipe",
    "title": "8  Ingeniería de Características con recipes",
    "section": "\n8.6 Ordenar recipe()\n",
    "text": "8.6 Ordenar recipe()\n\nEn ?sec-tidines-modeling, introdujimos el verbo tidy() para objetos estadísticos. También hay un método tidy() para recetas, así como pasos de recetas individuales. Antes de continuar, creemos una receta extendida para los datos de Ames usando algunos de los nuevos pasos que hemos discutido en este capítulo:\n\names_rec &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n           Latitude + Longitude, data = ames_train) %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_other(Neighborhood, threshold = 0.01) %&gt;% \n  step_dummy(all_nominal_predictors()) %&gt;% \n  step_interact( ~ Gr_Liv_Area:starts_with(\"Bldg_Type_\") ) %&gt;% \n  step_ns(Latitude, Longitude, deg_free = 20)\n\nEl método tidy(), cuando se llama con el objeto de receta, ofrece un resumen de los pasos de la receta:\n\ntidy(ames_rec)\n## # A tibble: 5 × 6\n##   number operation type     trained skip  id            \n##    &lt;int&gt; &lt;chr&gt;     &lt;chr&gt;    &lt;lgl&gt;   &lt;lgl&gt; &lt;chr&gt;         \n## 1      1 step      log      FALSE   FALSE log_66JTU     \n## 2      2 step      other    FALSE   FALSE other_ePfcw   \n## 3      3 step      dummy    FALSE   FALSE dummy_Z18Cl   \n## 4      4 step      interact FALSE   FALSE interact_JLU36\n## 5      5 step      ns       FALSE   FALSE ns_rvsqQ\n\nEste resultado puede ser útil para identificar pasos individuales, quizás para luego poder ejecutar el método tidy() en un paso específico.\nPodemos especificar el argumento id en cualquier llamada de función de paso; de lo contrario, se genera utilizando un sufijo aleatorio. Establecer este valor puede resultar útil si se agrega el mismo tipo de paso a la receta más de una vez. Especifiquemos el id con anticipación para step_other(), ya que queremos tidy():\n\names_rec &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n           Latitude + Longitude, data = ames_train) %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_other(Neighborhood, threshold = 0.01, id = \"my_id\") %&gt;% \n  step_dummy(all_nominal_predictors()) %&gt;% \n  step_interact( ~ Gr_Liv_Area:starts_with(\"Bldg_Type_\") ) %&gt;% \n  step_ns(Latitude, Longitude, deg_free = 20)\n\nReacondicionaremos el flujo de trabajo con esta nueva receta:\n\nlm_wflow &lt;- \n  workflow() %&gt;% \n  add_model(lm_model) %&gt;% \n  add_recipe(ames_rec)\n\nlm_fit &lt;- fit(lm_wflow, ames_train)\n\nEl método tidy() se puede volver a llamar junto con el identificador id que especificamos para obtener nuestros resultados al aplicar step_other():\n\nestimated_recipe &lt;- \n  lm_fit %&gt;% \n  extract_recipe(estimated = TRUE)\n\ntidy(estimated_recipe, id = \"my_id\")\n## # A tibble: 22 × 3\n##   terms        retained           id   \n##   &lt;chr&gt;        &lt;chr&gt;              &lt;chr&gt;\n## 1 Neighborhood North_Ames         my_id\n## 2 Neighborhood College_Creek      my_id\n## 3 Neighborhood Old_Town           my_id\n## 4 Neighborhood Edwards            my_id\n## 5 Neighborhood Somerset           my_id\n## 6 Neighborhood Northridge_Heights my_id\n## # ℹ 16 more rows\n\nLos resultados de tidy() que vemos aquí al usar step_other() muestran qué niveles de factor se retuvieron, es decir, no se agregaron a la nueva categoría “otros”.\nEl método tidy() también se puede llamar con el identificador number, si sabemos qué paso de la receta necesitamos:\n\ntidy(estimated_recipe, number = 2)\n## # A tibble: 22 × 3\n##   terms        retained           id   \n##   &lt;chr&gt;        &lt;chr&gt;              &lt;chr&gt;\n## 1 Neighborhood North_Ames         my_id\n## 2 Neighborhood College_Creek      my_id\n## 3 Neighborhood Old_Town           my_id\n## 4 Neighborhood Edwards            my_id\n## 5 Neighborhood Somerset           my_id\n## 6 Neighborhood Northridge_Heights my_id\n## # ℹ 16 more rows\n\nCada método tidy() devuelve la información relevante sobre ese paso. Por ejemplo, el método tidy() para step_dummy() devuelve una columna con las variables que se convirtieron en variables ficticias y otra columna con todos los niveles conocidos para cada columna."
  },
  {
    "objectID": "08-feature-engineering.html#roles-de-columna",
    "href": "08-feature-engineering.html#roles-de-columna",
    "title": "8  Ingeniería de Características con recipes",
    "section": "\n8.7 Roles de columna",
    "text": "8.7 Roles de columna\nCuando se usa una fórmula con la llamada inicial a receta(), asigna roles a cada una de las columnas, dependiendo de en qué lado de la tilde se encuentran. Esos roles son \"predictor\" o \"outcome\". Sin embargo, se pueden asignar otros roles según sea necesario.\nPor ejemplo, en nuestro conjunto de datos de Ames, los datos originales sin procesar contenían una columna para la dirección.1 Puede resultar útil mantener esa columna en los datos para que, después de realizar las predicciones, se obtengan resultados problemáticos. se puede investigar en detalle. En otras palabras, la columna podría ser importante incluso cuando no sea un predictor o un resultado.\nPara resolver esto, las funciones add_role(), remove_role() y update_role() pueden resultar útiles. Por ejemplo, para los datos del precio de la vivienda, la función de la columna de dirección postal podría modificarse usando:\names_rec %&gt;% update_role(address, new_role = \"street address\")\nDespués de este cambio, la columna address en el marco de datos ya no será un predictor sino una street address de acuerdo con la receta. Se puede utilizar cualquier cadena de caracteres como rol. Además, las columnas pueden tener múltiples roles (se agregan roles adicionales mediante add_role()) para que puedan seleccionarse en más de un contexto.\nEsto puede resultar útil cuando los datos se vuelven a muestrear. Ayuda a mantener las columnas que no están involucradas con el modelo encajadas en el mismo marco de datos (en lugar de en un vector externo). El remuestreo, descrito en el Capítulo 10, crea versiones alternativas de los datos principalmente mediante submuestreo de filas. Si la dirección postal estuviera en otra columna, se requeriría un submuestreo adicional y podría generar un código más complejo y una mayor probabilidad de errores.\nFinalmente, todas las funciones de paso tienen un campo “rol” que puede asignar roles a los resultados del paso. En muchos casos, las columnas afectadas por un paso conservan su función actual. Por ejemplo, las llamadas step_log() a nuestro objeto ames_rec afectaron la columna Gr_Liv_Area. Para ese paso, el comportamiento predeterminado es mantener la función existente para esta columna, ya que no se crea ninguna columna nueva. Como contraejemplo, el paso para producir splines establece de forma predeterminada que las nuevas columnas tengan una función de \"predictor\" ya que así es como normalmente se usan las columnas spline en un modelo. La mayoría de los pasos tienen valores predeterminados razonables pero, dado que los valores predeterminados pueden ser diferentes, asegúrese de consultar la página de documentación para comprender qué roles se asignarán."
  },
  {
    "objectID": "09-judging-model-effectiveness.html#métricas-de-rendimiento-e-inferencia",
    "href": "09-judging-model-effectiveness.html#métricas-de-rendimiento-e-inferencia",
    "title": "9  Juzgar la Eficacia del Modelo",
    "section": "\n9.1 Métricas de rendimiento e inferencia",
    "text": "9.1 Métricas de rendimiento e inferencia\nLa eficacia de cualquier modelo depende de cómo se utilizará. Un modelo inferencial se utiliza principalmente para comprender las relaciones y normalmente enfatiza la elección (y validez) de distribuciones probabilísticas y otras cualidades generativas que definen el modelo. Por el contrario, para un modelo utilizado principalmente para la predicción, la fuerza predictiva es de primordial importancia y otras preocupaciones sobre las cualidades estadísticas subyacentes pueden ser menos importantes. La fuerza predictiva generalmente está determinada por qué tan cerca están nuestras predicciones de los datos observados, es decir, la fidelidad de las predicciones del modelo a los resultados reales. Este capítulo se centra en funciones que se pueden utilizar para medir la fuerza predictiva. Sin embargo, nuestro consejo para quienes desarrollan modelos inferenciales es utilizar estas técnicas incluso cuando el modelo no se utilizará con el objetivo principal de predicción.\nUn problema de larga data con la práctica de la estadística inferencial es que, centrándose exclusivamente en la inferencia, es difícil evaluar la credibilidad de un modelo. Por ejemplo, considere los datos sobre la enfermedad de Alzheimer de Craig–Schapiro et al. (2011) cuando se estudiaron pacientes con 333 para determinar los factores que influyen en el deterioro cognitivo. Un análisis podría tomar los factores de riesgo conocidos y construir un modelo de regresión logística donde el resultado sea binario (deteriorado/no deteriorado). Consideremos los predictores de edad, sexo y genotipo de apolipoproteína E. Esta última es una variable categórica con las seis combinaciones posibles de las tres variantes principales de este gen. Se sabe que la apolipoproteína E tiene una asociación con la demencia (Jungsu, Basak, y Holtzman 2009).\nUn enfoque superficial, pero no infrecuente, para este análisis sería ajustar un modelo grande con efectos e interacciones principales y luego utilizar pruebas estadísticas para encontrar el conjunto mínimo de términos del modelo que sean estadísticamente significativos en algún nivel predefinido. Si se utilizara un modelo completo con los tres factores y sus interacciones de dos y tres vías, una fase inicial sería probar las interacciones utilizando pruebas de índice de probabilidad secuencial (Hosmer y Lemeshow 2000). Analicemos este tipo de enfoque para el ejemplo de datos sobre la enfermedad de Alzheimer:\n\nAl comparar el modelo con todas las interacciones de dos vías con uno con la interacción de tres vías adicional, las pruebas de razón de verosimilitud producen un valor p de 0.888. Esto implica que no hay evidencia de que los términos del modelo adicionales four asociados con la interacción de tres vías expliquen suficiente variación en los datos para mantenerlos en el modelo.\nA continuación, las interacciones bidireccionales se evalúan de manera similar con respecto al modelo sin interacciones. El valor p aquí es 0.0382. Esto es algo dudoso, pero, dado el pequeño tamaño de la muestra, sería prudente concluir que hay evidencia de que algunas de las posibles interacciones bidireccionales 10 son importantes para la modelo.\nA partir de aquí, construiríamos alguna explicación de los resultados. Sería particularmente importante discutir las interacciones, ya que pueden generar hipótesis fisiológicas o neurológicas interesantes que se explorarán más a fondo.\n\nSi bien superficial, esta estrategia de análisis es común tanto en la práctica como en la literatura. Esto es especialmente cierto si el profesional tiene una formación formal limitada en análisis de datos.\nUn dato que falta en este enfoque es qué tan cerca se ajusta este modelo a los datos reales. Usando métodos de remuestreo, discutidos en el Capítulo 10, podemos estimar que la precisión de este modelo es aproximadamente 73%. La precisión es a menudo una mala medida del rendimiento del modelo; Lo usamos aquí porque se entiende comúnmente. Si el modelo tiene 73% de fidelidad a los datos, ¿deberíamos confiar en las conclusiones que produce? Podríamos pensar así hasta que nos demos cuenta de que la tasa inicial de pacientes no deteriorados en los datos es 72.7%. Esto significa que, a pesar de nuestro análisis estadístico, el modelo de dos factores parece ser sólo 0.3% mejor que una simple heurística que siempre predice que los pacientes no sufrirán daños, independientemente de los datos observados.\n\nEl objetivo de este análisis es demostrar la idea de que la optimización de las características estadísticas del modelo no implica que el modelo se ajuste bien a los datos. Incluso para modelos puramente inferenciales, alguna medida de fidelidad a los datos debería acompañar a los resultados inferenciales. Con esto, los consumidores de los análisis pueden calibrar sus expectativas sobre los resultados.\n\nEn el resto de este capítulo, discutiremos enfoques generales para evaluar modelos mediante validación empírica. Estos enfoques se agrupan según la naturaleza de los datos de resultados: puramente numéricos, clases binarias y tres o más niveles de clase."
  },
  {
    "objectID": "09-judging-model-effectiveness.html#métricas-de-regresión",
    "href": "09-judging-model-effectiveness.html#métricas-de-regresión",
    "title": "9  Juzgar la Eficacia del Modelo",
    "section": "\n9.2 Métricas de regresión",
    "text": "9.2 Métricas de regresión\nRecuerde de Sección 6.3 que las funciones de predicción de tidymodels producen tibbles con columnas para los valores predichos. Estas columnas tienen nombres consistentes y las funciones en el paquete yardstick que producen métricas de rendimiento tienen interfaces consistentes. Las funciones están basadas en marcos de datos, a diferencia de vectores, con la sintaxis general de:\nfunction(data, truth, ...)\ndonde data es un marco de datos o tibble y truth es la columna con los valores de resultados observados. Las elipses u otros argumentos se utilizan para especificar las columnas que contienen las predicciones.\nPara ilustrar, tomemos el modelo de Sección 8.8. Este modelo lm_wflow_fit combina un modelo de regresión lineal con un conjunto de predictores complementado con una interacción y funciones spline para longitud y latitud. Fue creado a partir de un conjunto de entrenamiento (llamado ames_train). Aunque no recomendamos utilizar el conjunto de pruebas en este punto del proceso de modelado, se utilizará aquí para ilustrar la funcionalidad y la sintaxis. El marco de datos ames_test consta de las propiedades 588. Para empezar, hagamos predicciones:\n\names_test_res &lt;- predict(lm_fit, new_data = ames_test %&gt;% select(-Sale_Price))\names_test_res\n## # A tibble: 588 × 1\n##   .pred\n##   &lt;dbl&gt;\n## 1  5.07\n## 2  5.31\n## 3  5.28\n## 4  5.33\n## 5  5.30\n## 6  5.24\n## # ℹ 582 more rows\n\nEl resultado numérico previsto por el modelo de regresión se denomina .pred. Hagamos coincidir los valores predichos con sus correspondientes valores de resultado observados:\n\names_test_res &lt;- bind_cols(ames_test_res, ames_test %&gt;% select(Sale_Price))\names_test_res\n## # A tibble: 588 × 2\n##   .pred Sale_Price\n##   &lt;dbl&gt;      &lt;dbl&gt;\n## 1  5.07       5.02\n## 2  5.31       5.39\n## 3  5.28       5.28\n## 4  5.33       5.28\n## 5  5.30       5.28\n## 6  5.24       5.26\n## # ℹ 582 more rows\n\nVemos que estos valores en su mayoría parecen cercanos, pero aún no tenemos una comprensión cuantitativa de cómo funciona el modelo porque no hemos calculado ninguna métrica de rendimiento. Tenga en cuenta que tanto los resultados previstos como los observados están en unidades log-10. Es una buena práctica analizar las predicciones en la escala transformada (si se usara una), incluso si las predicciones se informan utilizando las unidades originales.\nTrazamos los datos en Figura 9.2 antes de calcular las métricas:\n\nggplot(ames_test_res, aes(x = Sale_Price, y = .pred)) + \n  # Crear una línea diagonal:\n  geom_abline(lty = 2) + \n  geom_point(alpha = 0.5) + \n  labs(y = \"Precio de Venta Predecido (log10)\", x = \"Precio de Venta (log10)\") +\n  # Escale y dimensione los ejes x e y de manera uniforme:\n  coord_obs_pred()\n\n\n\n\n\nFigura 9.2: Valores observados versus valores predichos para un modelo de regresión de Ames, con unidades log-10 en ambos ejes\n\n\n\nHay una propiedad de bajo precio que está sustancialmente sobreestimada, es decir, bastante por encima de la línea discontinua.\nCalculemos la raíz del error cuadrático medio para este modelo usando la función rmse():\n\nrmse(ames_test_res, truth = Sale_Price, estimate = .pred)\n## # A tibble: 1 × 3\n##   .metric .estimator .estimate\n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n## 1 rmse    standard      0.0736\n\nEsto nos muestra el formato estándar de salida de las funciones yardstick. Las métricas para resultados numéricos suelen tener un valor “estándar” para la columna .estimator. En las siguientes secciones se muestran ejemplos con diferentes valores para esta columna.\nPara calcular varias métricas a la vez, podemos crear un conjunto de métricas. Sumemos \\(R^2\\) y el error absoluto medio:\n\names_metrics &lt;- metric_set(rmse, rsq, mae)\names_metrics(ames_test_res, truth = Sale_Price, estimate = .pred)\n## # A tibble: 3 × 3\n##   .metric .estimator .estimate\n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n## 1 rmse    standard      0.0736\n## 2 rsq     standard      0.836 \n## 3 mae     standard      0.0549\n\nEste formato de datos ordenado apila las métricas verticalmente. Las métricas del error cuadrático medio y del error absoluto medio están en la escala del resultado (por lo tanto, log10(Sale_Price) para nuestro ejemplo) y miden la diferencia entre los valores previstos y observados. El valor de \\(R^2\\) mide la correlación al cuadrado entre los valores previstos y observados, por lo que los valores más cercanos a uno son mejores.\n\nEl paquete yardstick no contiene una función para \\(R^2\\) ajustado. Esta modificación del coeficiente de determinación se utiliza comúnmente cuando los mismos datos utilizados para ajustar el modelo se utilizan para evaluar el modelo. Esta métrica no es totalmente compatible con tidymodels porque siempre es un mejor enfoque para calcular el rendimiento en un conjunto de datos separado que el utilizado para ajustar el modelo."
  },
  {
    "objectID": "09-judging-model-effectiveness.html#métricas-de-clasificación-binaria",
    "href": "09-judging-model-effectiveness.html#métricas-de-clasificación-binaria",
    "title": "9  Juzgar la Eficacia del Modelo",
    "section": "\n9.3 Métricas de clasificación binaria",
    "text": "9.3 Métricas de clasificación binaria\nPara ilustrar otras formas de medir el rendimiento del modelo, cambiaremos a un ejemplo diferente. El paquete modeldata (otro de los paquetes tidymodels) contiene predicciones de ejemplo de un conjunto de datos de prueba con dos clases (“Class1” y “Class2”):\n\ndata(two_class_example)\ntibble(two_class_example)\n## # A tibble: 500 × 4\n##   truth   Class1   Class2 predicted\n##   &lt;fct&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;fct&gt;    \n## 1 Class2 0.00359 0.996    Class2   \n## 2 Class1 0.679   0.321    Class1   \n## 3 Class2 0.111   0.889    Class2   \n## 4 Class1 0.735   0.265    Class1   \n## 5 Class2 0.0162  0.984    Class2   \n## 6 Class1 0.999   0.000725 Class1   \n## # ℹ 494 more rows\n\nLa segunda y tercera columnas son las probabilidades de clase predichas para el conjunto de prueba, mientras que predicted son las predicciones discretas.\nPara las predicciones de clases difíciles, una variedad de funciones yardstick son útiles:\n\n# Una matriz de confusión:\nconf_mat(two_class_example, truth = truth, estimate = predicted)\n##           Truth\n## Prediction Class1 Class2\n##     Class1    227     50\n##     Class2     31    192\n\n# Exactitud:\naccuracy(two_class_example, truth, predicted)\n## # A tibble: 1 × 3\n##   .metric  .estimator .estimate\n##   &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n## 1 accuracy binary         0.838\n\n# Coeficiente de correlación de Matthews:\nmcc(two_class_example, truth, predicted)\n## # A tibble: 1 × 3\n##   .metric .estimator .estimate\n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n## 1 mcc     binary         0.677\n\n# Métrica F1:\nf_meas(two_class_example, truth, predicted)\n## # A tibble: 1 × 3\n##   .metric .estimator .estimate\n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n## 1 f_meas  binary         0.849\n\n# Combinando estas tres métricas de clasificación juntas\nclassification_metrics &lt;- metric_set(accuracy, mcc, f_meas)\nclassification_metrics(two_class_example, truth = truth, estimate = predicted)\n## # A tibble: 3 × 3\n##   .metric  .estimator .estimate\n##   &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n## 1 accuracy binary         0.838\n## 2 mcc      binary         0.677\n## 3 f_meas   binary         0.849\n\nEl coeficiente de correlación de Matthews y la puntuación F1 resumen la matriz de confusión, pero en comparación con mcc(), que mide la calidad de ejemplos tanto positivos como negativos, la métrica f_meas() enfatiza la clase positiva, es decir, el evento de interés. Para conjuntos de datos de clasificación binaria como este ejemplo, las funciones yardstick tienen un argumento estándar llamado event_level para distinguir los niveles positivos y negativos. El valor predeterminado (que utilizamos en este código) es que el primer nivel del factor de resultado es el evento de interés.\n\nExiste cierta heterogeneidad en las funciones R a este respecto; algunos utilizan el primer nivel y otros el segundo para denotar el evento de interés. Consideramos más intuitivo que el primer nivel es el más importante. La lógica de segundo nivel surge de codificar el resultado como 0/1 (en cuyo caso el segundo valor es el evento) y desafortunadamente permanece en algunos paquetes. Sin embargo, tidymodels (junto con muchos otros paquetes de R) requieren que se codifique un resultado categórico como factor y, por esta razón, la justificación heredada para el segundo nivel como evento se vuelve irrelevante.\n\nComo ejemplo donde el segundo nivel es el evento:\n\nf_meas(two_class_example, truth, predicted, event_level = \"second\")\n## # A tibble: 1 × 3\n##   .metric .estimator .estimate\n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n## 1 f_meas  binary         0.826\n\nEn este resultado, el valor .estimator de “binario” indica que se utilizará la fórmula estándar para clases binarias.\nExisten numerosas métricas de clasificación que utilizan las probabilidades predichas como entradas en lugar de las predicciones de clase estrictas. Por ejemplo, la curva de características operativas del receptor (ROC) calcula la sensibilidad y la especificidad sobre un continuo de diferentes umbrales de eventos. La columna de clase prevista no se utiliza. Hay dos funciones yardstick para este método: roc_curve() calcula los puntos de datos que forman la curva ROC y roc_auc() calcula el área bajo la curva.\nLas interfaces para estos tipos de funciones métricas utilizan el marcador de posición del argumento ... para pasar la columna de probabilidad de clase apropiada. Para problemas de dos clases, la columna de probabilidad del evento de interés se pasa a la función:\n\ntwo_class_curve &lt;- roc_curve(two_class_example, truth, Class1)\ntwo_class_curve\n## # A tibble: 502 × 3\n##   .threshold specificity sensitivity\n##        &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n## 1 -Inf           0                 1\n## 2    1.79e-7     0                 1\n## 3    4.50e-6     0.00413           1\n## 4    5.81e-6     0.00826           1\n## 5    5.92e-6     0.0124            1\n## 6    1.22e-5     0.0165            1\n## # ℹ 496 more rows\n\nroc_auc(two_class_example, truth, Class1)\n## # A tibble: 1 × 3\n##   .metric .estimator .estimate\n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n## 1 roc_auc binary         0.939\n\nEl objeto two_class_curve se puede usar en una llamada ggplot para visualizar la curva, como se muestra en Figura 9.3. Existe un método autoplot() que se encargará de los detalles:\n\nautoplot(two_class_curve)\n\n\n\n\n\nFigura 9.3: Ejemplo de curva ROC\n\n\n\nSi la curva estuviera cerca de la línea diagonal, entonces las predicciones del modelo no serían mejores que las conjeturas aleatorias. Dado que la curva está arriba en la esquina superior izquierda, vemos que nuestro modelo funciona bien en diferentes umbrales.\nHay otras funciones que utilizan estimaciones de probabilidad, incluidas gain_curve(), lift_curve() y pr_curve()."
  },
  {
    "objectID": "09-judging-model-effectiveness.html#métricas-de-clasificación-multiclase",
    "href": "09-judging-model-effectiveness.html#métricas-de-clasificación-multiclase",
    "title": "9  Juzgar la Eficacia del Modelo",
    "section": "\n9.4 Métricas de Clasificación Multiclase",
    "text": "9.4 Métricas de Clasificación Multiclase\n¿Qué pasa con los datos con tres o más clases? Para demostrarlo, exploremos un conjunto de datos de ejemplo diferente que tiene cuatro clases:\n\ndata(hpc_cv)\ntibble(hpc_cv)\n## # A tibble: 3,467 × 7\n##   obs   pred     VF      F       M          L Resample\n##   &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;   \n## 1 VF    VF    0.914 0.0779 0.00848 0.0000199  Fold01  \n## 2 VF    VF    0.938 0.0571 0.00482 0.0000101  Fold01  \n## 3 VF    VF    0.947 0.0495 0.00316 0.00000500 Fold01  \n## 4 VF    VF    0.929 0.0653 0.00579 0.0000156  Fold01  \n## 5 VF    VF    0.942 0.0543 0.00381 0.00000729 Fold01  \n## 6 VF    VF    0.951 0.0462 0.00272 0.00000384 Fold01  \n## # ℹ 3,461 more rows\n\nComo antes, hay factores para los resultados observados y previstos junto con otras cuatro columnas de probabilidades previstas para cada clase. (Estos datos también incluyen una columna Resample. Estos resultados hpc_cv son para predicciones fuera de muestra asociadas con una validación cruzada de 10 veces. Por el momento, esta columna se ignorará y discutiremos el remuestreo en profundidad en Capítulo 10.)\nLas funciones para las métricas que utilizan predicciones de clases discretas son idénticas a sus contrapartes binarias:\n\naccuracy(hpc_cv, obs, pred)\n## # A tibble: 1 × 3\n##   .metric  .estimator .estimate\n##   &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n## 1 accuracy multiclass     0.709\n\nmcc(hpc_cv, obs, pred)\n## # A tibble: 1 × 3\n##   .metric .estimator .estimate\n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n## 1 mcc     multiclass     0.515\n\nTenga en cuenta que, en estos resultados, aparece un .estimator “multiclase”. Al igual que “binario”, esto indica que se utilizó la fórmula para resultados con tres o más niveles de clase. El coeficiente de correlación de Matthews se diseñó originalmente para dos clases, pero se ha extendido a casos con más niveles de clase.\nExisten métodos para tomar métricas diseñadas para manejar resultados con solo dos clases y extenderlas para resultados con más de dos clases. Por ejemplo, una métrica como la sensibilidad mide la tasa de verdaderos positivos que, por definición, es específica de dos clases (es decir, “evento” y “no evento”). ¿Cómo se puede utilizar esta métrica en nuestros datos de ejemplo?\nExisten métodos contenedores que se pueden utilizar para aplicar sensibilidad a nuestro resultado de cuatro clases. Estas opciones son promedio macro, promedio macroponderado y micropromedio:\n\nEl promedio macro calcula un conjunto de métricas de uno contra todos utilizando las estadísticas estándar de dos clases. Estos están promediados.\nEl promedio macroponderado hace lo mismo, pero el promedio se pondera según el número de muestras de cada clase.\nEl micropromedio calcula la contribución de cada clase, las agrega y luego calcula una única métrica a partir de los agregados.\n\nConsulte Wu y Zhou (2017) y Opitz y Burst (2019) para obtener más información sobre cómo ampliar las métricas de clasificación a resultados con más de dos clases.\nUsando la sensibilidad como ejemplo, el cálculo habitual de dos clases es la relación entre el número de eventos predichos correctamente dividido por el número de eventos verdaderos. Los cálculos manuales para estos métodos de promediación son:\n\nclass_totals &lt;- \n  count(hpc_cv, obs, name = \"totals\") %&gt;% \n  mutate(class_wts = totals / sum(totals))\nclass_totals\n##   obs totals class_wts\n## 1  VF   1769   0.51024\n## 2   F   1078   0.31093\n## 3   M    412   0.11883\n## 4   L    208   0.05999\n\ncell_counts &lt;- \n  hpc_cv %&gt;% \n  group_by(obs, pred) %&gt;% \n  count() %&gt;% \n  ungroup()\n\n# Calcule las cuatro sensibilidades usando 1 contra todos\none_versus_all &lt;- \n  cell_counts %&gt;% \n  filter(obs == pred) %&gt;% \n  full_join(class_totals, by = \"obs\") %&gt;% \n  mutate(sens = n / totals)\none_versus_all\n## # A tibble: 4 × 6\n##   obs   pred      n totals class_wts  sens\n##   &lt;fct&gt; &lt;fct&gt; &lt;int&gt;  &lt;int&gt;     &lt;dbl&gt; &lt;dbl&gt;\n## 1 VF    VF     1620   1769    0.510  0.916\n## 2 F     F       647   1078    0.311  0.600\n## 3 M     M        79    412    0.119  0.192\n## 4 L     L       111    208    0.0600 0.534\n\n# Tres estimaciones diferentes:\none_versus_all %&gt;% \n  summarize(\n    macro = mean(sens), \n    macro_wts = weighted.mean(sens, class_wts),\n    micro = sum(n) / sum(totals)\n  )\n## # A tibble: 1 × 3\n##   macro macro_wts micro\n##   &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;\n## 1 0.560     0.709 0.709\n\nAfortunadamente, no es necesario implementar manualmente estos métodos de promedio. En cambio, las funciones yardstick pueden aplicar automáticamente estos métodos a través del argumento estimator:\n\nsensitivity(hpc_cv, obs, pred, estimator = \"macro\")\n## # A tibble: 1 × 3\n##   .metric     .estimator .estimate\n##   &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt;\n## 1 sensitivity macro          0.560\nsensitivity(hpc_cv, obs, pred, estimator = \"macro_weighted\")\n## # A tibble: 1 × 3\n##   .metric     .estimator     .estimate\n##   &lt;chr&gt;       &lt;chr&gt;              &lt;dbl&gt;\n## 1 sensitivity macro_weighted     0.709\nsensitivity(hpc_cv, obs, pred, estimator = \"micro\")\n## # A tibble: 1 × 3\n##   .metric     .estimator .estimate\n##   &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt;\n## 1 sensitivity micro          0.709\n\nCuando se trata de estimaciones de probabilidad, existen algunas métricas con análogos multiclase. Por ejemplo, Hand y Till (2001) determinó una técnica multiclase para curvas ROC. En este caso, todas las columnas de probabilidad de clase deben asignarse a la función:\n\nroc_auc(hpc_cv, obs, VF, F, M, L)\n## # A tibble: 1 × 3\n##   .metric .estimator .estimate\n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n## 1 roc_auc hand_till      0.829\n\nEl promedio macroponderado también está disponible como opción para aplicar esta métrica a un resultado multiclase:\n\nroc_auc(hpc_cv, obs, VF, F, M, L, estimator = \"macro_weighted\")\n## # A tibble: 1 × 3\n##   .metric .estimator     .estimate\n##   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;\n## 1 roc_auc macro_weighted     0.868\n\nFinalmente, todas estas métricas de rendimiento se pueden calcular utilizando agrupaciones dplyr. Recuerde que estos datos tienen una columna para los grupos de remuestreo. Aún no hemos analizado el remuestreo en detalle, pero observe cómo podemos pasar un marco de datos agrupados a la función métrica para calcular las métricas para cada grupo:\n\nhpc_cv %&gt;% \n  group_by(Resample) %&gt;% \n  accuracy(obs, pred)\n## # A tibble: 10 × 4\n##   Resample .metric  .estimator .estimate\n##   &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n## 1 Fold01   accuracy multiclass     0.726\n## 2 Fold02   accuracy multiclass     0.712\n## 3 Fold03   accuracy multiclass     0.758\n## 4 Fold04   accuracy multiclass     0.712\n## 5 Fold05   accuracy multiclass     0.712\n## 6 Fold06   accuracy multiclass     0.697\n## # ℹ 4 more rows\n\nLas agrupaciones también se traducen a los métodos autoplot(), y los resultados se muestran en Figura 9.4.\n\n# Cuatro curvas ROC 1 contra todos para cada pliegue\nhpc_cv %&gt;% \n  group_by(Resample) %&gt;% \n  roc_curve(obs, VF, F, M, L) %&gt;% \n  autoplot()\n\n\n\n\n\nFigura 9.4: Curvas ROC remuestreadas para cada una de las cuatro clases de resultados.\n\n\n\nEsta visualización nos muestra que todos los diferentes grupos se desempeñan más o menos igual, pero que la clase VF se predice mejor que las clases F o M, ya que las curvas ROC VF están más en la esquina superior izquierda. . Este ejemplo utiliza remuestreos como grupos, pero se puede utilizar cualquier agrupación de sus datos. Este método autoplot() puede ser un método de visualización rápida para la efectividad del modelo en todas las clases y/o grupos de resultados."
  },
  {
    "objectID": "10-resampling.html#métodos-de-remuestreo",
    "href": "10-resampling.html#métodos-de-remuestreo",
    "title": "10  Remuestrear para Evaluar el Rendimiento",
    "section": "\n10.2 Métodos de Remuestreo",
    "text": "10.2 Métodos de Remuestreo\nLos métodos de remuestreo son sistemas de simulación empíricos que emulan el proceso de utilizar algunos datos para modelar y diferentes datos para evaluación. La mayoría de los métodos de remuestreo son iterativos, lo que significa que este proceso se repite varias veces. El diagrama en Figura 10.1 ilustra cómo funcionan generalmente los métodos de remuestreo.\n\n\n\n\nFigura 10.1: Esquema de división de datos desde la división de datos inicial hasta el remuestreo\n\n\n\nEl remuestreo se realiza solo en el conjunto de entrenamiento, como se ve en Figura 10.1. El equipo de prueba no está involucrado. Para cada iteración de remuestreo, los datos se dividen en dos submuestras:\n\nEl modelo se ajusta a la conjunto de análisis.\nEl modelo se evalúa con el conjunto de evaluación.\n\nEstas dos submuestras son algo análogas a los conjuntos de entrenamiento y prueba. Nuestro lenguaje de análisis y evaluación evita confusiones con la división inicial de los datos. Estos conjuntos de datos son mutuamente excluyentes. El esquema de partición utilizado para crear los conjuntos de análisis y evaluación suele ser la característica definitoria del método.\nSupongamos que se realizan 20 iteraciones de remuestreo. Esto significa que se ajustan 20 modelos separados a los conjuntos de análisis y los conjuntos de evaluación correspondientes producen 20 conjuntos de estadísticas de desempeño. La estimación final del rendimiento de un modelo es el promedio de las 20 réplicas de las estadísticas. Este promedio tiene muy buenas propiedades de generalización y es mucho mejor que las estimaciones de resustitución.\nLa siguiente sección define varios métodos de remuestreo comúnmente utilizados y analiza sus ventajas y desventajas.\n\n10.2.1 Validación cruzada\nLa validación cruzada es un método de remuestreo bien establecido. Si bien existen varias variaciones, el método de validación cruzada más común es la validación cruzada V. Los datos se dividen aleatoriamente en V conjuntos de tamaño aproximadamente igual (llamados pliegues). A modo de ilustración, V = 3 se muestra en Figura 10.2 para un conjunto de datos de 30 puntos de configuración de entrenamiento con asignaciones de pliegues aleatorios. El número dentro de los símbolos es el número de muestra.\n\n\n\n\nFigura 10.2: La validación cruzada de pliegues en V asigna aleatoriamente datos a los pliegues\n\n\n\nEl color de los símbolos en Figura 10.2 representa sus pliegues asignados aleatoriamente. El muestreo estratificado también es una opción para asignar pliegues (analizado anteriormente en Sección 5.1).\nPara una validación cruzada triple, las tres iteraciones de remuestreo se ilustran en Figura 10.3. Para cada iteración, se reserva un pliegue para las estadísticas de evaluación y los pliegues restantes son sustrato para el modelo. Este proceso continúa en cada pliegue, de modo que tres modelos producen tres conjuntos de estadísticas de rendimiento.\n\n\n\n\nFigura 10.3: Uso de datos de validación cruzada V-fold\n\n\n\nCuando V = 3, los conjuntos de análisis son 2/3 del conjunto de entrenamiento y cada conjunto de evaluación es un 1/3 distinto. La estimación final del remuestreo del rendimiento promedia cada una de las V réplicas.\nUsar V = 3 es una buena opción para ilustrar la validación cruzada, pero en la práctica es una mala opción porque es demasiado baja para generar estimaciones confiables. En la práctica, los valores de V suelen ser 5 o 10; Generalmente preferimos la validación cruzada 10 veces como valor predeterminado porque es lo suficientemente grande para obtener buenos resultados en la mayoría de las situaciones.\n\n¿Cuáles son los efectos de cambiar V? Los valores más grandes dan como resultado estimaciones de remuestreo con un sesgo pequeño pero una varianza sustancial. Los valores más pequeños de V tienen un sesgo grande pero una varianza baja. Preferimos 10 veces, ya que la replicación reduce el ruido, pero no el sesgo.3\n\nLa entrada principal es el marco de datos del conjunto de entrenamiento, así como el número de pliegues (por defecto, 10):\n\nset.seed(1001)\names_folds &lt;- vfold_cv(ames_train, v = 10)\names_folds\n## #  10-fold cross-validation \n## # A tibble: 10 × 2\n##   splits             id    \n##   &lt;list&gt;             &lt;chr&gt; \n## 1 &lt;split [2107/235]&gt; Fold01\n## 2 &lt;split [2107/235]&gt; Fold02\n## 3 &lt;split [2108/234]&gt; Fold03\n## 4 &lt;split [2108/234]&gt; Fold04\n## 5 &lt;split [2108/234]&gt; Fold05\n## 6 &lt;split [2108/234]&gt; Fold06\n## # ℹ 4 more rows\n\nLa columna denominada splits contiene información sobre cómo dividir los datos (similar al objeto utilizado para crear la partición de entrenamiento/prueba inicial). Si bien cada fila de “divisiones” tiene una copia incrustada de todo el conjunto de entrenamiento, R es lo suficientemente inteligente como para no hacer copias de los datos en la memoria.4 El método de impresión dentro del tibble muestra la frecuencia de cada: [2107/235] indica que alrededor de dos mil muestras están en el conjunto de análisis y 235 están en ese conjunto de evaluación en particular.\nEstos objetos también contienen siempre una columna de caracteres llamada id que etiqueta la partición.5\nPara recuperar manualmente los datos particionados, las funciones analysis() y assessment() devuelven los marcos de datos correspondientes:\n\n# Para el primer pliegue:\names_folds$splits[[1]] %&gt;% analysis() %&gt;% dim()\n## [1] 2107   74\n\nLos paquetes tidymodels, como tune, contienen interfaces de usuario de alto nivel para que funciones como analysis() no sean generalmente necesarias para el trabajo diario. Sección 10.3 demuestra una función para ajustar un modelo sobre estos remuestreos.\nExiste una variedad de variaciones de validación cruzada; repasaremos los más importantes.\nValidación cruzada repetida\nLa variación más importante de la validación cruzada es la validación cruzada repetida V veces. Dependiendo del tamaño de los datos u otras características, la estimación de remuestreo producida por la validación cruzada V veces puede ser excesivamente ruidosa.6 Como ocurre con muchos problemas estadísticos, una forma de reducir el ruido es recopilar más datos . Para la validación cruzada, esto significa promediar más de V estadísticas.\nPara crear repeticiones R de validación cruzada de pliegues V, se realiza el mismo proceso de generación de pliegues R veces para generar colecciones R de particiones V. Ahora, en lugar de promediar las estadísticas V, las estadísticas \\(V \\times R\\) producen la estimación final del remuestreo. Debido al teorema del límite central, las estadísticas resumidas de cada modelo tienden a una distribución normal, siempre que tengamos muchos datos relativos a \\(V \\times R\\).\nConsideremos los datos de Ames. En promedio, la validación cruzada 10 veces utiliza conjuntos de evaluación que contienen aproximadamente propiedades 234. Si RMSE es la estadística elegida, podemos denotar la desviación estándar de esa estimación como \\(\\sigma\\). Con una validación cruzada simple de 10 veces, el error estándar del RMSE medio es \\(\\sigma/\\sqrt{10}\\). Si esto es demasiado ruidoso, las repeticiones reducen el error estándar a \\(\\sigma/\\sqrt{10R}\\). Para una validación cruzada de 10 veces con réplicas de \\(R\\), el gráfico en Figura 10.4 muestra qué tan rápido disminuye el error estándar7 con las réplicas.\n\n\n\n\nFigura 10.4: Relación entre la varianza relativa en las estimaciones de desempeño versus el número de repeticiones de validación cruzada\n\n\n\nUn mayor número de réplicas tiende a tener menos impacto en el error estándar. Sin embargo, si el valor de referencia de \\(\\sigma\\) es imprácticamente grande, los rendimientos decrecientes de la replicación aún pueden valer los costos computacionales adicionales.\nPara crear repeticiones, invoque vfold_cv() con un argumento adicional repeats:\n\nvfold_cv(ames_train, v = 10, repeats = 5)\n## #  10-fold cross-validation repeated 5 times \n## # A tibble: 50 × 3\n##   splits             id      id2   \n##   &lt;list&gt;             &lt;chr&gt;   &lt;chr&gt; \n## 1 &lt;split [2107/235]&gt; Repeat1 Fold01\n## 2 &lt;split [2107/235]&gt; Repeat1 Fold02\n## 3 &lt;split [2108/234]&gt; Repeat1 Fold03\n## 4 &lt;split [2108/234]&gt; Repeat1 Fold04\n## 5 &lt;split [2108/234]&gt; Repeat1 Fold05\n## 6 &lt;split [2108/234]&gt; Repeat1 Fold06\n## # ℹ 44 more rows\n\nValidación cruzada de dejar uno fuera\nUna variación de la validación cruzada es la validación cruzada de dejar uno fuera (LOO). Si hay \\(n\\) muestras de conjuntos de entrenamiento, \\(n\\) modelos se ajustan usando \\(n-1\\) filas del conjunto de entrenamiento. Cada modelo predice el único punto de datos excluido. Al final del remuestreo, las predicciones \\(n\\) se combinan para producir una única estadística de rendimiento.\nLos métodos de dejar uno fuera son deficientes en comparación con casi cualquier otro método. Para cualquier cosa que no sea una muestra patológicamente pequeña, LOO es computacionalmente excesivo y puede que no tenga buenas propiedades estadísticas. Aunque el paquete rsample contiene una función loo_cv(), estos objetos generalmente no están integrados en los marcos más amplios de tidymodels.\nValidación cruzada de Monte Carlo\nOtra variante de la validación cruzada V es la validación cruzada de Monte Carlo (MCCV, Xu y Liang (2001)). Al igual que la validación cruzada V veces, asigna una proporción fija de datos a los conjuntos de evaluación. La diferencia entre MCCV y la validación cruzada regular es que, para MCCV, esta proporción de datos se selecciona aleatoriamente cada vez. Esto da como resultado conjuntos de evaluación que no son mutuamente excluyentes. Para crear estos objetos de remuestreo:\n\nmc_cv(ames_train, prop = 9/10, times = 20)\n## # Monte Carlo cross-validation (0.9/0.1) with 20 resamples  \n## # A tibble: 20 × 2\n##   splits             id        \n##   &lt;list&gt;             &lt;chr&gt;     \n## 1 &lt;split [2107/235]&gt; Resample01\n## 2 &lt;split [2107/235]&gt; Resample02\n## 3 &lt;split [2107/235]&gt; Resample03\n## 4 &lt;split [2107/235]&gt; Resample04\n## 5 &lt;split [2107/235]&gt; Resample05\n## 6 &lt;split [2107/235]&gt; Resample06\n## # ℹ 14 more rows\n\n\n10.2.2 Conjuntos de validación\nEn Sección 5.2, analizamos brevemente el uso de un conjunto de validación, una única partición que se reserva para estimar el rendimiento separada del conjunto de prueba. Cuando se utiliza un conjunto de validación, el conjunto de datos inicial disponible se divide en un conjunto de entrenamiento, un conjunto de validación y un conjunto de prueba (consulte Figura 10.5).\n\n\n\n\nFigura 10.5: Una división inicial de tres vías en conjuntos de entrenamiento, pruebas y validación.\n\n\n\nLos conjuntos de validación se utilizan a menudo cuando el conjunto de datos original es muy grande. En este caso, una única partición grande puede ser adecuada para caracterizar el rendimiento del modelo sin tener que realizar múltiples iteraciones de remuestreo.\nCon el paquete rsample, un conjunto de validación es como cualquier otro objeto de remuestreo; este tipo se diferencia únicamente en que tiene una única iteración.8 Figura 10.6 muestra este esquema.\n\n\n\n\nFigura 10.6: Una división inicial bidireccional en entrenamiento y pruebas con un conjunto de validación adicional dividido en el conjunto de entrenamiento\n\n\n\nPara construir sobre el código de Sección 5.2, la función validation_set() puede tomar los resultados de initial_validation_split() y convertirlos en un objeto rset similar a los producidos. mediante funciones como vfold_cv():\n\n# Previamente:\n\nset.seed(52)\n# Para dedicar el 60 % al entrenamiento, el 20 % a la validación y el 20 % a las pruebas:\names_val_split &lt;- initial_validation_split(ames, prop = c(0.6, 0.2))\names_val_split\n## &lt;Training/Validation/Testing/Total&gt;\n## &lt;1758/586/586/2930&gt;\n\n# Objeto utilizado para remuestreo: \nval_set &lt;- validation_set(ames_val_split)\nval_set\n## # A tibble: 1 × 2\n##   splits             id        \n##   &lt;list&gt;             &lt;chr&gt;     \n## 1 &lt;split [1758/586]&gt; validation\n\nComo verá en ?sec-resampling-rendimiento, la función fit_resamples() se utilizará para calcular estimaciones correctas de rendimiento mediante el remuestreo. El objeto val_set se puede utilizar en esta y otras funciones aunque sea una única “muestra” de los datos.\n\n10.2.3 Bootstrapping\nEl remuestreo Bootstrap se inventó originalmente como un método para aproximar la distribución muestral de estadísticas cuyas propiedades teóricas son intratables (Davison y Hinkley 1997). Usarlo para estimar el desempeño del modelo es una aplicación secundaria del método.\nUna muestra bootstrap del conjunto de entrenamiento es una muestra que tiene el mismo tamaño que el conjunto de entrenamiento pero que se extrae con reemplazo. Esto significa que algunos puntos de datos del conjunto de entrenamiento se seleccionan varias veces para el conjunto de análisis. Cada punto de datos tiene una probabilidad 63.2% de ser incluido en el conjunto de entrenamiento al menos una vez. El conjunto de evaluación contiene todas las muestras del conjunto de entrenamiento que no fueron seleccionadas para el conjunto de análisis (en promedio, con 36.8% del conjunto de entrenamiento). Al realizar el arranque, el conjunto de evaluación a menudo se denomina muestra fuera de la bolsa.\nPara un conjunto de entrenamiento de 30 muestras, en la siguiente figura se muestra un esquema de tres muestras bootstrap Figura 10.7.\n\n\n\n\nFigura 10.7: Uso de datos Bootstraping\n\n\n\nTenga en cuenta que los tamaños de los conjuntos de evaluación varían.\nUsando el paquete rsample, podemos crear tales remuestreos de bootstrap:\n\nbootstraps(ames_train, times = 5)\n## # Bootstrap sampling \n## # A tibble: 5 × 2\n##   splits             id        \n##   &lt;list&gt;             &lt;chr&gt;     \n## 1 &lt;split [2342/867]&gt; Bootstrap1\n## 2 &lt;split [2342/869]&gt; Bootstrap2\n## 3 &lt;split [2342/859]&gt; Bootstrap3\n## 4 &lt;split [2342/858]&gt; Bootstrap4\n## 5 &lt;split [2342/873]&gt; Bootstrap5\n\nLas muestras Bootstrap producen estimaciones de rendimiento que tienen una varianza muy baja (a diferencia de la validación cruzada) pero tienen un sesgo pesimista significativo. Esto significa que, si la precisión real de un modelo es del 90%, el bootstrap tendería a estimar que el valor es inferior al 90%. La cantidad de sesgo no se puede determinar empíricamente con suficiente precisión. Además, la cantidad de sesgo cambia a lo largo de la escala de la métrica de desempeño. Por ejemplo, es probable que el sesgo sea diferente cuando la precisión es del 90 % y cuando es del 70 %.\nEl bootstrap también se utiliza en muchos modelos. Por ejemplo, el modelo de random forest mencionado anteriormente contenía 1000 árboles de decisión individuales. Cada árbol fue producto de una muestra de bootstrap diferente del conjunto de entrenamiento.\n\n10.2.4 Remuestreo continuo del origen de la previsión\nCuando los datos tienen un fuerte componente temporal, un método de remuestreo debería respaldar el modelado para estimar tendencias estacionales y otras tendencias temporales dentro de los datos. Una técnica que muestrea aleatoriamente valores del conjunto de entrenamiento puede alterar la capacidad del modelo para estimar estos patrones.\nEl remuestreo continuo del origen del pronóstico (Hyndman y Athanasopoulos 2018) proporciona un método que emula cómo los datos de series de tiempo a menudo se dividen en la práctica, estimando el modelo con datos históricos y evaluándolo con los datos más recientes. Para este tipo de remuestreo, se especifica el tamaño de los conjuntos de análisis y evaluación iniciales. La primera iteración de remuestreo utiliza estos tamaños, comenzando desde el principio de la serie. La segunda iteración utiliza los mismos tamaños de datos pero cambia en un número determinado de muestras.\nA modo de ilustración, se volvió a muestrear un conjunto de entrenamiento de quince muestras con un tamaño de análisis de ocho muestras y un tamaño de conjunto de evaluación de tres. La segunda iteración descarta la primera muestra del conjunto de entrenamiento y ambos conjuntos de datos avanzan uno. Esta configuración da como resultado cinco remuestreos, como se muestra en Figura 10.8.\n\n\n\n\nFigura 10.8: Uso de datos para el remuestreo continuo del origen de la previsión\n\n\n\nAquí hay dos configuraciones diferentes de este método:\n\nEl conjunto de análisis puede crecer acumulativamente (en lugar de permanecer del mismo tamaño). Después del primer conjunto de análisis inicial, se pueden acumular nuevas muestras sin descartar los datos anteriores.\nLos remuestreos no necesitan incrementarse en uno. Por ejemplo, para conjuntos de datos grandes, el bloque incremental podría ser una semana o un mes en lugar de un día.\n\nPara los datos de un año, supongamos que seis conjuntos de bloques de 30 días definen el conjunto de análisis. Para conjuntos de evaluación de 30 días con un salto de 29 días, podemos usar el paquete rsample para especificar:\n\ntime_slices &lt;- \n  tibble(x = 1:365) %&gt;% \n  rolling_origin(initial = 6 * 30, assess = 30, skip = 29, cumulative = FALSE)\n\ndata_range &lt;- function(x) {\n  summarize(x, first = min(x), last = max(x))\n}\n\nmap_dfr(time_slices$splits, ~   analysis(.x) %&gt;% data_range())\n## # A tibble: 6 × 2\n##   first  last\n##   &lt;int&gt; &lt;int&gt;\n## 1     1   180\n## 2    31   210\n## 3    61   240\n## 4    91   270\n## 5   121   300\n## 6   151   330\nmap_dfr(time_slices$splits, ~ assessment(.x) %&gt;% data_range())\n## # A tibble: 6 × 2\n##   first  last\n##   &lt;int&gt; &lt;int&gt;\n## 1   181   210\n## 2   211   240\n## 3   241   270\n## 4   271   300\n## 5   301   330\n## 6   331   360"
  },
  {
    "objectID": "11-comparing-models.html#métodos-simples-de-prueba-de-hipótesis",
    "href": "11-comparing-models.html#métodos-simples-de-prueba-de-hipótesis",
    "title": "11  Comparación de Modelos con Remuestreo",
    "section": "\n11.3 Métodos simples de prueba de hipótesis",
    "text": "11.3 Métodos simples de prueba de hipótesis\nPodemos utilizar pruebas de hipótesis simples para hacer comparaciones formales entre modelos. Considere el conocido modelo estadístico lineal:\n\\[y_{ij} = \\beta_0 + \\beta_1x_{i1} + \\ldots + \\beta_px_{ip} + \\epsilon_{ij}\\]\nEste modelo versátil se utiliza para crear modelos de regresión, además de ser la base de la popular técnica de análisis de varianza (ANOVA) para comparar grupos. Con el modelo ANOVA, los predictores (\\(x_{ij}\\)) son variables binarias ficticias para diferentes grupos. A partir de esto, los parámetros \\(\\beta\\) estiman si dos o más grupos son diferentes entre sí utilizando técnicas de prueba de hipótesis.\nEn nuestra situación específica, el ANOVA también puede realizar comparaciones de modelos. Supongamos que las estadísticas individuales \\(R^2\\) remuestreadas sirven como datos de resultado (es decir, \\(y_{ij}\\)) y los modelos como predictores en el modelo ANOVA. Se muestra una muestra de esta estructura de datos en Tabla 11.1.\n\n\n\n\nTabla 11.1: Modelar estadísticas de rendimiento como un conjunto de datos para análisis.\n\nY = rsq\nmodel\nX1\nX2\nX3\nid\n\n\n\n0.8108\nbasic_lm\n0\n0\n0\nFold01\n\n\n0.8134\ninteract_lm\n1\n0\n0\nFold01\n\n\n0.8615\nrandom_forest\n0\n1\n0\nFold01\n\n\n0.8217\nsplines_lm\n0\n0\n1\nFold01\n\n\n0.8045\nbasic_lm\n0\n0\n0\nFold02\n\n\n0.8103\ninteract_lm\n1\n0\n0\nFold02\n\n\n\n\n\n\n\n\nLas columnas X1, X2 y X3 de la tabla son indicadores de los valores de la columna modelo. Su orden se definió de la misma manera que R los definiría, ordenados alfabéticamente por modelo.\nPara nuestra comparación de modelos, el modelo ANOVA específico es:\n\\[y_{ij} = \\beta_0 + \\beta_1x_{i1} + \\beta_2x_{i2} + \\beta_3x_{i3} + \\epsilon_{ij}\\]\ndonde\n\n\\(\\beta_0\\) es la estimación del estadístico \\(R^2\\) medio para los modelos lineales básicos (es decir, sin splines ni interacciones),\n\\(\\beta_1\\) es el cambio en la media \\(R^2\\) cuando se agregan interacciones al modelo lineal básico,\n\\(\\beta_2\\) es el cambio en la media \\(R^2\\) entre el modelo lineal básico y el modelo de random forest, y\n\\(\\beta_3\\) es el cambio en la media \\(R^2\\) entre el modelo lineal básico y uno con interacciones y splines.\n\nA partir de estos parámetros del modelo, se generan pruebas de hipótesis y valores p para comparar modelos estadísticamente, pero debemos lidiar con cómo manejar el efecto de remuestreo a remuestre. Históricamente, los grupos de remuestreo se consideraban un efecto de bloque y se agregaba un término apropiado al modelo. Alternativamente, el efecto de remuestreo podría considerarse un efecto aleatorio en el que estas remuestras particulares se extrajeron al azar de una población más grande de posibles remuestras. Sin embargo, no estamos realmente interesados en estos efectos; sólo queremos ajustarlos en el modelo para que las varianzas de las diferencias interesantes se estimen adecuadamente.\nTratar las remuestras como efectos aleatorios es teóricamente atractivo. Los métodos para ajustar un modelo ANOVA con este tipo de efecto aleatorio podrían incluir el modelo lineal mixto (Faraway 2016) o un modelo jerárquico bayesiano (que se muestra en la siguiente sección).\nUn método simple y rápido para comparar dos modelos a la vez es usar las diferencias en los valores de \\(R^2\\) como datos de resultado en el modelo ANOVA. Dado que los resultados coinciden mediante remuestreo, las diferencias no contienen el efecto de remuestreo a remuestre y, por esta razón, el modelo ANOVA estándar es apropiado. Para ilustrar, esta llamada a lm() prueba la diferencia entre dos de los modelos de regresión lineal:\n\ncompare_lm &lt;- \n  rsq_wider %&gt;% \n  mutate(difference = splines_lm - basic_lm)\n\nlm(difference ~ 1, data = compare_lm) %&gt;% \n  tidy(conf.int = TRUE) %&gt;% \n  select(estimate, p.value, starts_with(\"conf\"))\n## # A tibble: 1 × 4\n##   estimate   p.value conf.low conf.high\n##      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n## 1  0.00913 0.0000256  0.00650    0.0118\n\n# Alternativamente, también se podría utilizar una prueba t pareada: \nrsq_wider %&gt;% \n  with( t.test(splines_lm, basic_lm, paired = TRUE) ) %&gt;%\n  tidy() %&gt;% \n  select(estimate, p.value, starts_with(\"conf\"))\n## # A tibble: 1 × 4\n##   estimate   p.value conf.low conf.high\n##      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n## 1  0.00913 0.0000256  0.00650    0.0118\n\nPodríamos evaluar cada diferencia por pares de esta manera. Tenga en cuenta que el valor p indica una señal estadísticamente significativa; la colección de términos splines para longitud y latitud parece tener un efecto. Sin embargo, la diferencia en \\(R^2\\) se estima en 0.91%. Si nuestro tamaño de efecto práctico fuera del 2%, es posible que no consideráramos que valga la pena incluir estos términos en el modelo.\n\nYa hemos mencionado brevemente los valores p, pero ¿qué son realmente? De Wasserstein y Lazar (2016): “Informalmente, un valor p es la probabilidad, según un modelo estadístico específico, de que un resumen estadístico de los datos (por ejemplo, la diferencia de medias muestrales entre dos grupos comparados) sea igual o más extremo que su valor observado.”\nEn otras palabras, si este análisis se repitiera una gran cantidad de veces bajo la hipótesis nula de que no hay diferencias, el valor p refleja cuán extremos serían nuestros resultados observados en comparación."
  },
  {
    "objectID": "12-tuning-parameters.html#parámetros-del-modelo",
    "href": "12-tuning-parameters.html#parámetros-del-modelo",
    "title": "12  Ajuste de Modelos y los Peligros del Sobreajuste",
    "section": "\n12.1 Parámetros del modelo",
    "text": "12.1 Parámetros del modelo\nEn la regresión lineal ordinaria, hay dos parámetros \\(\\beta_0\\) y \\(\\beta_1\\) del modelo:\n\\[ y_i = \\beta_0 + \\beta_1 x_i + \\epsilon_i\\]\nCuando tenemos los datos del resultado (\\(y\\)) y del predictor (\\(x\\)), podemos estimar los dos parámetros \\(\\beta_0\\) y \\(\\beta_1\\):\n\\[\\hat \\beta_1 = \\frac{\\sum_i (y_i-\\bar{y})(x_i-\\bar{x})}{\\sum_i(x_i-\\bar{x})^2}\\]\ny\n\\[\\hat \\beta_0 = \\bar{y}-\\hat \\beta_1 \\bar{x}.\\]\nPodemos estimar directamente estos valores a partir de los datos de este modelo de ejemplo porque son analíticamente manejables; Si tenemos los datos, entonces podemos estimar estos parámetros del modelo.\n\nHay muchas situaciones en las que un modelo tiene parámetros que no pueden estimarse directamente a partir de los datos.\n\nPara el modelo KNN, la ecuación de predicción para un nuevo valor \\(x_0\\) es\n\\[\\hat y = \\frac{1}{K}\\sum_{\\ell = 1}^K x_\\ell^*\\]\ndonde \\(K\\) es el número de vecinos y \\(x_\\ell^*\\) son los valores de \\(K\\) más cercanos a \\(x_0\\) en el conjunto de entrenamiento. El modelo en sí no está definido por una ecuación modelo; en cambio, la ecuación de predicción anterior lo define. Esta característica, junto con la posible intratabilidad de la medida de distancia, hace imposible crear un conjunto de ecuaciones que puedan resolverse para \\(K\\) (de forma iterativa o no). El número de vecinos tiene un profundo impacto en el modelo; gobierna la flexibilidad de la frontera de clase. Para valores pequeños de \\(K\\), el límite es muy elaborado, mientras que para valores grandes, puede ser bastante suave.\nEl número de vecinos más cercanos es un buen ejemplo de parámetro de ajuste o hiperparámetro que no se puede estimar directamente a partir de los datos."
  },
  {
    "objectID": "12-tuning-parameters.html#dos-estrategias-generales-para-la-optimización.",
    "href": "12-tuning-parameters.html#dos-estrategias-generales-para-la-optimización.",
    "title": "12  Ajuste de Modelos y los Peligros del Sobreajuste",
    "section": "\n12.5 Dos estrategias generales para la optimización.",
    "text": "12.5 Dos estrategias generales para la optimización.\nLa optimización de los parámetros de ajuste generalmente se divide en una de dos categorías: búsqueda en cuadrícula y búsqueda iterativa.\nBúsqueda de cuadrícula es cuando predefinimos un conjunto de valores de parámetros para evaluar. Las principales opciones involucradas en la búsqueda de cuadrículas son cómo hacer la cuadrícula y cuántas combinaciones de parámetros evaluar. La búsqueda de cuadrícula a menudo se considera ineficiente ya que la cantidad de puntos de cuadrícula necesarios para cubrir el espacio de parámetros puede volverse inmanejable debido a la maldición de la dimensionalidad. Hay algo de verdad en esta preocupación, pero es más cierta cuando el proceso no está optimizado. Esto se analiza con más detalle en el Capítulo 13.\nBúsqueda iterativa o búsqueda secuencial es cuando descubrimos secuencialmente nuevas combinaciones de parámetros en función de resultados anteriores. Casi cualquier método de optimización no lineal es apropiado, aunque algunos son más eficientes que otros. En algunos casos, se requiere un conjunto inicial de resultados para una o más combinaciones de parámetros para iniciar el proceso de optimización. La búsqueda iterativa se analiza con más detalle en el Capítulo 14.\nFigura 12.6 muestra dos paneles que demuestran estos dos enfoques para una situación con dos parámetros de ajuste que oscilan entre cero y uno. En cada uno, un conjunto de contornos muestra la relación verdadera (simulada) entre los parámetros y el resultado. Los resultados óptimos se encuentran en las esquinas superiores derechas.\n\n\n\n\nFigura 12.6: Ejemplos de ajuste de cuadrícula predefinido y método de búsqueda iterativo. Las líneas representan contornos de una métrica de desempeño; es mejor en el lado superior derecho de la trama.\n\n\n\nEl panel izquierdo de Figura 12.6 muestra un tipo de cuadrícula llamada diseño de relleno de espacio. Este es un tipo de diseño experimental diseñado para cubrir el espacio de parámetros de manera que las combinaciones de parámetros de ajuste no estén cercanas entre sí. Los resultados de este diseño no colocan ningún punto exactamente en la ubicación verdaderamente óptima. Sin embargo, un punto está en la vecindad general y probablemente tendría resultados de métricas de rendimiento que estén dentro del ruido del valor más óptimo.\nEl panel derecho de Figura 12.6 ilustra los resultados de un método de búsqueda global: el método simplex de Nelder-Mead (Olsson y Nelson 1975). El punto de partida está en la parte inferior izquierda del espacio de parámetros. La búsqueda serpentea por el espacio hasta llegar a la ubicación óptima, donde se esfuerza por acercarse lo más posible al mejor valor numérico. Este método de búsqueda en particular, aunque eficaz, no es conocido por su eficiencia; requiere muchas evaluaciones de funciones, especialmente cerca de los valores óptimos. El Capítulo 14 analiza algoritmos de búsqueda más eficientes.\n\nLas estrategias híbridas también son una opción y pueden funcionar bien. Después de una búsqueda inicial de cuadrícula, puede comenzar una optimización secuencial a partir de la mejor combinación de cuadrícula.\n\nEn los dos capítulos siguientes se analizan en detalle ejemplos de estas estrategias. Antes de continuar, aprendamos cómo trabajar con objetos de parámetros de ajuste en tidymodels, usando el paquete dials."
  },
  {
    "objectID": "12-tuning-parameters.html#resumen-del-capítulo",
    "href": "12-tuning-parameters.html#resumen-del-capítulo",
    "title": "12  Ajuste de Modelos y los Peligros del Sobreajuste",
    "section": "\n12.7 Resumen del capítulo",
    "text": "12.7 Resumen del capítulo\nEste capítulo presentó el proceso de ajuste de los hiperparámetros del modelo que no se pueden estimar directamente a partir de los datos. Ajustar dichos parámetros puede conducir a un sobreajuste, a menudo al permitir que un modelo se vuelva demasiado complejo, por lo que es importante utilizar conjuntos de datos remuestreados junto con métricas apropiadas para la evaluación. Hay dos estrategias generales para determinar los valores correctos, la búsqueda en cuadrícula y la búsqueda iterativa, que exploraremos en profundidad en los dos capítulos siguientes. En tidymodels, la función tune() se usa para identificar parámetros para optimización, y las funciones del paquete dials pueden extraer e interactuar con objetos de parámetros de ajuste.\n\n\n\n\nDobson, A. 1999. An introduction to generalized linear models. Chapman; Hall: Boca Raton.\n\n\nFriedman, J. 2001. «Greedy Function Approximation: A Gradient Boosting Machine». Annals of Statistics 29 (5): 1189-1232.\n\n\nGoodfellow, I, Y Bengio, y A Courville. 2016. Deep Learning. MIT Press.\n\n\nLittell, R, J Pendergast, y R Natarajan. 2000. «Modelling covariance structure in the analysis of repeated measures data». Statistics in Medicine 19 (13): 1793-1819.\n\n\nOlsson, D, y L Nelson. 1975. «The Nelder-Mead Simplex Procedure for Function Minimization». Technometrics 17 (1): 45-51.\n\n\nThomas, R, y D Uminsky. 2020. «The Problem with Metrics is a Fundamental Problem for AI». https://arxiv.org/abs/2002.08512.\n\n\nWundervald, B, A Parnell, y K Domijan. 2020. «Generalizing Gain Penalization for Feature Selection in Tree-based Models». https://arxiv.org/abs/2006.07515."
  },
  {
    "objectID": "16-dimensionality-reduction.html#qué-problemas-puede-resolver-la-reducción-de-dimensionalidad",
    "href": "16-dimensionality-reduction.html#qué-problemas-puede-resolver-la-reducción-de-dimensionalidad",
    "title": "16  Reducción de Dimensionalidad",
    "section": "\n16.1 ¿Qué problemas puede resolver la reducción de dimensionalidad?",
    "text": "16.1 ¿Qué problemas puede resolver la reducción de dimensionalidad?\nLa reducción de dimensionalidad se puede utilizar en ingeniería de características o en análisis de datos exploratorios. Por ejemplo, en experimentos de biología de alta dimensión, una de las primeras tareas, antes de cualquier modelado, es determinar si hay tendencias no deseadas en los datos (por ejemplo, efectos no relacionados con la cuestión de interés, como la transferencia de laboratorio a laboratorio). diferencias de laboratorio). Depurar los datos es difícil cuando hay cientos de miles de dimensiones y la reducción de la dimensionalidad puede ser una ayuda para el análisis exploratorio de datos.\nOtra posible consecuencia de tener una multitud de predictores es el posible daño a un modelo. El ejemplo más simple es un método como la regresión lineal ordinaria donde la cantidad de predictores debe ser menor que la cantidad de puntos de datos utilizados para ajustar el modelo. Otro problema es la multicolinealidad, donde las correlaciones entre predictores pueden afectar negativamente las operaciones matemáticas utilizadas para estimar un modelo. Si hay un número extremadamente grande de predictores, es bastante improbable que haya un número igual de efectos subyacentes reales. Los predictores pueden estar midiendo los mismos efectos latentes y, por lo tanto, dichos predictores estarán altamente correlacionados. Muchas técnicas de reducción de dimensionalidad prosperan en esta situación. De hecho, la mayoría puede ser eficaz sólo cuando existen relaciones entre predictores que puedan explotarse.\n\nAl iniciar un nuevo proyecto de modelado, reducir las dimensiones de los datos puede proporcionar cierta intuición sobre cuán difícil puede ser el problema de modelado.\n\nEl análisis de componentes principales (PCA) es uno de los métodos más sencillos para reducir el número de columnas en el conjunto de datos porque se basa en métodos lineales y no está supervisado (es decir, no considera los datos de resultados). Para un problema de clasificación de alta dimensión, un gráfico inicial de los componentes principales del PCA podría mostrar una separación clara entre las clases. Si este es el caso, entonces es bastante seguro asumir que un clasificador lineal podría hacer un buen trabajo. Sin embargo, lo contrario no es cierto; la falta de separación no significa que el problema sea insuperable.\nLos métodos de reducción de dimensionalidad discutidos en este capítulo generalmente no son métodos de selección de características. Los métodos como PCA representan los predictores originales utilizando un subconjunto más pequeño de características nuevas. Se requieren todos los predictores originales para calcular estas nuevas características. La excepción a esto son los métodos escasos que tienen la capacidad de eliminar por completo el impacto de los predictores al crear nuevas funciones.\n\nEste capítulo tiene dos objetivos:\n\nDemuestre cómo utilizar recetas para crear un pequeño conjunto de funciones que capturen los aspectos principales del conjunto de predictores original.\nDescribir cómo se pueden usar las recetas por sí solas (en lugar de usarse en un objeto de flujo de trabajo, como en Sección 8.2).\n\n\nEsto último resulta útil a la hora de probar o depurar una receta. Sin embargo, como se describe en Sección 8.2, la mejor manera de utilizar una receta para modelar es desde un objeto de flujo de trabajo.\nAdemás del paquete tidymodels, este capítulo utiliza los siguientes paquetes: baguette, beans, bestNormalize, corrplot, discrim, embed, ggforce, klaR, learntidymodels,1 mixOmics,2 y uwot."
  },
  {
    "objectID": "16-dimensionality-reduction.html#una-receta-inicial",
    "href": "16-dimensionality-reduction.html#una-receta-inicial",
    "title": "16  Reducción de Dimensionalidad",
    "section": "\n16.3 Una Receta Inicial",
    "text": "16.3 Una Receta Inicial\nEs hora de mirar los datos de los beans en un espacio más pequeño. Podemos comenzar con una receta básica para preprocesar los datos antes de cualquier paso de reducción de dimensionalidad. Varios predictores son razones y, por lo tanto, es probable que tengan distribuciones sesgadas. Estas distribuciones pueden causar estragos en los cálculos de varianza (como los que se utilizan en PCA). El paquete bestNormalize tiene un paso que puede imponer una distribución simétrica para los predictores. Usaremos esto para mitigar el problema de las distribuciones sesgadas:\n\nlibrary(bestNormalize)\nbean_rec &lt;-\n  # Utilice los datos de entrenamiento del objeto dividido bean_val\n  recipe(class ~ ., data = bean_train) %&gt;%\n  step_zv(all_numeric_predictors()) %&gt;%\n  step_orderNorm(all_numeric_predictors()) %&gt;% \n  step_normalize(all_numeric_predictors())\n\n\nRecuerde que al invocar la función recipe() los pasos no se estiman ni ejecutan de ninguna manera.\n\nEsta receta se ampliará con pasos adicionales para los análisis de reducción de dimensionalidad. Antes de hacerlo, repasemos cómo se puede utilizar una receta fuera de un flujo de trabajo."
  },
  {
    "objectID": "16-dimensionality-reduction.html#técnicas-de-extracción-de-características",
    "href": "16-dimensionality-reduction.html#técnicas-de-extracción-de-características",
    "title": "16  Reducción de Dimensionalidad",
    "section": "\n16.5 Técnicas de extracción de características",
    "text": "16.5 Técnicas de extracción de características\nDado que las recetas son la opción principal en tidymodels para la reducción de dimensionalidad, escribamos una función que estime la transformación y represente los datos resultantes en una matriz de diagrama de dispersión a través del paquete ggforce:\n\nlibrary(ggforce)\nplot_validation_results &lt;- function(recipe, dat = bean_validation) {\n  recipe %&gt;%\n    # Calcule los pasos adicionales\n    prep() %&gt;%\n    # Procesar los datos (la validación establecida por defecto)\n    bake(new_data = dat) %&gt;%\n    # Crear la matriz del diagrama de dispersión\n    ggplot(aes(x = .panel_x, y = .panel_y, color = class, fill = class)) +\n    geom_point(alpha = 0.4, size = 0.5) +\n    geom_autodensity(alpha = .3) +\n    facet_matrix(vars(-class), layer.diag = 2) + \n    scale_color_brewer(palette = \"Dark2\") + \n    scale_fill_brewer(palette = \"Dark2\")\n}\n\nReutilizaremos esta función varias veces en este capítulo.\nAquí se exploran una serie de varias metodologías de extracción de características. Se puede encontrar una descripción general de la mayoría en la Sección 6.3.1 de Kuhn y Johnson (2020) y las referencias allí contenidas. . El método UMAP se describe en McInnes, Healy, y Melville (2020).\n\n16.5.1 Análisis de componentes principales\nYa hemos mencionado la PCA varias veces en este libro y es hora de entrar en más detalles. PCA es un método no supervisado que utiliza combinaciones lineales de predictores para definir nuevas características. Estas características intentan dar cuenta de la mayor variación posible en los datos originales. Agregamos step_pca() a la receta original y usamos nuestra función para visualizar los resultados en el conjunto de validación en Figura 16.5 usando:\n\nbean_rec_trained %&gt;%\n  step_pca(all_numeric_predictors(), num_comp = 4) %&gt;%\n  plot_validation_results() + \n  ggtitle(\"Análisis de componentes principales\")\n\n\n\n\n\nFigura 16.5: Puntuaciones de los componentes principales para el conjunto de validación de beans, coloreadas por clase\n\n\n\nVemos que los dos primeros componentes PC1 y PC2, especialmente cuando se usan juntos, hacen un trabajo eficaz al distinguir o separar las clases. Esto puede llevarnos a esperar que el problema general de clasificar estos granos no sea especialmente difícil.\nRecuerde que PCA no está supervisada. Para estos datos, resulta que los componentes del PCA que explican la mayor variación en los predictores también predicen las clases. ¿Qué características son el rendimiento de conducción? El paquete learntidymodels tiene funciones que pueden ayudar a visualizar las características principales de cada componente. Necesitaremos la receta preparada; el paso PCA se agrega en el siguiente código junto con una llamada a prep():\n\nlibrary(learntidymodels)\nbean_rec_trained %&gt;%\n  step_pca(all_numeric_predictors(), num_comp = 4) %&gt;% \n  prep() %&gt;% \n  plot_top_loadings(component_number &lt;= 4, n = 5) + \n  scale_fill_brewer(palette = \"Paired\") +\n  ggtitle(\"Análisis de Componentes Principales\")\n\nEsto produce Figura 16.6.\n\n\n\n\nFigura 16.6: Cargas de predictores para la transformación PCA.\n\n\n\nLas cargas superiores están relacionadas principalmente con el grupo de predictores correlacionados que se muestran en la parte superior izquierda del gráfico de correlación anterior: perímetro, área, longitud del eje principal y área convexa. Todos estos están relacionados con el tamaño del frijol. El factor de forma 2, de Symons y Fulcher (1988), es el área sobre el cubo de la longitud del eje mayor y, por lo tanto, también está relacionado con el tamaño del frijol. Las medidas de alargamiento parecen dominar el segundo componente de PCA.\n\n16.5.2 Mínimos cuadrados parciales\nPLS, que presentamos en Sección 13.5.1, es una versión supervisada de PCA. Intenta encontrar componentes que maximicen simultáneamente la variación en los predictores y al mismo tiempo maximicen la relación entre esos componentes y el resultado. Figura 16.7 muestra los resultados de esta versión ligeramente modificada del código PCA:\n\nbean_rec_trained %&gt;%\n  step_pls(all_numeric_predictors(), outcome = \"class\", num_comp = 4) %&gt;%\n  plot_validation_results() + \n  ggtitle(\"Mínimos cuadrados parciales\")\n\n\n\n\n\nFigura 16.7: Puntuaciones de componentes PLS para el conjunto de validación de beans, coloreadas por clase\n\n\n\n¡Los dos primeros componentes PLS trazados en Figura 16.7 son casi idénticos a los dos primeros componentes PCA! Encontramos este resultado porque esos componentes de PCA son muy efectivos para separar las variedades de frijoles. Los componentes restantes son diferentes. Figura 16.8 visualiza las cargas, las características principales de cada componente.\n\nbean_rec_trained %&gt;%\n  step_pls(all_numeric_predictors(), outcome = \"class\", num_comp = 4) %&gt;%\n  prep() %&gt;% \n  plot_top_loadings(component_number &lt;= 4, n = 5, type = \"pls\") + \n  scale_fill_brewer(palette = \"Paired\") +\n  ggtitle(\"Mínimos cuadrados parciales\")\n\n\n\n\n\nFigura 16.8: Predictor loadings for the PLS transformation\n\n\n\nLa solidez (es decir, la densidad del grano) impulsa el tercer componente del PLS, junto con la redondez. La solidez puede estar capturando características del frijol relacionadas con las “baches” de la superficie del frijol, ya que puede medir la irregularidad de los límites del frijol.\n\n16.5.3 Análisis de componentes independientes\nICA (Análisis de componentes independientes) es ligeramente diferente a PCA en que encuentra componentes que son lo más independientes estadísticamente posible entre sí (en lugar de no estar correlacionados). Se puede considerar que maximiza la “no gaussianidad” de los componentes de ICA, o separa información en lugar de comprimir información como PCA. Usemos step_ica() para producir Figura 16.9:\n\nbean_rec_trained %&gt;%\n  step_ica(all_numeric_predictors(), num_comp = 4) %&gt;%\n  plot_validation_results() + \n  ggtitle(\"Análisis de componentes independientes\")\n\n\n\n\n\nFigura 16.9: Puntuaciones de componentes ICA para el conjunto de validación de beans, coloreadas por clase\n\n\n\nAl inspeccionar este gráfico, no parece haber mucha separación entre las clases en los primeros componentes cuando se usa ICA. Estos componentes independientes (o lo más independientes posible) no separan los tipos de frijoles.\n\n16.5.4 Aproximación y proyección de variedades uniformes.\nUMAP es similar al popular método t-SNE para la reducción de dimensiones no lineales. En el espacio original de alta dimensión, UMAP utiliza un método de vecino más cercano basado en la distancia para encontrar áreas locales de los datos donde es más probable que los puntos de datos estén relacionados. La relación entre puntos de datos se guarda como un modelo de gráfico dirigido donde la mayoría de los puntos no están conectados.\nA partir de ahí, UMAP traduce los puntos del gráfico al espacio dimensional reducido. Para hacer esto, el algoritmo tiene un proceso de optimización que utiliza entropía cruzada para asignar puntos de datos al conjunto más pequeño de características para que el gráfico sea bien aproximado.\nPara crear el mapeo, el paquete embed contiene una función de paso para este método, visualizada en Figura 16.10.\n\nlibrary(embed)\nbean_rec_trained %&gt;%\n  step_umap(all_numeric_predictors(), num_comp = 4) %&gt;%\n  plot_validation_results() +\n  ggtitle(\"UMAP\")\n\n\n\n\n\nFigura 16.10: Puntuaciones de componentes UMAP para el conjunto de validación de beans, coloreadas por clase\n\n\n\nSi bien el espacio entre grupos es pronunciado, los grupos pueden contener una mezcla heterogénea de clases.\nTambién existe una versión supervisada de UMAP:\n\nbean_rec_trained %&gt;%\n  step_umap(all_numeric_predictors(), outcome = \"class\", num_comp = 4) %&gt;%\n  plot_validation_results() +\n  ggtitle(\"UMAP (supervisado)\")\n\n\n\n\n\nFigura 16.11: Puntajes de componentes UMAP supervisados para el conjunto de validación de beans, coloreados por clase\n\n\n\nEl método supervisado que se muestra en Figura 16.11 parece prometedor para modelar los datos.\nUMAP es un método poderoso para reducir el espacio de funciones. Sin embargo, puede ser muy sensible a los parámetros de ajuste (por ejemplo, el número de vecinos, etc.). Por esta razón, sería útil experimentar con algunos de los parámetros para evaluar qué tan sólidos son los resultados de estos datos."
  },
  {
    "objectID": "17-encoding-categorical-data.html#es-necesaria-una-codificación",
    "href": "17-encoding-categorical-data.html#es-necesaria-una-codificación",
    "title": "17  Codificación de datos categóricos",
    "section": "\n17.1 ¿Es necesaria una codificación?",
    "text": "17.1 ¿Es necesaria una codificación?\nUna minoría de modelos, como los basados en árboles o reglas, pueden manejar datos categóricos de forma nativa y no requieren codificación ni transformación de este tipo de características. Un modelo basado en árbol puede dividir de forma nativa una variable como Bldg_Type en grupos de niveles de factores, tal vez OneFam solo en un grupo y Duplex y Twnhs juntos en otro grupo. Los modelos Naive Bayes son otro ejemplo en el que la estructura del modelo puede tratar variables categóricas de forma nativa; las distribuciones se calculan dentro de cada nivel, por ejemplo, para todos los diferentes tipos de Bldg_Type en el conjunto de datos.\nEstos modelos que pueden manejar características categóricas de forma nativa también pueden manejar características numéricas continuas, lo que hace que la transformación o codificación de dichas variables sea opcional. ¿Esto ayuda de alguna manera, quizás con el rendimiento del modelo o con el tiempo para entrenar modelos? Normalmente no, como muestra la Sección 5.7 de Kuhn y Johnson (2020) utilizando conjuntos de datos de referencia con variables factoriales no transformadas en comparación con variables ficticias transformadas para esas mismas características. En resumen, el uso de codificaciones ficticias normalmente no daba como resultado un mejor rendimiento del modelo, pero a menudo requería más tiempo para entrenar los modelos.\n\nRecomendamos comenzar con variables categóricas no transformadas cuando un modelo lo permita; tenga en cuenta que las codificaciones más complejas a menudo no dan como resultado un mejor rendimiento para dichos modelos."
  },
  {
    "objectID": "17-encoding-categorical-data.html#codificación-de-predictores-ordinales",
    "href": "17-encoding-categorical-data.html#codificación-de-predictores-ordinales",
    "title": "17  Codificación de datos categóricos",
    "section": "\n17.2 Codificación de predictores ordinales",
    "text": "17.2 Codificación de predictores ordinales\nA veces, las columnas cualitativas se pueden ordenar, como “baja”, “media” y “alta”. En base R, la estrategia de codificación predeterminada es crear nuevas columnas numéricas que sean expansiones polinómicas de los datos. Para las columnas que tienen cinco valores ordinales, como el ejemplo que se muestra en Tabla 17.2, la columna de factores se reemplaza con columnas para términos lineales, cuadráticos, cúbicos y cuárticos:\n\n\n\n\nTabla 17.2: Polynominal expansions for encoding an ordered variable.\n\nRaw Data\nLinear\nQuadratic\nCubic\nQuartic\n\n\n\nnone\n-0.63\n0.53\n-0.32\n0.12\n\n\na little\n-0.32\n-0.27\n0.63\n-0.48\n\n\nsome\n0.00\n-0.53\n0.00\n0.72\n\n\na bunch\n0.32\n-0.27\n-0.63\n-0.48\n\n\ncopious amounts\n0.63\n0.53\n0.32\n0.12\n\n\n\n\n\n\n\n\nSi bien esto no es descabellado, no es un enfoque que la gente tienda a encontrar útil. Por ejemplo, un polinomio de 11 grados probablemente no sea la forma más eficaz de codificar un factor ordinal para los meses del año. En su lugar, considere probar pasos de recetas relacionados con factores ordenados, como step_unorder(), para convertir a factores regulares, y step_ordinalscore(), que asigna valores numéricos específicos a cada nivel de factor."
  },
  {
    "objectID": "17-encoding-categorical-data.html#uso-del-resultado-para-codificar-predictores",
    "href": "17-encoding-categorical-data.html#uso-del-resultado-para-codificar-predictores",
    "title": "17  Codificación de datos categóricos",
    "section": "\n17.3 Uso del resultado para codificar predictores",
    "text": "17.3 Uso del resultado para codificar predictores\nExisten múltiples opciones para codificaciones más complejas que las variables ficticias o indicadoras. Un método llamado efecto o codificaciones de probabilidad reemplaza las variables categóricas originales con una sola columna numérica que mide el efecto de esos datos (Micci-Barreca 2001; Zumel y Mount 2019). Por ejemplo, para el predictor de vecindario en los datos de vivienda de Ames, podemos calcular el precio de venta medio o mediano para cada vecindario (como se muestra en Figura 17.1) y sustituir estos medios por los valores de los datos originales:\n\names_train %&gt;%\n  group_by(Neighborhood) %&gt;%\n  summarize(mean = mean(Sale_Price),\n            std_err = sd(Sale_Price) / sqrt(length(Sale_Price))) %&gt;% \n  ggplot(aes(y = reorder(Neighborhood, mean), x = mean)) + \n  geom_point() +\n  geom_errorbar(aes(xmin = mean - 1.64 * std_err, xmax = mean + 1.64 * std_err)) +\n  labs(y = NULL, x = \"Price (mean, log scale)\")\n\n\n\nFigura 17.1: Precio medio de la vivienda para vecindarios en el conjunto de entrenamiento de Ames, que puede usarse como codificación de efecto para esta variable categórica\n\n\n\nEste tipo de codificación de efectos funciona bien cuando su variable categórica tiene muchos niveles. En tidymodels, el paquete embed incluye varias funciones de pasos de recetas para diferentes tipos de codificaciones de efectos, como step_lencode_glm(), step_lencode_mixed() y step_lencode_bayes(). Estos pasos utilizan un modelo lineal generalizado para estimar el efecto de cada nivel en un predictor categórico sobre el resultado. Cuando utilice un paso de receta como step_lencode_glm(), especifique primero la variable que se codifica y luego el resultado usando vars():\n\nlibrary(embed)\n\names_glm &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n           Latitude + Longitude, data = ames_train) %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_lencode_glm(Neighborhood, outcome = vars(Sale_Price)) %&gt;%\n  step_dummy(all_nominal_predictors()) %&gt;% \n  step_interact( ~ Gr_Liv_Area:starts_with(\"Bldg_Type_\") ) %&gt;% \n  step_ns(Latitude, Longitude, deg_free = 20)\n\names_glm\n## \n## ── Recipe ───────────────────────────────────────────────────────────────────────────\n## \n## ── Inputs\n## Number of variables by role\n## outcome:   1\n## predictor: 6\n## \n## ── Operations\n## • Log transformation on: Gr_Liv_Area\n## • Linear embedding for factors via GLM for: Neighborhood\n## • Dummy variables from: all_nominal_predictors()\n## • Interactions with: Gr_Liv_Area:starts_with(\"Bldg_Type_\")\n## • Natural splines on: Latitude, Longitude\n\nComo se detalla en Sección 16.4, podemos preparar, prep(), nuestra receta para ajustar o estimar parámetros para las transformaciones de preprocesamiento utilizando datos de entrenamiento. Luego podemos tidy() esta receta preparada para ver los resultados:\n\nglm_estimates &lt;-\n  prep(ames_glm) %&gt;%\n  tidy(number = 2)\n\nglm_estimates\n## # A tibble: 29 × 4\n##   level              value terms        id               \n##   &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;        &lt;chr&gt;            \n## 1 North_Ames          5.15 Neighborhood lencode_glm_ZsXdy\n## 2 College_Creek       5.29 Neighborhood lencode_glm_ZsXdy\n## 3 Old_Town            5.07 Neighborhood lencode_glm_ZsXdy\n## 4 Edwards             5.09 Neighborhood lencode_glm_ZsXdy\n## 5 Somerset            5.35 Neighborhood lencode_glm_ZsXdy\n## 6 Northridge_Heights  5.49 Neighborhood lencode_glm_ZsXdy\n## # ℹ 23 more rows\n\nCuando utilizamos la variable numérica Neighborhood recién codificada creada mediante este método, sustituimos el nivel original (como \"North_Ames\") con la estimación de Sale_Price del GLM.\nLos métodos de codificación de efectos como este también pueden manejar sin problemas situaciones en las que se encuentra un nivel de factor novedoso en los datos. Este “valor” es el precio previsto por el GLM cuando no tenemos ninguna información específica del vecindario:\n\nglm_estimates %&gt;%\n  filter(level == \"..new\")\n## # A tibble: 1 × 4\n##   level value terms        id               \n##   &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;        &lt;chr&gt;            \n## 1 ..new  5.23 Neighborhood lencode_glm_ZsXdy\n\n\nLas codificaciones de efectos pueden ser poderosas, pero deben usarse con cuidado. Los efectos deben calcularse a partir del conjunto de entrenamiento, después de dividir los datos. Este tipo de preprocesamiento supervisado debe remuestrearse rigurosamente para evitar el sobreajuste (consulte el Capítulo 10).\n\nCuando crea una codificación de efecto para su variable categórica, efectivamente está superponiendo un minimodelo dentro de su modelo real. La posibilidad de sobreajustar con codificaciones de efectos es un ejemplo representativo de por qué la ingeniería de características debe considerarse parte del proceso del modelo, como se describe en el Capítulo 7, y por qué la ingeniería de características debe estimarse junto con los parámetros del modelo dentro del remuestreo. .\n\n17.3.1 Codificaciones de efectos con agrupación parcial\nLa creación de una codificación de efecto con step_lencode_glm() estima el efecto por separado para cada nivel de factor (en este ejemplo, vecindad). Sin embargo, algunos de estos vecindarios tienen muchas casas y otros tienen solo unas pocas. Hay mucha más incertidumbre en nuestra medición del precio para el conjunto de entrenamiento único que se encuentra en el vecindario Landmark que en el 354 casas de entrenamiento en North Ames. Podemos utilizar agrupación parcial para ajustar estas estimaciones de modo que los niveles con tamaños de muestra pequeños se reduzcan hacia la media general. Los efectos para cada nivel se modelan todos a la vez utilizando un modelo lineal generalizado mixto o jerárquico:\n\names_mixed &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n           Latitude + Longitude, data = ames_train) %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_lencode_mixed(Neighborhood, outcome = vars(Sale_Price)) %&gt;%\n  step_dummy(all_nominal_predictors()) %&gt;% \n  step_interact( ~ Gr_Liv_Area:starts_with(\"Bldg_Type_\") ) %&gt;% \n  step_ns(Latitude, Longitude, deg_free = 20)\n\names_mixed\n## \n## ── Recipe ───────────────────────────────────────────────────────────────────────────\n## \n## ── Inputs\n## Number of variables by role\n## outcome:   1\n## predictor: 6\n## \n## ── Operations\n## • Log transformation on: Gr_Liv_Area\n## • Linear embedding for factors via mixed effects for: Neighborhood\n## • Dummy variables from: all_nominal_predictors()\n## • Interactions with: Gr_Liv_Area:starts_with(\"Bldg_Type_\")\n## • Natural splines on: Latitude, Longitude\n\nVamos a prep() y tidy() esta receta para ver los resultados:\n\nmixed_estimates &lt;-\n  prep(ames_mixed) %&gt;%\n  tidy(number = 2)\n\nmixed_estimates\n## # A tibble: 29 × 4\n##   level              value terms        id                 \n##   &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;        &lt;chr&gt;              \n## 1 North_Ames          5.15 Neighborhood lencode_mixed_SC9hi\n## 2 College_Creek       5.29 Neighborhood lencode_mixed_SC9hi\n## 3 Old_Town            5.07 Neighborhood lencode_mixed_SC9hi\n## 4 Edwards             5.10 Neighborhood lencode_mixed_SC9hi\n## 5 Somerset            5.35 Neighborhood lencode_mixed_SC9hi\n## 6 Northridge_Heights  5.49 Neighborhood lencode_mixed_SC9hi\n## # ℹ 23 more rows\n\nLuego, los nuevos niveles se codifican casi con el mismo valor que con el GLM:\n\nmixed_estimates %&gt;%\n  filter(level == \"..new\")\n## # A tibble: 1 × 4\n##   level value terms        id                 \n##   &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;        &lt;chr&gt;              \n## 1 ..new  5.23 Neighborhood lencode_mixed_SC9hi\n\n\nPuedes usar un modelo jerárquico completamente bayesiano para los efectos de la misma manera con step_lencode_bayes().\n\nComparemos visualmente los efectos usando agrupación parcial versus sin agrupación en Figura 17.2:\n\nglm_estimates %&gt;%\n  rename(`no pooling` = value) %&gt;%\n  left_join(\n    mixed_estimates %&gt;%\n      rename(`partial pooling` = value), by = \"level\"\n  ) %&gt;%\n  left_join(\n    ames_train %&gt;% \n      count(Neighborhood) %&gt;% \n      mutate(level = as.character(Neighborhood))\n  ) %&gt;%\n  ggplot(aes(`no pooling`, `partial pooling`, size = sqrt(n))) +\n  geom_abline(color = \"gray50\", lty = 2) +\n  geom_point(alpha = 0.7) +\n  coord_fixed()\n## Warning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\nFigura 17.2: Comparación de las codificaciones de efectos para el vecindario estimado sin agrupación con aquellas con agrupación parcial\n\n\n\nObserve en Figura 17.2 que la mayoría de las estimaciones de los efectos de vecindad son aproximadamente las mismas cuando comparamos la agrupación con la no agrupación. Sin embargo, los barrios con menos viviendas se han visto arrastrados (ya sea hacia arriba o hacia abajo) hacia el efecto medio. Cuando utilizamos la agrupación, reducimos las estimaciones del efecto hacia la media porque no tenemos tanta evidencia sobre el precio en esos vecindarios."
  },
  {
    "objectID": "17-encoding-categorical-data.html#hashing-de-características",
    "href": "17-encoding-categorical-data.html#hashing-de-características",
    "title": "17  Codificación de datos categóricos",
    "section": "\n17.4 Hashing de características",
    "text": "17.4 Hashing de características\nLas variables ficticias tradicionales, como se describe en Sección 8.4.1, requieren que se conozcan todas las categorías posibles para crear un conjunto completo de características numéricas. Los métodos de hash de funciones (Weinberger et al. 2009) también crean variables ficticias, pero solo consideran el valor de la categoría para asignarla a un grupo predefinido de variables ficticias. Miremos nuevamente los valores de Neighborhood en Ames y usemos la función rlang::hash() para entender más:\n\nlibrary(rlang)\n\names_hashed &lt;-\n  ames_train %&gt;%\n  mutate(Hash = map_chr(Neighborhood, hash))\n\names_hashed %&gt;%\n  select(Neighborhood, Hash)\n## # A tibble: 2,342 × 2\n##   Neighborhood    Hash                            \n##   &lt;fct&gt;           &lt;chr&gt;                           \n## 1 North_Ames      076543f71313e522efe157944169d919\n## 2 North_Ames      076543f71313e522efe157944169d919\n## 3 Briardale       b598bec306983e3e68a3118952df8cf0\n## 4 Briardale       b598bec306983e3e68a3118952df8cf0\n## 5 Northpark_Villa 6af95b5db968bf393e78188a81e0e1e4\n## 6 Northpark_Villa 6af95b5db968bf393e78188a81e0e1e4\n## # ℹ 2,336 more rows\n\nSi ingresamos Briardale a esta función hash, siempre obtendremos el mismo resultado. En este caso, las vecindades se denominan “claves”, mientras que las salidas son “hashes”.\n\nUna función hash toma una entrada de tamaño variable y la asigna a una salida de tamaño fijo. Las funciones hash se utilizan comúnmente en criptografía y bases de datos.\n\nLa función rlang::hash() genera un hash de 128 bits, lo que significa que hay 2^128 valores hash posibles. Esto es excelente para algunas aplicaciones, pero no ayuda con el hash de funciones de variables de alta cardinalidad (variables con muchos niveles). En el hash de características, el número de hashes posibles es un hiperparámetro y lo establece el desarrollador del modelo calculando el módulo de los hashes enteros. Podemos obtener dieciséis valores hash posibles usando Hash %% 16:\n\names_hashed %&gt;%\n  ## primero haga un hash más pequeño para números enteros que R pueda manejar\n  mutate(Hash = strtoi(substr(Hash, 26, 32), base = 16L),  \n         ## ahora toma el módulo\n         Hash = Hash %% 16) %&gt;%\n  select(Neighborhood, Hash)\n## # A tibble: 2,342 × 2\n##   Neighborhood     Hash\n##   &lt;fct&gt;           &lt;dbl&gt;\n## 1 North_Ames          9\n## 2 North_Ames          9\n## 3 Briardale           0\n## 4 Briardale           0\n## 5 Northpark_Villa     4\n## 6 Northpark_Villa     4\n## # ℹ 2,336 more rows\n\nAhora, en lugar de los vecindarios 28 en nuestros datos originales o una cantidad increíblemente grande de hashes originales, tenemos dieciséis valores hash. Este método es muy rápido y eficiente en cuanto a memoria, y puede ser una buena estrategia cuando hay una gran cantidad de categorías posibles.\n\nEl hash de características es útil para datos de texto, así como para datos categóricos de alta cardinalidad. Consulte la Sección 6.7 de Hvitfeldt y Silge (2021) para ver una demostración de un estudio de caso con predictores de texto.\n\nPodemos implementar hash de características usando un paso de receta tidymodels del paquete textrecipes:\n\nlibrary(textrecipes)\names_hash &lt;- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + \n           Latitude + Longitude, data = ames_train) %&gt;%\n  step_log(Gr_Liv_Area, base = 10) %&gt;% \n  step_dummy_hash(Neighborhood, signed = FALSE, num_terms = 16L) %&gt;%\n  step_dummy(all_nominal_predictors()) %&gt;% \n  step_interact( ~ Gr_Liv_Area:starts_with(\"Bldg_Type_\") ) %&gt;% \n  step_ns(Latitude, Longitude, deg_free = 20)\n\names_hash\n## \n## ── Recipe ───────────────────────────────────────────────────────────────────────────\n## \n## ── Inputs\n## Number of variables by role\n## outcome:   1\n## predictor: 6\n## \n## ── Operations\n## • Log transformation on: Gr_Liv_Area\n## • Feature hashing with: Neighborhood\n## • Dummy variables from: all_nominal_predictors()\n## • Interactions with: Gr_Liv_Area:starts_with(\"Bldg_Type_\")\n## • Natural splines on: Latitude, Longitude\n\nEl hash de funciones es rápido y eficiente, pero tiene algunas desventajas. Por ejemplo, diferentes valores de categorías a menudo se asignan al mismo valor hash. Esto se llama colisión o aliasing. ¿Con qué frecuencia sucedió esto en nuestros vecindarios de Ames? Tabla 17.3 presenta la distribución del número de vecindarios por valor hash.\n\n## 'as(&lt;dgTMatrix&gt;, \"dgCMatrix\")' is deprecated.\n## Use 'as(., \"CsparseMatrix\")' instead.\n## See help(\"Deprecated\") and help(\"Matrix-deprecated\").\n\n\n\nTabla 17.3: La cantidad de características hash en cada número de vecindarios.\n\nNúmero de vecindarios dentro de una característica hash\nNumero de incidentes\n\n\n\n0\n1\n\n\n1\n7\n\n\n2\n4\n\n\n3\n3\n\n\n4\n1\n\n\n\n\n\n\n\n\nEl número de vecindades asignadas a cada valor hash varía entre zero y four. Todos los valores hash mayores que uno son ejemplos de colisiones hash.\n¿Cuáles son algunas cosas a considerar al utilizar hash de funciones?\n\nEl hash de características no se puede interpretar directamente porque las funciones hash no se pueden revertir. No podemos determinar cuáles eran los niveles de categoría de entrada a partir del valor hash o si ocurrió una colisión.\nEl número de valores hash es un parámetro de ajuste de esta técnica de preprocesamiento, y debes probar varios valores para determinar cuál es mejor para tu enfoque de modelado particular. Una cantidad menor de valores hash da como resultado más colisiones, pero una cantidad alta puede no ser una mejora con respecto a la variable de cardinalidad alta original.\nEl hash de características puede manejar nuevos niveles de categorías en el momento de la predicción, ya que no depende de variables ficticias predeterminadas.\nPuedes reducir las colisiones de hash con un hash firmado usando signed = TRUE. Esto expande los valores de solo 1 a +1 o -1, según el signo del hash.\n\n\nEs probable que algunas columnas hash contengan solo ceros, como vemos en este ejemplo. Recomendamos un filtro de variación cero a través de step_zv() para filtrar dichas columnas."
  },
  {
    "objectID": "17-encoding-categorical-data.html#más-opciones-de-codificación",
    "href": "17-encoding-categorical-data.html#más-opciones-de-codificación",
    "title": "17  Codificación de datos categóricos",
    "section": "\n17.5 Más opciones de codificación",
    "text": "17.5 Más opciones de codificación\nHay aún más opciones disponibles para transformar factores a una representación numérica.\nPodemos construir un conjunto completo de incrustaciones de entidades (Guo y Berkhahn 2016) para transformar una variable categórica con muchos niveles en un conjunto de vectores de dimensiones inferiores. Este enfoque se adapta mejor a una variable nominal con muchos niveles de categoría, muchos más que el ejemplo que hemos usado con los barrios de Ames.\n\nLa idea de incrustaciones de entidades proviene de los métodos utilizados para crear incrustaciones de palabras a partir de datos de texto. Consulte el Capítulo 5 de Hvitfeldt y Silge (2021) para obtener más información sobre la incrustación de palabras.\n\nLas incrustaciones de una variable categórica se pueden aprender a través de una red neuronal TensorFlow con la función step_embed() en embed. Podemos usar el resultado solo o, opcionalmente, el resultado más un conjunto de predictores adicionales. Al igual que en el hashing de funciones, la cantidad de nuevas columnas de codificación que se crearán es un hiperparámetro de la ingeniería de funciones. También debemos tomar decisiones sobre la estructura de la red neuronal (la cantidad de unidades ocultas) y cómo ajustar la red neuronal (cuántas épocas entrenar, cuántos datos usar para la validación en la medición de métricas).\nUna opción más disponible para abordar un resultado binario es transformar un conjunto de niveles de categorías en función de su asociación con el resultado binario. Esta transformación de peso de la evidencia (WoE) (Good 1985) utiliza el logaritmo del “factor Bayes” (la relación entre las probabilidades posteriores y las probabilidades anteriores) y crea un diccionario que asigna cada nivel de categoría a un valor WoE. Las codificaciones WoE se pueden determinar con la función step_woe() en embed."
  },
  {
    "objectID": "20-ensemble-models.html#resultados-del-conjunto-de-pruebas",
    "href": "20-ensemble-models.html#resultados-del-conjunto-de-pruebas",
    "title": "20  Conjuntos de modelos",
    "section": "\n20.4 Resultados del conjunto de pruebas",
    "text": "20.4 Resultados del conjunto de pruebas\nDado que el proceso de combinación utilizó remuestreo, podemos estimar que el conjunto con miembros five tenía un RMSE estimado de 4.09. Recuerde del Capítulo 15 que el árbol mejor impulsado tenía un conjunto de prueba RMSE de 3.46. ¿Cómo se comparará el modelo de conjunto en el conjunto de prueba? Podemos usar predecit() para averiguarlo:\n\nreg_metrics &lt;- metric_set(rmse, rsq)\nens_test_pred &lt;- \n  predict(ens, concrete_test) %&gt;% \n  bind_cols(concrete_test)\n\nens_test_pred %&gt;% \n  reg_metrics(compressive_strength, .pred)\n## # A tibble: 2 × 3\n##   .metric .estimator .estimate\n##   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n## 1 rmse    standard       3.37 \n## 2 rsq     standard       0.956\n\nEsto es moderadamente mejor que nuestro mejor modelo individual. Es bastante común que el apilamiento produzca beneficios incrementales en comparación con el mejor modelo individual."
  },
  {
    "objectID": "21-inferential-analysis.html#inferencia-para-datos-de-recuento",
    "href": "21-inferential-analysis.html#inferencia-para-datos-de-recuento",
    "title": "21  Análisis inferencial",
    "section": "\n21.1 Inferencia para datos de recuento",
    "text": "21.1 Inferencia para datos de recuento\nPara comprender cómo se pueden utilizar los paquetes tidymodels para el modelado inferencial, centrémonos en un ejemplo con datos de recuento. Usaremos datos de publicaciones de bioquímica del paquete pscl. Estos datos consisten en información sobre 915 Ph.D. se gradúan en bioquímica e intenta explicar los factores que impactan su productividad académica (medida a través del número o recuento de artículos publicados en tres años). Los predictores incluyen el género del graduado, su estado civil, el número de hijos del graduado que tengan al menos cinco años, el prestigio de su departamento y el número de artículos producidos por su mentor en el mismo período de tiempo. Los datos reflejan doctorados en bioquímica que terminaron su educación entre 1956 y 1963. Los datos son una muestra algo sesgada de todos los doctorados en bioquímica otorgados durante este período (basado en la integridad de la información).\n\nRecuerde que en el Capítulo 19 hicimos la pregunta “¿Es nuestro modelo aplicable para predecir un punto de datos específico?” Es muy importante definir a qué poblaciones se aplica un análisis inferencial. Para estos datos, los resultados probablemente se aplicarían a los doctorados en bioquímica dados aproximadamente en el período en que se recopilaron los datos. ¿Se aplica también a otros tipos de doctorado en química (por ejemplo, química medicinal, etc.)? Éstas son preguntas importantes que se deben abordar (y documentar) al realizar análisis inferenciales.\n\nUn gráfico de los datos mostrados en Figura 21.1 indica que muchos graduados no publicaron ningún artículo durante este tiempo y que el resultado sigue una distribución sesgada a la derecha:\n\nlibrary(tidymodels)\ntidymodels_prefer()\n\ndata(\"bioChemists\", package = \"pscl\")\n\nggplot(bioChemists, aes(x = art)) + \n  geom_histogram(binwidth = 1, color = \"white\") + \n  labs(x = \"Número de artículos dentro de los 3 años posteriores a la graduación\")\n\n\n\n\n\nFigura 21.1: Distribución del número de artículos escritos dentro de los 3 años posteriores a la graduación.\n\n\n\nDado que los datos de los resultados son recuentos, la suposición de distribución más común es que el resultado tiene una distribución de Poisson. En este capítulo se utilizarán estos datos para varios tipos de análisis."
  },
  {
    "objectID": "21-inferential-analysis.html#comparaciones-con-pruebas-de-dos-muestras",
    "href": "21-inferential-analysis.html#comparaciones-con-pruebas-de-dos-muestras",
    "title": "21  Análisis inferencial",
    "section": "\n21.2 Comparaciones con pruebas de dos muestras",
    "text": "21.2 Comparaciones con pruebas de dos muestras\nPodemos comenzar con la prueba de hipótesis. El objetivo del autor original con este conjunto de datos sobre publicaciones de bioquímica era determinar si existe una diferencia en las publicaciones entre hombres y mujeres (Long 1992). Los datos del estudio muestran:\n\nbioChemists %&gt;% \n  group_by(fem) %&gt;% \n  summarize(counts = sum(art), n = length(art))\n## # A tibble: 2 × 3\n##   fem   counts     n\n##   &lt;fct&gt;  &lt;int&gt; &lt;int&gt;\n## 1 Men      930   494\n## 2 Women    619   421\n\nHabía muchas más publicaciones de hombres, aunque también había más hombres en los datos. El enfoque más simple para analizar estos datos sería hacer una comparación de dos muestras usando la función poisson.test() en el paquete stats. Requiere los conteos para uno o dos grupos.\nPara nuestra aplicación, las hipótesis para comparar los dos sexos son:\n\\[\\begin{align}\nH_0&: \\lambda_m = \\lambda_f \\notag \\\\\nH_a&: \\lambda_m \\ne \\lambda_f \\notag\n\\end{align}\\]\ndonde los valores \\(\\lambda\\) son las tasas de publicaciones (durante el mismo período de tiempo).\nUna aplicación básica de la prueba es:Una aplicación básica de la prueba es:1\n\npoisson.test(c(930, 619), T = 3)\n## \n##  Comparison of Poisson rates\n## \n## data:  c(930, 619) time base: 3\n## count1 = 930, expected count1 = 774, p-value = 3e-15\n## alternative hypothesis: true rate ratio is not equal to 1\n## 95 percent confidence interval:\n##  1.356 1.666\n## sample estimates:\n## rate ratio \n##      1.502\n\nLa función informa un valor p así como un intervalo de confianza para la relación de las tasas de publicación. Los resultados indican que la diferencia observada es mayor que el ruido experiencial y favorece a \\(H_a\\).\nUn problema con el uso de esta función es que los resultados regresan como un objeto “htest”. Si bien este tipo de objeto tiene una estructura bien definida, puede resultar difícil consumirlo para operaciones posteriores, como informes o visualizaciones. La herramienta más impactante que ofrece tidymodels para modelos inferenciales son las funciones tidy() en el paquete broom. Como se vio anteriormente, esta función crea un tibble bien formado y con un nombre predecible a partir del objeto. Podemos tidy() los resultados de nuestra prueba de comparación de dos muestras:\n\npoisson.test(c(930, 619)) %&gt;% \n  tidy()\n## # A tibble: 1 × 8\n##   estimate statistic  p.value parameter conf.low conf.high method        alternative\n##      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;      \n## 1     1.50       930 2.73e-15      774.     1.36      1.67 Comparison o… two.sided\n\n\nEntre broom y broom.mixed, existen métodos tidy() para más de 150 modelos.\n\nSi bien la distribución de Poisson es razonable, es posible que también deseemos evaluarla utilizando menos supuestos distributivos. Dos métodos que podrían resultar útiles son las pruebas de arranque y de permutación (Davison y Hinkley 1997).\nEl paquete infer, parte del marco tidymodels, es una herramienta poderosa e intuitiva para probar hipótesis (Ismay y Kim 2021). Su sintaxis es concisa y está diseñada para no estadísticos.\nPrimero, specify() que usaremos la diferencia en el número medio de artículos entre los sexos y luego calculate() la estadística a partir de los datos. Recuerde que el estimador de máxima verosimilitud para la media de Poisson es la media muestral. Las hipótesis probadas aquí son las mismas que las de la prueba anterior (pero se llevan a cabo mediante un procedimiento de prueba diferente).\nCon infer, especificamos el resultado y la covariable, luego indicamos la estadística de interés:\n\nlibrary(infer)\n\nobserved &lt;- \n  bioChemists %&gt;%\n  specify(art ~ fem) %&gt;%\n  calculate(stat = \"diff in means\", order = c(\"Men\", \"Women\"))\nobserved\n## Response: art (numeric)\n## Explanatory: fem (factor)\n## # A tibble: 1 × 1\n##    stat\n##   &lt;dbl&gt;\n## 1 0.412\n\nA partir de aquí, calculamos un intervalo de confianza para esta media creando la distribución de arranque mediante generate(); se calcula la misma estadística para cada versión remuestreada de los datos:\n\nset.seed(2101)\nbootstrapped &lt;- \n  bioChemists %&gt;%\n  specify(art ~ fem)  %&gt;%\n  generate(reps = 2000, type = \"bootstrap\") %&gt;%\n  calculate(stat = \"diff in means\", order = c(\"Men\", \"Women\"))\nbootstrapped\n## Response: art (numeric)\n## Explanatory: fem (factor)\n## # A tibble: 2,000 × 2\n##   replicate  stat\n##       &lt;int&gt; &lt;dbl&gt;\n## 1         1 0.467\n## 2         2 0.107\n## 3         3 0.467\n## 4         4 0.308\n## 5         5 0.369\n## 6         6 0.428\n## # ℹ 1,994 more rows\n\nUn intervalo percentil se calcula usando:\n\npercentile_ci &lt;- get_ci(bootstrapped)\npercentile_ci\n## # A tibble: 1 × 2\n##   lower_ci upper_ci\n##      &lt;dbl&gt;    &lt;dbl&gt;\n## 1    0.158    0.653\n\nEl paquete infer tiene una API de alto nivel para mostrar los resultados del análisis, como se muestra en Figura 21.2.\n\nvisualize(bootstrapped) +\n    shade_confidence_interval(endpoints = percentile_ci)\n\n\n\n\n\nFigura 21.2: La distribución bootstrap de la diferencia de medias. La región resaltada es el intervalo de confianza.\n\n\n\nDado que el intervalo visualizado en Figura 21.2 no incluye cero, estos resultados indican que los hombres han publicado más artículos que las mujeres.\nSi requerimos un valor p, el paquete infer puede calcular el valor mediante una prueba de permutación, que se muestra en el siguiente código. La sintaxis es muy similar al código de arranque que usamos anteriormente. Agregamos un verbo hypothesize() para indicar el tipo de suposición a probar y la llamada generate() contiene una opción para mezclar los datos.\n\nset.seed(2102)\npermuted &lt;- \n  bioChemists %&gt;%\n  specify(art ~ fem)  %&gt;%\n  hypothesize(null = \"independence\") %&gt;%\n  generate(reps = 2000, type = \"permute\") %&gt;%\n  calculate(stat = \"diff in means\", order = c(\"Men\", \"Women\"))\npermuted\n## Response: art (numeric)\n## Explanatory: fem (factor)\n## Null Hypothesis: independence\n## # A tibble: 2,000 × 2\n##   replicate     stat\n##       &lt;int&gt;    &lt;dbl&gt;\n## 1         1  0.201  \n## 2         2 -0.133  \n## 3         3  0.109  \n## 4         4 -0.195  \n## 5         5 -0.00128\n## 6         6 -0.102  \n## # ℹ 1,994 more rows\n\nEl siguiente código de visualización también es muy similar al enfoque de arranque. Este código genera Figura 21.3 donde la línea vertical indica el valor observado:\n\nvisualize(permuted) +\n    shade_p_value(obs_stat = observed, direction = \"two-sided\")\n\n\n\n\n\nFigura 21.3: Distribución empírica del estadístico de prueba bajo la hipótesis nula. La línea vertical indica la estadística de prueba observada.\n\n\n\nThe actual p-value is:\n\npermuted %&gt;%\n  get_p_value(obs_stat = observed, direction = \"two-sided\")\n## # A tibble: 1 × 1\n##   p_value\n##     &lt;dbl&gt;\n## 1   0.002\n\nLa línea vertical que representa la hipótesis nula en Figura 21.3 está muy lejos de la distribución de permutación. Esto significa que, si de hecho la hipótesis nula fuera cierta, la probabilidad de observar datos al menos tan extremos como los que tenemos a mano es extremadamente pequeña.\nLas pruebas de dos muestras que se muestran en esta sección probablemente no sean óptimas porque no tienen en cuenta otros factores que podrían explicar la relación observada entre la tasa de publicación y el sexo. Pasemos a un modelo más complejo que pueda considerar covariables adicionales."
  },
  {
    "objectID": "21-inferential-analysis.html#modelos-log-lineales",
    "href": "21-inferential-analysis.html#modelos-log-lineales",
    "title": "21  Análisis inferencial",
    "section": "\n21.3 Modelos log-lineales",
    "text": "21.3 Modelos log-lineales\nEl resto de este capítulo se centrará en un modelo lineal generalizado (Dobson 1999) donde asumimos que los recuentos siguen una distribución de Poisson. Para este modelo, las covariables/predictores ingresan al modelo de forma log-lineal:\n\\[\n\\log(\\lambda) = \\beta_0 + \\beta_1x_1 + \\ldots + \\beta_px_p\n\\]\ndonde \\(\\lambda\\) es el valor esperado de los recuentos.\nAjustemos un modelo simple que contenga todas las columnas predictoras. El paquete poissonreg, un paquete de extensión parsnip en tidymodels, se ajustará a esta especificación de modelo:\n\nlibrary(poissonreg)\n\n# El motor predeterminado es 'glm'\nlog_lin_spec &lt;- poisson_reg()\n\nlog_lin_fit &lt;- \n  log_lin_spec %&gt;% \n  fit(art ~ ., data = bioChemists)\nlog_lin_fit\n## parsnip model object\n## \n## \n## Call:  stats::glm(formula = art ~ ., family = stats::poisson, data = data)\n## \n## Coefficients:\n## (Intercept)     femWomen   marMarried         kid5          phd         ment  \n##      0.3046      -0.2246       0.1552      -0.1849       0.0128       0.0255  \n## \n## Degrees of Freedom: 914 Total (i.e. Null);  909 Residual\n## Null Deviance:       1820 \n## Residual Deviance: 1630  AIC: 3310\n\nEl método tidy() resume sucintamente los coeficientes del modelo (junto con intervalos de confianza del 90%):\n\ntidy(log_lin_fit, conf.int = TRUE, conf.level = 0.90)\n## # A tibble: 6 × 7\n##   term        estimate std.error statistic  p.value conf.low conf.high\n##   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n## 1 (Intercept)   0.305    0.103       2.96  3.10e- 3   0.134     0.473 \n## 2 femWomen     -0.225    0.0546     -4.11  3.92e- 5  -0.315    -0.135 \n## 3 marMarried    0.155    0.0614      2.53  1.14e- 2   0.0545    0.256 \n## 4 kid5         -0.185    0.0401     -4.61  4.08e- 6  -0.251    -0.119 \n## 5 phd           0.0128   0.0264      0.486 6.27e- 1  -0.0305    0.0563\n## 6 ment          0.0255   0.00201    12.7   3.89e-37   0.0222    0.0288\n\nEn este resultado, los valores p corresponden a pruebas de hipótesis separadas para cada parámetro:\n\\[\\begin{align}\nH_0&: \\beta_j = 0 \\notag \\\\\nH_a&: \\beta_j \\ne 0 \\notag\n\\end{align}\\]\npara cada uno de los parámetros del modelo. Al observar estos resultados, es posible que el phd (el prestigio de su departamento) no tenga ninguna relación con el resultado.\nSi bien la distribución de Poisson es el supuesto habitual para datos como estos, puede resultar beneficioso realizar una verificación aproximada de los supuestos del modelo ajustando los modelos sin utilizar la probabilidad de Poisson para calcular los intervalos de confianza. El paquete rsample tiene una función conveniente para calcular intervalos de confianza de arranque para los modelos lm() y glm(). Podemos usar esta función, mientras declaramos explícitamente family = poisson, para calcular una gran cantidad de ajustes del modelo. De forma predeterminada, calculamos un intervalo bootstrap-t de confianza del 90% (los intervalos percentiles también están disponibles):\n\nset.seed(2103)\nglm_boot &lt;- \n  reg_intervals(art ~ ., data = bioChemists, model_fn = \"glm\", family = poisson)\nglm_boot\n## # A tibble: 5 × 6\n##   term          .lower .estimate  .upper .alpha .method  \n##   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    \n## 1 femWomen   -0.358      -0.226  -0.0856   0.05 student-t\n## 2 kid5       -0.298      -0.184  -0.0789   0.05 student-t\n## 3 marMarried  0.000264    0.155   0.317    0.05 student-t\n## 4 ment        0.0182      0.0256  0.0322   0.05 student-t\n## 5 phd        -0.0707      0.0130  0.102    0.05 student-t\n\n\nCuando comparamos estos resultados (en Figura 21.4) con los resultados puramente paramétricos de glm(), los intervalos de arranque son algo más amplios. Si los datos fueran verdaderamente de Poisson, estos intervalos tendrían anchos más similares.\n\n\n\n\n\nFigura 21.4: Dos tipos de intervalos de confianza para el modelo de regresión de Poisson\n\n\n\nDeterminar qué predictores incluir en el modelo es un problema difícil. Un enfoque consiste en realizar pruebas de índice de verosimilitud (LRT) (McCullagh y Nelder 1989) entre modelos anidados. Según los intervalos de confianza, tenemos evidencia de que un modelo más simple sin phd puede ser suficiente. Ajustemos un modelo más pequeño y luego realicemos una prueba estadística:\n\\[\\begin{align}\nH_0&: \\beta_{phd} = 0 \\notag \\\\\nH_a&: \\beta_{phd} \\ne 0 \\notag\n\\end{align}\\]\nEsta hipótesis se probó previamente cuando mostramos los resultados ordenados de log_lin_fit. Ese enfoque particular utilizó resultados de un ajuste de modelo único mediante una estadística de Wald (es decir, el parámetro dividido por su error estándar). Para ese enfoque, el valor p era 0.63. Podemos ordenar los resultados del LRT para obtener el valor p:\n\nlog_lin_reduced &lt;- \n  log_lin_spec %&gt;% \n  fit(art ~ ment + kid5 + fem + mar, data = bioChemists)\n\nanova(\n  extract_fit_engine(log_lin_reduced),\n  extract_fit_engine(log_lin_fit),\n  test = \"LRT\"\n) %&gt;%\n  tidy()\n## # A tibble: 2 × 6\n##   term                          df.residual residual.deviance    df deviance p.value\n##   &lt;chr&gt;                               &lt;dbl&gt;             &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n## 1 art ~ ment + kid5 + fem + mar         910             1635.    NA   NA      NA    \n## 2 art ~ fem + mar + kid5 + phd…         909             1634.     1    0.236   0.627\n\nLos resultados son los mismos y, en base a estos y al intervalo de confianza para este parámetro, excluiremos phd de análisis adicionales ya que no parece estar asociado con el resultado."
  },
  {
    "objectID": "21-inferential-analysis.html#un-modelo-más-complejo",
    "href": "21-inferential-analysis.html#un-modelo-más-complejo",
    "title": "21  Análisis inferencial",
    "section": "\n21.4 Un modelo más complejo",
    "text": "21.4 Un modelo más complejo\nPodemos pasar a modelos aún más complejos dentro de nuestro enfoque de tidymodels. Para los datos de recuento, hay ocasiones en las que el número de recuentos de ceros es mayor de lo que prescribiría una distribución de Poisson simple. Un modelo más complejo apropiado para esta situación es el modelo de Poisson (ZIP) con inflación cero; consulte Mullahy (1986), Lambert (1992) y Zeileis, Kleiber, y Jackman (2008). Aquí, hay dos conjuntos de covariables: uno para los datos de recuento y otros que afectan la probabilidad (indicada como \\(\\pi\\)) de ceros. La ecuación para la media \\(\\lambda\\) es:\n\\[\\lambda = 0 \\pi + (1 - \\pi) \\lambda_{nz}\\]\ndonde\n\\[\\begin{align}\n\\log(\\lambda_{nz}) &= \\beta_0 + \\beta_1x_1 + \\ldots + \\beta_px_p \\notag \\\\\n\\log\\left(\\frac{\\pi}{1-\\pi}\\right) &= \\gamma_0 + \\gamma_1z_1 + \\ldots + \\gamma_qz_q \\notag\n\\end{align}\\]\ny las covariables \\(x\\) afectan los valores de recuento, mientras que las covariables \\(z\\) influyen en la probabilidad de un cero. No es necesario que los dos conjuntos de predictores sean mutuamente excluyentes.\nAjustaremos un modelo con un conjunto completo de covariables \\(z\\):\n\nzero_inflated_spec &lt;- poisson_reg() %&gt;% set_engine(\"zeroinfl\")\n\nzero_inflated_fit &lt;- \n  zero_inflated_spec %&gt;% \n  fit(art ~ fem + mar + kid5 + ment | fem + mar + kid5 + phd + ment,\n      data = bioChemists)\n\nzero_inflated_fit\n## parsnip model object\n## \n## \n## Call:\n## pscl::zeroinfl(formula = art ~ fem + mar + kid5 + ment | fem + mar + kid5 + \n##     phd + ment, data = data)\n## \n## Count model coefficients (poisson with log link):\n## (Intercept)     femWomen   marMarried         kid5         ment  \n##       0.621       -0.209        0.105       -0.143        0.018  \n## \n## Zero-inflation model coefficients (binomial with logit link):\n## (Intercept)     femWomen   marMarried         kid5          phd         ment  \n##     -0.6086       0.1093      -0.3529       0.2195       0.0124      -0.1351\n\nDado que los coeficientes de este modelo también se estiman utilizando la máxima verosimilitud, intentemos utilizar otra prueba de razón de verosimilitud para comprender si los términos del nuevo modelo son útiles. Simultáneamente probaremos que:\n\\[\\begin{align}\nH_0&: \\gamma_1 = 0, \\gamma_2 = 0, \\cdots, \\gamma_5 = 0 \\notag \\\\\nH_a&: \\text{at least one } \\gamma \\ne 0  \\notag\n\\end{align}\\]\nProbemos ANOVA nuevamente:\n\nanova(\n  extract_fit_engine(zero_inflated_fit),\n  extract_fit_engine(log_lin_reduced),\n  test = \"LRT\"\n) %&gt;%\n  tidy()\n## Error in UseMethod(\"anova\"): no applicable method for 'anova' applied to an object of class \"zeroinfl\"\n\n¡No se implementa un método anova() para objetos zeroinfl!\nUna alternativa es utilizar una estadística de criterio de información, como el criterio de información de Akaike (AIC) (Claeskens 2016). Esto calcula la probabilidad logarítmica (del conjunto de entrenamiento) y penaliza ese valor según el tamaño del conjunto de entrenamiento y la cantidad de parámetros del modelo. En la parametrización de R, los valores AIC más pequeños son mejores. En este caso, no estamos realizando una prueba estadística formal sino estimando la capacidad de los datos para ajustarse a los datos.\nLos resultados indican que el modelo ZIP es preferible:\n\nzero_inflated_fit %&gt;% extract_fit_engine() %&gt;% AIC()\n## [1] 3232\nlog_lin_reduced   %&gt;% extract_fit_engine() %&gt;% AIC()\n## [1] 3312\n\nSin embargo, es difícil contextualizar este par de valores individuales y evaluar cuán diferentes son en realidad. Para resolver este problema, volveremos a muestrear una gran cantidad de cada uno de estos dos modelos. A partir de estos, podemos calcular los valores AIC para cada uno y determinar con qué frecuencia los resultados favorecen el modelo ZIP. Básicamente, caracterizaremos la incertidumbre de las estadísticas del AIC para medir su diferencia en relación con el ruido en los datos.\nTambién calcularemos más intervalos de confianza de arranque para los parámetros en un momento, por lo que especificamos la opción apparent = TRUE al crear las muestras de arranque. Esto es necesario para algunos tipos de intervalos.\nPrimero, creamos los 4000 ajustes del modelo:\n\nzip_form &lt;- art ~ fem + mar + kid5 + ment | fem + mar + kid5 + phd + ment\nglm_form &lt;- art ~ fem + mar + kid5 + ment\n\nset.seed(2104)\nbootstrap_models &lt;-\n  bootstraps(bioChemists, times = 2000, apparent = TRUE) %&gt;%\n  mutate(\n    glm = map(splits, ~ fit(log_lin_spec,       glm_form, data = analysis(.x))),\n    zip = map(splits, ~ fit(zero_inflated_spec, zip_form, data = analysis(.x)))\n  )\nbootstrap_models\n## # Bootstrap sampling with apparent sample \n## # A tibble: 2,001 × 4\n##   splits            id            glm      zip     \n##   &lt;list&gt;            &lt;chr&gt;         &lt;list&gt;   &lt;list&gt;  \n## 1 &lt;split [915/355]&gt; Bootstrap0001 &lt;fit[+]&gt; &lt;fit[+]&gt;\n## 2 &lt;split [915/333]&gt; Bootstrap0002 &lt;fit[+]&gt; &lt;fit[+]&gt;\n## 3 &lt;split [915/337]&gt; Bootstrap0003 &lt;fit[+]&gt; &lt;fit[+]&gt;\n## 4 &lt;split [915/344]&gt; Bootstrap0004 &lt;fit[+]&gt; &lt;fit[+]&gt;\n## 5 &lt;split [915/351]&gt; Bootstrap0005 &lt;fit[+]&gt; &lt;fit[+]&gt;\n## 6 &lt;split [915/354]&gt; Bootstrap0006 &lt;fit[+]&gt; &lt;fit[+]&gt;\n## # ℹ 1,995 more rows\n\nAhora podemos extraer los ajustes del modelo y sus correspondientes valores AIC:\n\nbootstrap_models &lt;-\n  bootstrap_models %&gt;%\n  mutate(\n    glm_aic = map_dbl(glm, ~ extract_fit_engine(.x) %&gt;% AIC()),\n    zip_aic = map_dbl(zip, ~ extract_fit_engine(.x) %&gt;% AIC())\n  )\nmean(bootstrap_models$zip_aic &lt; bootstrap_models$glm_aic)\n## [1] 1\n\nA partir de estos resultados, parece definitivo que tener en cuenta el número excesivo de conteos de cero es una buena idea.\n\nPodríamos haber usado fit_resamples() o un conjunto de flujo de trabajo para realizar estos cálculos. En esta sección, usamos mutate() y map() para calcular los modelos y demostrar cómo se pueden usar las herramientas tidymodels para modelos que no son compatibles con uno de los paquetes parsnip.\n\nDado que hemos calculado los ajustes del modelo remuestreado, creemos intervalos de arranque para los coeficientes del modelo de probabilidad cero (es decir, \\(\\gamma_j\\)). Podemos extraerlos con el método tidy() y usar la opción type = \"zero\" para obtener estas estimaciones:\n\nbootstrap_models &lt;-\n  bootstrap_models %&gt;%\n  mutate(zero_coefs  = map(zip, ~ tidy(.x, type = \"zero\")))\n\n# One example:\nbootstrap_models$zero_coefs[[1]]\n## # A tibble: 6 × 6\n##   term        type  estimate std.error statistic   p.value\n##   &lt;chr&gt;       &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n## 1 (Intercept) zero   -0.128     0.497     -0.257 0.797    \n## 2 femWomen    zero   -0.0764    0.319     -0.240 0.811    \n## 3 marMarried  zero   -0.112     0.365     -0.307 0.759    \n## 4 kid5        zero    0.270     0.186      1.45  0.147    \n## 5 phd         zero   -0.178     0.132     -1.35  0.177    \n## 6 ment        zero   -0.123     0.0315    -3.91  0.0000935\n\nEs una buena idea visualizar las distribuciones de arranque de los coeficientes, como en Figura 21.5.\n\nbootstrap_models %&gt;% \n  unnest(zero_coefs) %&gt;% \n  ggplot(aes(x = estimate)) +\n  geom_histogram(bins = 25, color = \"white\") + \n  facet_wrap(~ term, scales = \"free_x\") + \n  geom_vline(xintercept = 0, lty = 2, color = \"gray70\")\n\n\n\n\n\nFigura 21.5: Distribuciones bootstrap de los coeficientes del modelo ZIP. Las líneas verticales indican las estimaciones observadas.\n\n\n\nUna de las covariables (ment) que parece ser importante tiene una distribución muy sesgada. El espacio extra en algunas de las facetas indica que hay algunos valores atípicos en las estimaciones. Esto podría ocurrir cuando los modelos no convergieran; esos resultados probablemente deberían excluirse de las nuevas muestras. Para los resultados visualizados en Figura 21.5, los valores atípicos se deben únicamente a estimaciones extremas de parámetros; todos los modelos convergieron.\nEl paquete rsample contiene un conjunto de funciones denominadas int_*() que calculan diferentes tipos de intervalos de arranque. Dado que el método tidy() contiene estimaciones de error estándar, se pueden calcular los intervalos bootstrap-t. También calcularemos los intervalos percentiles estándar. De forma predeterminada, se calculan intervalos de confianza del 90%.\n\nbootstrap_models %&gt;% int_pctl(zero_coefs)\n## # A tibble: 6 × 6\n##   term        .lower .estimate  .upper .alpha .method   \n##   &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;     \n## 1 (Intercept) -1.75    -0.621   0.423    0.05 percentile\n## 2 femWomen    -0.521    0.115   0.818    0.05 percentile\n## 3 kid5        -0.327    0.218   0.677    0.05 percentile\n## 4 marMarried  -1.20    -0.381   0.362    0.05 percentile\n## 5 ment        -0.401   -0.162  -0.0513   0.05 percentile\n## 6 phd         -0.276    0.0220  0.327    0.05 percentile\nbootstrap_models %&gt;% int_t(zero_coefs)\n## # A tibble: 6 × 6\n##   term        .lower .estimate  .upper .alpha .method  \n##   &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    \n## 1 (Intercept) -1.61    -0.621   0.321    0.05 student-t\n## 2 femWomen    -0.482    0.115   0.671    0.05 student-t\n## 3 kid5        -0.211    0.218   0.599    0.05 student-t\n## 4 marMarried  -0.988   -0.381   0.290    0.05 student-t\n## 5 ment        -0.324   -0.162  -0.0275   0.05 student-t\n## 6 phd         -0.274    0.0220  0.291    0.05 student-t\n\nA partir de estos resultados, podemos tener una buena idea de qué predictores incluir en el modelo de probabilidad de conteo cero. Puede ser sensato reajustar un modelo más pequeño para evaluar si la distribución de arranque para “ment” todavía está sesgada."
  }
]